
fastacc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00001e34  00001ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000200  0080012a  0080012a  00001ef2  2**0
                  ALLOC
  3 .debug_aranges 00000140  00000000  00000000  00001ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000045b  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000118d  00000000  00000000  0000248d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000672  00000000  00000000  0000361a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000116c  00000000  00000000  00003c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  00004df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006f3  00000000  00000000  00005158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__vector_18>
      4c:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e3       	ldi	r30, 0x34	; 52
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 32       	cpi	r26, 0x2A	; 42
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	13 e0       	ldi	r17, 0x03	; 3
      8c:	aa e2       	ldi	r26, 0x2A	; 42
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 32       	cpi	r26, 0x2A	; 42
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 10 0a 	call	0x1420	; 0x1420 <main>
      9e:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_rw_blocking>:
volatile uint16_t adc_z_new;
uint8_t adc_z_buffer_packed[31]; // includes size byte
volatile boolean_t adc_z_want_update;

static uint8_t adc_rw_blocking(uint8_t write_byte)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	0f 92       	push	r0
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	89 83       	std	Y+1, r24	; 0x01
	// start TX
	SPDR = write_byte;
      b2:	ee e4       	ldi	r30, 0x4E	; 78
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	89 81       	ldd	r24, Y+1	; 0x01
      b8:	80 83       	st	Z, r24
	
	// wait for TX/RX to complete (blocking)
	while ((SPSR & (1 << SPIF)) == 0);
      ba:	ed e4       	ldi	r30, 0x4D	; 77
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	88 23       	and	r24, r24
      c2:	dc f7       	brge	.-10     	; 0xba <adc_rw_blocking+0x14>
	
	// read RX
	return (SPDR);
      c4:	ee e4       	ldi	r30, 0x4E	; 78
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
}
      ca:	0f 90       	pop	r0
      cc:	cf 91       	pop	r28
      ce:	df 91       	pop	r29
      d0:	08 95       	ret

000000d2 <adc_pack_buffer>:

void adc_pack_buffer()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	00 d0       	rcall	.+0      	; 0xd8 <adc_pack_buffer+0x6>
      d8:	00 d0       	rcall	.+0      	; 0xda <adc_pack_buffer+0x8>
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp_head = adc_z_buffer_head;
      de:	80 91 52 01 	lds	r24, 0x0152
      e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i;
	
	// first byte is size byte
	adc_z_buffer_packed[0] = 30;
      e4:	8e e1       	ldi	r24, 0x1E	; 30
      e6:	80 93 a4 02 	sts	0x02A4, r24
	
	// pack the 12-bit values into 8-bit chunks
	// since 2 12-bit values exactly fit into 3 bytes, do as a loop
	
	for (i = 1; i < 31; i += 3)
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	89 83       	std	Y+1, r24	; 0x01
      ee:	79 c0       	rjmp	.+242    	; 0x1e2 <adc_pack_buffer+0x110>
	{
		adc_z_buffer_packed[i] = adc_z_buffer[temp_head] & 0x00FF;
      f0:	89 81       	ldd	r24, Y+1	; 0x01
      f2:	28 2f       	mov	r18, r24
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	8a 81       	ldd	r24, Y+2	; 0x02
      f8:	88 2f       	mov	r24, r24
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	88 0f       	add	r24, r24
      fe:	99 1f       	adc	r25, r25
     100:	fc 01       	movw	r30, r24
     102:	e6 5d       	subi	r30, 0xD6	; 214
     104:	fe 4f       	sbci	r31, 0xFE	; 254
     106:	80 81       	ld	r24, Z
     108:	91 81       	ldd	r25, Z+1	; 0x01
     10a:	f9 01       	movw	r30, r18
     10c:	ec 55       	subi	r30, 0x5C	; 92
     10e:	fd 4f       	sbci	r31, 0xFD	; 253
     110:	80 83       	st	Z, r24
		adc_z_buffer_packed[i + 1] = adc_z_buffer[temp_head] >> 8;
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	88 2f       	mov	r24, r24
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	9c 01       	movw	r18, r24
     11a:	2f 5f       	subi	r18, 0xFF	; 255
     11c:	3f 4f       	sbci	r19, 0xFF	; 255
     11e:	8a 81       	ldd	r24, Y+2	; 0x02
     120:	88 2f       	mov	r24, r24
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	88 0f       	add	r24, r24
     126:	99 1f       	adc	r25, r25
     128:	fc 01       	movw	r30, r24
     12a:	e6 5d       	subi	r30, 0xD6	; 214
     12c:	fe 4f       	sbci	r31, 0xFE	; 254
     12e:	80 81       	ld	r24, Z
     130:	91 81       	ldd	r25, Z+1	; 0x01
     132:	89 2f       	mov	r24, r25
     134:	99 27       	eor	r25, r25
     136:	f9 01       	movw	r30, r18
     138:	ec 55       	subi	r30, 0x5C	; 92
     13a:	fd 4f       	sbci	r31, 0xFD	; 253
     13c:	80 83       	st	Z, r24
		temp_head = (temp_head >= 19) ? 0 : (temp_head + 1);
     13e:	8a 81       	ldd	r24, Y+2	; 0x02
     140:	83 31       	cpi	r24, 0x13	; 19
     142:	28 f4       	brcc	.+10     	; 0x14e <adc_pack_buffer+0x7c>
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	98 2f       	mov	r25, r24
     148:	9f 5f       	subi	r25, 0xFF	; 255
     14a:	9c 83       	std	Y+4, r25	; 0x04
     14c:	01 c0       	rjmp	.+2      	; 0x150 <adc_pack_buffer+0x7e>
     14e:	1c 82       	std	Y+4, r1	; 0x04
     150:	8c 81       	ldd	r24, Y+4	; 0x04
     152:	8a 83       	std	Y+2, r24	; 0x02
		adc_z_buffer_packed[i + 1] |= (adc_z_buffer[temp_head] << 4) & 0x00F0;
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	88 2f       	mov	r24, r24
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	9c 01       	movw	r18, r24
     15c:	2f 5f       	subi	r18, 0xFF	; 255
     15e:	3f 4f       	sbci	r19, 0xFF	; 255
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	88 2f       	mov	r24, r24
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	01 96       	adiw	r24, 0x01	; 1
     168:	fc 01       	movw	r30, r24
     16a:	ec 55       	subi	r30, 0x5C	; 92
     16c:	fd 4f       	sbci	r31, 0xFD	; 253
     16e:	40 81       	ld	r20, Z
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	88 2f       	mov	r24, r24
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	fc 01       	movw	r30, r24
     17c:	e6 5d       	subi	r30, 0xD6	; 214
     17e:	fe 4f       	sbci	r31, 0xFE	; 254
     180:	80 81       	ld	r24, Z
     182:	91 81       	ldd	r25, Z+1	; 0x01
     184:	82 95       	swap	r24
     186:	80 7f       	andi	r24, 0xF0	; 240
     188:	84 2b       	or	r24, r20
     18a:	f9 01       	movw	r30, r18
     18c:	ec 55       	subi	r30, 0x5C	; 92
     18e:	fd 4f       	sbci	r31, 0xFD	; 253
     190:	80 83       	st	Z, r24
		adc_z_buffer_packed[i + 2] = adc_z_buffer[temp_head] >> 4;
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	88 2f       	mov	r24, r24
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	9c 01       	movw	r18, r24
     19a:	2e 5f       	subi	r18, 0xFE	; 254
     19c:	3f 4f       	sbci	r19, 0xFF	; 255
     19e:	8a 81       	ldd	r24, Y+2	; 0x02
     1a0:	88 2f       	mov	r24, r24
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	fc 01       	movw	r30, r24
     1aa:	e6 5d       	subi	r30, 0xD6	; 214
     1ac:	fe 4f       	sbci	r31, 0xFE	; 254
     1ae:	80 81       	ld	r24, Z
     1b0:	91 81       	ldd	r25, Z+1	; 0x01
     1b2:	92 95       	swap	r25
     1b4:	82 95       	swap	r24
     1b6:	8f 70       	andi	r24, 0x0F	; 15
     1b8:	89 27       	eor	r24, r25
     1ba:	9f 70       	andi	r25, 0x0F	; 15
     1bc:	89 27       	eor	r24, r25
     1be:	f9 01       	movw	r30, r18
     1c0:	ec 55       	subi	r30, 0x5C	; 92
     1c2:	fd 4f       	sbci	r31, 0xFD	; 253
     1c4:	80 83       	st	Z, r24
		temp_head = (temp_head >= 19) ? 0 : (temp_head + 1);
     1c6:	8a 81       	ldd	r24, Y+2	; 0x02
     1c8:	83 31       	cpi	r24, 0x13	; 19
     1ca:	28 f4       	brcc	.+10     	; 0x1d6 <adc_pack_buffer+0x104>
     1cc:	8a 81       	ldd	r24, Y+2	; 0x02
     1ce:	98 2f       	mov	r25, r24
     1d0:	9f 5f       	subi	r25, 0xFF	; 255
     1d2:	9b 83       	std	Y+3, r25	; 0x03
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <adc_pack_buffer+0x106>
     1d6:	1b 82       	std	Y+3, r1	; 0x03
     1d8:	8b 81       	ldd	r24, Y+3	; 0x03
     1da:	8a 83       	std	Y+2, r24	; 0x02
	adc_z_buffer_packed[0] = 30;
	
	// pack the 12-bit values into 8-bit chunks
	// since 2 12-bit values exactly fit into 3 bytes, do as a loop
	
	for (i = 1; i < 31; i += 3)
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	8d 5f       	subi	r24, 0xFD	; 253
     1e0:	89 83       	std	Y+1, r24	; 0x01
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	8f 31       	cpi	r24, 0x1F	; 31
     1e6:	08 f4       	brcc	.+2      	; 0x1ea <adc_pack_buffer+0x118>
     1e8:	83 cf       	rjmp	.-250    	; 0xf0 <adc_pack_buffer+0x1e>
		temp_head = (temp_head >= 19) ? 0 : (temp_head + 1);
		adc_z_buffer_packed[i + 1] |= (adc_z_buffer[temp_head] << 4) & 0x00F0;
		adc_z_buffer_packed[i + 2] = adc_z_buffer[temp_head] >> 4;
		temp_head = (temp_head >= 19) ? 0 : (temp_head + 1);
	}
}
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <adc_buffer_update>:

void adc_buffer_update()
{
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
	// add newest ADC Z reading to buffer
	adc_z_buffer[adc_z_buffer_head] = adc_z_new;
     200:	80 91 52 01 	lds	r24, 0x0152
     204:	88 2f       	mov	r24, r24
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	20 91 c3 02 	lds	r18, 0x02C3
     20c:	30 91 c4 02 	lds	r19, 0x02C4
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	fc 01       	movw	r30, r24
     216:	e6 5d       	subi	r30, 0xD6	; 214
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	31 83       	std	Z+1, r19	; 0x01
     21c:	20 83       	st	Z, r18
	
	// clear update flag
	adc_z_want_update = FALSE;
     21e:	10 92 c5 02 	sts	0x02C5, r1

	// increment adc Z buffer head
	if (adc_z_buffer_head >= 19)
     222:	80 91 52 01 	lds	r24, 0x0152
     226:	83 31       	cpi	r24, 0x13	; 19
     228:	18 f0       	brcs	.+6      	; 0x230 <adc_buffer_update+0x38>
		adc_z_buffer_head = 0;
     22a:	10 92 52 01 	sts	0x0152, r1
     22e:	05 c0       	rjmp	.+10     	; 0x23a <adc_buffer_update+0x42>
	else
		adc_z_buffer_head++;
     230:	80 91 52 01 	lds	r24, 0x0152
     234:	8f 5f       	subi	r24, 0xFF	; 255
     236:	80 93 52 01 	sts	0x0152, r24
}
     23a:	cf 91       	pop	r28
     23c:	df 91       	pop	r29
     23e:	08 95       	ret

00000240 <adc_update>:

void adc_update()
{
     240:	df 93       	push	r29
     242:	cf 93       	push	r28
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
	if (!adc_z_want_update)
     248:	80 91 c5 02 	lds	r24, 0x02C5
     24c:	88 23       	and	r24, r24
     24e:	81 f5       	brne	.+96     	; 0x2b0 <adc_update+0x70>
	{
		// update flag is false, so last data was successfully buffered
	
		// read channel 2 (accelerometer Z axis)
		PORTC &= ~nSPI_CS_ADC; // set ADC CS low
     250:	a8 e2       	ldi	r26, 0x28	; 40
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	e8 e2       	ldi	r30, 0x28	; 40
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	8c 7f       	andi	r24, 0xFC	; 252
     25c:	8c 93       	st	X, r24
		adc_rw_blocking(0x06);
     25e:	86 e0       	ldi	r24, 0x06	; 6
     260:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_rw_blocking>
		adc_z_new = (adc_rw_blocking(0x80) & 0x000F) << 8;
     264:	80 e8       	ldi	r24, 0x80	; 128
     266:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_rw_blocking>
     26a:	88 2f       	mov	r24, r24
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	8f 70       	andi	r24, 0x0F	; 15
     270:	90 70       	andi	r25, 0x00	; 0
     272:	98 2f       	mov	r25, r24
     274:	88 27       	eor	r24, r24
     276:	90 93 c4 02 	sts	0x02C4, r25
     27a:	80 93 c3 02 	sts	0x02C3, r24
		adc_z_new |= adc_rw_blocking(0x00);
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_rw_blocking>
     284:	28 2f       	mov	r18, r24
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	80 91 c3 02 	lds	r24, 0x02C3
     28c:	90 91 c4 02 	lds	r25, 0x02C4
     290:	82 2b       	or	r24, r18
     292:	93 2b       	or	r25, r19
     294:	90 93 c4 02 	sts	0x02C4, r25
     298:	80 93 c3 02 	sts	0x02C3, r24
		PORTC |= nSPI_CS_ADC; // set ADC CS high
     29c:	a8 e2       	ldi	r26, 0x28	; 40
     29e:	b0 e0       	ldi	r27, 0x00	; 0
     2a0:	e8 e2       	ldi	r30, 0x28	; 40
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	83 60       	ori	r24, 0x03	; 3
     2a8:	8c 93       	st	X, r24
		
		// set update flag (allows remaining work to be done outside of ISR, and without risk of adc_z_new conflict)
		adc_z_want_update = TRUE;
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	80 93 c5 02 	sts	0x02C5, r24
	}
}
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret

000002b6 <adc_setup>:

void adc_setup()
{
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // enable SPI, set SPI master, set SPI clock as fosc/16 (1 MHz)
     2be:	ec e4       	ldi	r30, 0x4C	; 76
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	81 e5       	ldi	r24, 0x51	; 81
     2c4:	80 83       	st	Z, r24
	adc_z_buffer_head = 0;
     2c6:	10 92 52 01 	sts	0x0152, r1
	adc_z_want_update = FALSE;
     2ca:	10 92 c5 02 	sts	0x02C5, r1
     2ce:	cf 91       	pop	r28
     2d0:	df 91       	pop	r29
     2d2:	08 95       	ret

000002d4 <comms_putchar>:
static FILE comms_putchar_file;

// include for printf and vprintf functionality (used by send_text function)
// uses temp_text_buffer and temp_text_buffer_count (and assumes the buffer never overflows)
static int comms_putchar(char ch, FILE *stream)
{ 
     2d4:	df 93       	push	r29
     2d6:	cf 93       	push	r28
     2d8:	00 d0       	rcall	.+0      	; 0x2da <comms_putchar+0x6>
     2da:	0f 92       	push	r0
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	89 83       	std	Y+1, r24	; 0x01
     2e2:	7b 83       	std	Y+3, r23	; 0x03
     2e4:	6a 83       	std	Y+2, r22	; 0x02
  if (ch == '\n')
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	8a 30       	cpi	r24, 0x0A	; 10
     2ea:	79 f4       	brne	.+30     	; 0x30a <comms_putchar+0x36>
		temp_text_buffer[temp_text_buffer_count++] = '\r';
     2ec:	20 91 d5 01 	lds	r18, 0x01D5
     2f0:	82 2f       	mov	r24, r18
     2f2:	99 27       	eor	r25, r25
     2f4:	87 fd       	sbrc	r24, 7
     2f6:	90 95       	com	r25
     2f8:	fc 01       	movw	r30, r24
     2fa:	eb 56       	subi	r30, 0x6B	; 107
     2fc:	fe 4f       	sbci	r31, 0xFE	; 254
     2fe:	8d e0       	ldi	r24, 0x0D	; 13
     300:	80 83       	st	Z, r24
     302:	82 2f       	mov	r24, r18
     304:	8f 5f       	subi	r24, 0xFF	; 255
     306:	80 93 d5 01 	sts	0x01D5, r24

  temp_text_buffer[temp_text_buffer_count++] = ch;
     30a:	20 91 d5 01 	lds	r18, 0x01D5
     30e:	82 2f       	mov	r24, r18
     310:	99 27       	eor	r25, r25
     312:	87 fd       	sbrc	r24, 7
     314:	90 95       	com	r25
     316:	fc 01       	movw	r30, r24
     318:	eb 56       	subi	r30, 0x6B	; 107
     31a:	fe 4f       	sbci	r31, 0xFE	; 254
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	80 83       	st	Z, r24
     320:	82 2f       	mov	r24, r18
     322:	8f 5f       	subi	r24, 0xFF	; 255
     324:	80 93 d5 01 	sts	0x01D5, r24

  return (ch); // assumes always successful (would otherwise return EOF)
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	88 2f       	mov	r24, r24
     32c:	90 e0       	ldi	r25, 0x00	; 0
}
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	cf 91       	pop	r28
     336:	df 91       	pop	r29
     338:	08 95       	ret

0000033a <comms_stream_setup>:

static void comms_stream_setup(comms_stream_struct *cs, uint8_t *tx_fifo_buffer, uint8_t tx_fifo_length, uint8_t *rx_fifo_buffer, uint8_t rx_fifo_length, uint8_t *command_bytes, uint8_t command_bytes_max_length)
{
     33a:	cf 92       	push	r12
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	df 93       	push	r29
     344:	cf 93       	push	r28
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	2b 97       	sbiw	r28, 0x0b	; 11
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
     356:	9a 83       	std	Y+2, r25	; 0x02
     358:	89 83       	std	Y+1, r24	; 0x01
     35a:	7c 83       	std	Y+4, r23	; 0x04
     35c:	6b 83       	std	Y+3, r22	; 0x03
     35e:	4d 83       	std	Y+5, r20	; 0x05
     360:	3f 83       	std	Y+7, r19	; 0x07
     362:	2e 83       	std	Y+6, r18	; 0x06
     364:	08 87       	std	Y+8, r16	; 0x08
     366:	fa 86       	std	Y+10, r15	; 0x0a
     368:	e9 86       	std	Y+9, r14	; 0x09
     36a:	cb 86       	std	Y+11, r12	; 0x0b
  fifo_setup(&(cs->tx_fifo), tx_fifo_buffer, tx_fifo_length);
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	9a 81       	ldd	r25, Y+2	; 0x02
     370:	05 96       	adiw	r24, 0x05	; 5
     372:	2b 81       	ldd	r18, Y+3	; 0x03
     374:	3c 81       	ldd	r19, Y+4	; 0x04
     376:	b9 01       	movw	r22, r18
     378:	4d 81       	ldd	r20, Y+5	; 0x05
     37a:	0e 94 20 09 	call	0x1240	; 0x1240 <fifo_setup>
  fifo_setup(&(cs->rx_fifo), rx_fifo_buffer, rx_fifo_length);
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	9a 81       	ldd	r25, Y+2	; 0x02
     382:	2e 81       	ldd	r18, Y+6	; 0x06
     384:	3f 81       	ldd	r19, Y+7	; 0x07
     386:	b9 01       	movw	r22, r18
     388:	48 85       	ldd	r20, Y+8	; 0x08
     38a:	0e 94 20 09 	call	0x1240	; 0x1240 <fifo_setup>
  cs->scan_state = 0;
     38e:	e9 81       	ldd	r30, Y+1	; 0x01
     390:	fa 81       	ldd	r31, Y+2	; 0x02
     392:	16 8a       	std	Z+22, r1	; 0x16
  cs->unknown_start_bytes = FALSE;
     394:	e9 81       	ldd	r30, Y+1	; 0x01
     396:	fa 81       	ldd	r31, Y+2	; 0x02
     398:	16 86       	std	Z+14, r1	; 0x0e
  cs->rx_packet_errors = 0;
     39a:	e9 81       	ldd	r30, Y+1	; 0x01
     39c:	fa 81       	ldd	r31, Y+2	; 0x02
     39e:	12 86       	std	Z+10, r1	; 0x0a
     3a0:	13 86       	std	Z+11, r1	; 0x0b
     3a2:	14 86       	std	Z+12, r1	; 0x0c
     3a4:	15 86       	std	Z+13, r1	; 0x0d
	
	cs->command_bytes = command_bytes;
     3a6:	e9 81       	ldd	r30, Y+1	; 0x01
     3a8:	fa 81       	ldd	r31, Y+2	; 0x02
     3aa:	89 85       	ldd	r24, Y+9	; 0x09
     3ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ae:	91 8b       	std	Z+17, r25	; 0x11
     3b0:	80 8b       	std	Z+16, r24	; 0x10
  cs->command_bytes_max_length = command_bytes_max_length;
     3b2:	e9 81       	ldd	r30, Y+1	; 0x01
     3b4:	fa 81       	ldd	r31, Y+2	; 0x02
     3b6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3b8:	83 8b       	std	Z+19, r24	; 0x13
  cs->command_bytes_available = 0;
     3ba:	e9 81       	ldd	r30, Y+1	; 0x01
     3bc:	fa 81       	ldd	r31, Y+2	; 0x02
     3be:	14 8a       	std	Z+20, r1	; 0x14
  
	// cs->is_single_class should be set by command source itself (i.e. from start byte of incoming comms packet)
  // however, if this does not dynamically change default to cs->is_single_class is FALSE
  cs->is_single_class = FALSE;
     3c0:	e9 81       	ldd	r30, Y+1	; 0x01
     3c2:	fa 81       	ldd	r31, Y+2	; 0x02
     3c4:	17 86       	std	Z+15, r1	; 0x0f
}
     3c6:	2b 96       	adiw	r28, 0x0b	; 11
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	cf 91       	pop	r28
     3d4:	df 91       	pop	r29
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	cf 90       	pop	r12
     3de:	08 95       	ret

000003e0 <comms_setup>:


void comms_setup()
{
     3e0:	cf 92       	push	r12
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	df 93       	push	r29
     3ea:	cf 93       	push	r28
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
	// set up stdio write redirect to comms_putchar
	fdev_setup_stream(&comms_putchar_file, &comms_putchar, NULL, _FDEV_SETUP_WRITE);
     3f0:	8a e6       	ldi	r24, 0x6A	; 106
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	90 93 9f 02 	sts	0x029F, r25
     3f8:	80 93 9e 02 	sts	0x029E, r24
     3fc:	10 92 a1 02 	sts	0x02A1, r1
     400:	10 92 a0 02 	sts	0x02A0, r1
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	80 93 99 02 	sts	0x0299, r24
     40a:	10 92 a3 02 	sts	0x02A3, r1
     40e:	10 92 a2 02 	sts	0x02A2, r1
	stdout = &comms_putchar_file;
     412:	86 e9       	ldi	r24, 0x96	; 150
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	90 93 27 03 	sts	0x0327, r25
     41a:	80 93 26 03 	sts	0x0326, r24

	// set up comms stream
  comms_stream_setup(&payload_stream, payload_tx_fifo_buffer, PAYLOAD_TX_FIFO_LENGTH, payload_rx_fifo_buffer, PAYLOAD_RX_FIFO_LENGTH, payload_command_bytes, PAYLOAD_COMMAND_BYTES_MAX_LENGTH);
     41e:	87 ec       	ldi	r24, 0xC7	; 199
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	26 ed       	ldi	r18, 0xD6	; 214
     424:	31 e0       	ldi	r19, 0x01	; 1
     426:	e6 e3       	ldi	r30, 0x36	; 54
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	a3 e5       	ldi	r26, 0x53	; 83
     42c:	b1 e0       	ldi	r27, 0x01	; 1
     42e:	b9 01       	movw	r22, r18
     430:	40 e6       	ldi	r20, 0x60	; 96
     432:	9f 01       	movw	r18, r30
     434:	00 e6       	ldi	r16, 0x60	; 96
     436:	7d 01       	movw	r14, r26
     438:	cc 24       	eor	r12, r12
     43a:	68 94       	set
     43c:	c6 f8       	bld	r12, 6
     43e:	0e 94 9d 01 	call	0x33a	; 0x33a <comms_stream_setup>
}
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	cf 90       	pop	r12
     44e:	08 95       	ret

00000450 <comms_packet_scan>:

static boolean_t comms_packet_scan(comms_stream_struct *cs) // returns TRUE when a complete and validated packet has been received
{
     450:	df 93       	push	r29
     452:	cf 93       	push	r28
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	28 97       	sbiw	r28, 0x08	; 8
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
     462:	cd bf       	out	0x3d, r28	; 61
     464:	9b 83       	std	Y+3, r25	; 0x03
     466:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t rx_byte;

  // read waiting byte in RX fifo
  fifo_get_byte(&(cs->rx_fifo), &rx_byte);
     468:	8a 81       	ldd	r24, Y+2	; 0x02
     46a:	9b 81       	ldd	r25, Y+3	; 0x03
     46c:	9e 01       	movw	r18, r28
     46e:	2f 5f       	subi	r18, 0xFF	; 255
     470:	3f 4f       	sbci	r19, 0xFF	; 255
     472:	b9 01       	movw	r22, r18
     474:	0e 94 71 09 	call	0x12e2	; 0x12e2 <fifo_get_byte>

  switch (cs->scan_state)
     478:	ea 81       	ldd	r30, Y+2	; 0x02
     47a:	fb 81       	ldd	r31, Y+3	; 0x03
     47c:	86 89       	ldd	r24, Z+22	; 0x16
     47e:	28 2f       	mov	r18, r24
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	38 87       	std	Y+8, r19	; 0x08
     484:	2f 83       	std	Y+7, r18	; 0x07
     486:	8f 81       	ldd	r24, Y+7	; 0x07
     488:	98 85       	ldd	r25, Y+8	; 0x08
     48a:	84 30       	cpi	r24, 0x04	; 4
     48c:	91 05       	cpc	r25, r1
     48e:	09 f4       	brne	.+2      	; 0x492 <comms_packet_scan+0x42>
     490:	19 c1       	rjmp	.+562    	; 0x6c4 <__stack+0x1c5>
     492:	2f 81       	ldd	r18, Y+7	; 0x07
     494:	38 85       	ldd	r19, Y+8	; 0x08
     496:	25 30       	cpi	r18, 0x05	; 5
     498:	31 05       	cpc	r19, r1
     49a:	ec f4       	brge	.+58     	; 0x4d6 <comms_packet_scan+0x86>
     49c:	8f 81       	ldd	r24, Y+7	; 0x07
     49e:	98 85       	ldd	r25, Y+8	; 0x08
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	91 05       	cpc	r25, r1
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <comms_packet_scan+0x58>
     4a6:	41 c0       	rjmp	.+130    	; 0x52a <__stack+0x2b>
     4a8:	2f 81       	ldd	r18, Y+7	; 0x07
     4aa:	38 85       	ldd	r19, Y+8	; 0x08
     4ac:	22 30       	cpi	r18, 0x02	; 2
     4ae:	31 05       	cpc	r19, r1
     4b0:	2c f4       	brge	.+10     	; 0x4bc <comms_packet_scan+0x6c>
     4b2:	8f 81       	ldd	r24, Y+7	; 0x07
     4b4:	98 85       	ldd	r25, Y+8	; 0x08
     4b6:	00 97       	sbiw	r24, 0x00	; 0
     4b8:	39 f1       	breq	.+78     	; 0x508 <__stack+0x9>
     4ba:	44 c3       	rjmp	.+1672   	; 0xb44 <__stack+0x645>
     4bc:	2f 81       	ldd	r18, Y+7	; 0x07
     4be:	38 85       	ldd	r19, Y+8	; 0x08
     4c0:	22 30       	cpi	r18, 0x02	; 2
     4c2:	31 05       	cpc	r19, r1
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <comms_packet_scan+0x78>
     4c6:	92 c0       	rjmp	.+292    	; 0x5ec <__stack+0xed>
     4c8:	8f 81       	ldd	r24, Y+7	; 0x07
     4ca:	98 85       	ldd	r25, Y+8	; 0x08
     4cc:	83 30       	cpi	r24, 0x03	; 3
     4ce:	91 05       	cpc	r25, r1
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <comms_packet_scan+0x84>
     4d2:	cd c0       	rjmp	.+410    	; 0x66e <__stack+0x16f>
     4d4:	37 c3       	rjmp	.+1646   	; 0xb44 <__stack+0x645>
     4d6:	2f 81       	ldd	r18, Y+7	; 0x07
     4d8:	38 85       	ldd	r19, Y+8	; 0x08
     4da:	26 30       	cpi	r18, 0x06	; 6
     4dc:	31 05       	cpc	r19, r1
     4de:	09 f4       	brne	.+2      	; 0x4e2 <comms_packet_scan+0x92>
     4e0:	8f c1       	rjmp	.+798    	; 0x800 <__stack+0x301>
     4e2:	8f 81       	ldd	r24, Y+7	; 0x07
     4e4:	98 85       	ldd	r25, Y+8	; 0x08
     4e6:	86 30       	cpi	r24, 0x06	; 6
     4e8:	91 05       	cpc	r25, r1
     4ea:	0c f4       	brge	.+2      	; 0x4ee <comms_packet_scan+0x9e>
     4ec:	3e c1       	rjmp	.+636    	; 0x76a <__stack+0x26b>
     4ee:	2f 81       	ldd	r18, Y+7	; 0x07
     4f0:	38 85       	ldd	r19, Y+8	; 0x08
     4f2:	27 30       	cpi	r18, 0x07	; 7
     4f4:	31 05       	cpc	r19, r1
     4f6:	09 f4       	brne	.+2      	; 0x4fa <comms_packet_scan+0xaa>
     4f8:	b7 c2       	rjmp	.+1390   	; 0xa68 <__stack+0x569>
     4fa:	8f 81       	ldd	r24, Y+7	; 0x07
     4fc:	98 85       	ldd	r25, Y+8	; 0x08
     4fe:	88 30       	cpi	r24, 0x08	; 8
     500:	91 05       	cpc	r25, r1
     502:	09 f4       	brne	.+2      	; 0x506 <__stack+0x7>
     504:	de c2       	rjmp	.+1468   	; 0xac2 <__stack+0x5c3>
     506:	1e c3       	rjmp	.+1596   	; 0xb44 <__stack+0x645>
  {
    case 0:
      // wait for START byte (two MSB's are high) to signify start of packet
      if (rx_byte >= COMMS_START_BYTE_BASE)
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	80 3c       	cpi	r24, 0xC0	; 192
     50c:	48 f0       	brcs	.+18     	; 0x520 <__stack+0x21>
      {
        cs->start_byte = rx_byte;
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	ea 81       	ldd	r30, Y+2	; 0x02
     512:	fb 81       	ldd	r31, Y+3	; 0x03
     514:	82 8b       	std	Z+18, r24	; 0x12
        cs->scan_state = 1;
     516:	ea 81       	ldd	r30, Y+2	; 0x02
     518:	fb 81       	ldd	r31, Y+3	; 0x03
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	86 8b       	std	Z+22, r24	; 0x16
     51e:	12 c3       	rjmp	.+1572   	; 0xb44 <__stack+0x645>
      }
      else
        cs->unknown_start_bytes = TRUE;
     520:	ea 81       	ldd	r30, Y+2	; 0x02
     522:	fb 81       	ldd	r31, Y+3	; 0x03
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	86 87       	std	Z+14, r24	; 0x0e
     528:	0d c3       	rjmp	.+1562   	; 0xb44 <__stack+0x645>
      break;

    case 1:
      // expect DLE after START byte

      if (cs->unknown_start_bytes)
     52a:	ea 81       	ldd	r30, Y+2	; 0x02
     52c:	fb 81       	ldd	r31, Y+3	; 0x03
     52e:	86 85       	ldd	r24, Z+14	; 0x0e
     530:	88 23       	and	r24, r24
     532:	91 f0       	breq	.+36     	; 0x558 <__stack+0x59>
      {
        cs->rx_packet_errors++;
     534:	ea 81       	ldd	r30, Y+2	; 0x02
     536:	fb 81       	ldd	r31, Y+3	; 0x03
     538:	82 85       	ldd	r24, Z+10	; 0x0a
     53a:	93 85       	ldd	r25, Z+11	; 0x0b
     53c:	a4 85       	ldd	r26, Z+12	; 0x0c
     53e:	b5 85       	ldd	r27, Z+13	; 0x0d
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	a1 1d       	adc	r26, r1
     544:	b1 1d       	adc	r27, r1
     546:	ea 81       	ldd	r30, Y+2	; 0x02
     548:	fb 81       	ldd	r31, Y+3	; 0x03
     54a:	82 87       	std	Z+10, r24	; 0x0a
     54c:	93 87       	std	Z+11, r25	; 0x0b
     54e:	a4 87       	std	Z+12, r26	; 0x0c
     550:	b5 87       	std	Z+13, r27	; 0x0d
        cs->unknown_start_bytes = FALSE;
     552:	ea 81       	ldd	r30, Y+2	; 0x02
     554:	fb 81       	ldd	r31, Y+3	; 0x03
     556:	16 86       	std	Z+14, r1	; 0x0e
      }

      if (rx_byte == COMMS_DLE_BYTE)
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	8d 3b       	cpi	r24, 0xBD	; 189
     55c:	61 f5       	brne	.+88     	; 0x5b6 <__stack+0xb7>
      {
        cs->is_single_class = (cs->start_byte & COMMS_START_SINGLE_CLASS) ? TRUE : FALSE;
     55e:	ea 81       	ldd	r30, Y+2	; 0x02
     560:	fb 81       	ldd	r31, Y+3	; 0x03
     562:	82 89       	ldd	r24, Z+18	; 0x12
     564:	88 2f       	mov	r24, r24
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	81 70       	andi	r24, 0x01	; 1
     56a:	90 70       	andi	r25, 0x00	; 0
     56c:	88 23       	and	r24, r24
     56e:	19 f0       	breq	.+6      	; 0x576 <__stack+0x77>
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	9e 83       	std	Y+6, r25	; 0x06
     574:	01 c0       	rjmp	.+2      	; 0x578 <__stack+0x79>
     576:	1e 82       	std	Y+6, r1	; 0x06
     578:	ea 81       	ldd	r30, Y+2	; 0x02
     57a:	fb 81       	ldd	r31, Y+3	; 0x03
     57c:	2e 81       	ldd	r18, Y+6	; 0x06
     57e:	27 87       	std	Z+15, r18	; 0x0f
        if (cs->start_byte & COMMS_START_HAS_ADDRESS)
     580:	ea 81       	ldd	r30, Y+2	; 0x02
     582:	fb 81       	ldd	r31, Y+3	; 0x03
     584:	82 89       	ldd	r24, Z+18	; 0x12
     586:	88 2f       	mov	r24, r24
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	8c 70       	andi	r24, 0x0C	; 12
     58c:	90 70       	andi	r25, 0x00	; 0
     58e:	00 97       	sbiw	r24, 0x00	; 0
     590:	29 f0       	breq	.+10     	; 0x59c <__stack+0x9d>
          cs->scan_state = 2;
     592:	ea 81       	ldd	r30, Y+2	; 0x02
     594:	fb 81       	ldd	r31, Y+3	; 0x03
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	86 8b       	std	Z+22, r24	; 0x16
     59a:	d4 c2       	rjmp	.+1448   	; 0xb44 <__stack+0x645>
        else
        {
          cs->source_address = 255;
     59c:	ea 81       	ldd	r30, Y+2	; 0x02
     59e:	fb 81       	ldd	r31, Y+3	; 0x03
     5a0:	8f ef       	ldi	r24, 0xFF	; 255
     5a2:	80 8f       	std	Z+24, r24	; 0x18
          cs->destination_address = 255;
     5a4:	ea 81       	ldd	r30, Y+2	; 0x02
     5a6:	fb 81       	ldd	r31, Y+3	; 0x03
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	81 8f       	std	Z+25, r24	; 0x19
          cs->scan_state = 4;
     5ac:	ea 81       	ldd	r30, Y+2	; 0x02
     5ae:	fb 81       	ldd	r31, Y+3	; 0x03
     5b0:	84 e0       	ldi	r24, 0x04	; 4
     5b2:	86 8b       	std	Z+22, r24	; 0x16
     5b4:	c7 c2       	rjmp	.+1422   	; 0xb44 <__stack+0x645>
        }
      }
      else if (rx_byte >= COMMS_START_BYTE_BASE)
     5b6:	89 81       	ldd	r24, Y+1	; 0x01
     5b8:	80 3c       	cpi	r24, 0xC0	; 192
     5ba:	28 f0       	brcs	.+10     	; 0x5c6 <__stack+0xc7>
      {
        cs->start_byte = rx_byte;
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	ea 81       	ldd	r30, Y+2	; 0x02
     5c0:	fb 81       	ldd	r31, Y+3	; 0x03
     5c2:	82 8b       	std	Z+18, r24	; 0x12
     5c4:	bf c2       	rjmp	.+1406   	; 0xb44 <__stack+0x645>
        // stay in scan_state 1
      }
      else
      {
        cs->rx_packet_errors++;
     5c6:	ea 81       	ldd	r30, Y+2	; 0x02
     5c8:	fb 81       	ldd	r31, Y+3	; 0x03
     5ca:	82 85       	ldd	r24, Z+10	; 0x0a
     5cc:	93 85       	ldd	r25, Z+11	; 0x0b
     5ce:	a4 85       	ldd	r26, Z+12	; 0x0c
     5d0:	b5 85       	ldd	r27, Z+13	; 0x0d
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	a1 1d       	adc	r26, r1
     5d6:	b1 1d       	adc	r27, r1
     5d8:	ea 81       	ldd	r30, Y+2	; 0x02
     5da:	fb 81       	ldd	r31, Y+3	; 0x03
     5dc:	82 87       	std	Z+10, r24	; 0x0a
     5de:	93 87       	std	Z+11, r25	; 0x0b
     5e0:	a4 87       	std	Z+12, r26	; 0x0c
     5e2:	b5 87       	std	Z+13, r27	; 0x0d
        cs->scan_state = 0;
     5e4:	ea 81       	ldd	r30, Y+2	; 0x02
     5e6:	fb 81       	ldd	r31, Y+3	; 0x03
     5e8:	16 8a       	std	Z+22, r1	; 0x16
     5ea:	ac c2       	rjmp	.+1368   	; 0xb44 <__stack+0x645>
      }
      break;

    case 2:
      // expect source or destination address
      if (rx_byte & 0x80)
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	88 23       	and	r24, r24
     5f0:	fc f4       	brge	.+62     	; 0x630 <__stack+0x131>
      {
        // invalid address
        cs->rx_packet_errors++;
     5f2:	ea 81       	ldd	r30, Y+2	; 0x02
     5f4:	fb 81       	ldd	r31, Y+3	; 0x03
     5f6:	82 85       	ldd	r24, Z+10	; 0x0a
     5f8:	93 85       	ldd	r25, Z+11	; 0x0b
     5fa:	a4 85       	ldd	r26, Z+12	; 0x0c
     5fc:	b5 85       	ldd	r27, Z+13	; 0x0d
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	a1 1d       	adc	r26, r1
     602:	b1 1d       	adc	r27, r1
     604:	ea 81       	ldd	r30, Y+2	; 0x02
     606:	fb 81       	ldd	r31, Y+3	; 0x03
     608:	82 87       	std	Z+10, r24	; 0x0a
     60a:	93 87       	std	Z+11, r25	; 0x0b
     60c:	a4 87       	std	Z+12, r26	; 0x0c
     60e:	b5 87       	std	Z+13, r27	; 0x0d
        if (rx_byte >= COMMS_START_BYTE_BASE)
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	80 3c       	cpi	r24, 0xC0	; 192
     614:	48 f0       	brcs	.+18     	; 0x628 <__stack+0x129>
        {
          cs->start_byte = rx_byte;
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	ea 81       	ldd	r30, Y+2	; 0x02
     61a:	fb 81       	ldd	r31, Y+3	; 0x03
     61c:	82 8b       	std	Z+18, r24	; 0x12
          cs->scan_state = 1;
     61e:	ea 81       	ldd	r30, Y+2	; 0x02
     620:	fb 81       	ldd	r31, Y+3	; 0x03
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	86 8b       	std	Z+22, r24	; 0x16
     626:	8e c2       	rjmp	.+1308   	; 0xb44 <__stack+0x645>
        }
        else
          cs->scan_state = 0;
     628:	ea 81       	ldd	r30, Y+2	; 0x02
     62a:	fb 81       	ldd	r31, Y+3	; 0x03
     62c:	16 8a       	std	Z+22, r1	; 0x16
     62e:	8a c2       	rjmp	.+1300   	; 0xb44 <__stack+0x645>
      }
      else if (cs->start_byte & COMMS_START_HAS_SOURCE_ADDRESS)
     630:	ea 81       	ldd	r30, Y+2	; 0x02
     632:	fb 81       	ldd	r31, Y+3	; 0x03
     634:	82 89       	ldd	r24, Z+18	; 0x12
     636:	88 2f       	mov	r24, r24
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	88 70       	andi	r24, 0x08	; 8
     63c:	90 70       	andi	r25, 0x00	; 0
     63e:	00 97       	sbiw	r24, 0x00	; 0
     640:	49 f0       	breq	.+18     	; 0x654 <__stack+0x155>
      {
        cs->source_address = rx_byte;
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	ea 81       	ldd	r30, Y+2	; 0x02
     646:	fb 81       	ldd	r31, Y+3	; 0x03
     648:	80 8f       	std	Z+24, r24	; 0x18
        cs->scan_state = 3;
     64a:	ea 81       	ldd	r30, Y+2	; 0x02
     64c:	fb 81       	ldd	r31, Y+3	; 0x03
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	86 8b       	std	Z+22, r24	; 0x16
     652:	78 c2       	rjmp	.+1264   	; 0xb44 <__stack+0x645>
      }
      else
      {
        cs->source_address = 255;
     654:	ea 81       	ldd	r30, Y+2	; 0x02
     656:	fb 81       	ldd	r31, Y+3	; 0x03
     658:	8f ef       	ldi	r24, 0xFF	; 255
     65a:	80 8f       	std	Z+24, r24	; 0x18
        cs->destination_address = rx_byte;
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	ea 81       	ldd	r30, Y+2	; 0x02
     660:	fb 81       	ldd	r31, Y+3	; 0x03
     662:	81 8f       	std	Z+25, r24	; 0x19
        cs->scan_state = 4;
     664:	ea 81       	ldd	r30, Y+2	; 0x02
     666:	fb 81       	ldd	r31, Y+3	; 0x03
     668:	84 e0       	ldi	r24, 0x04	; 4
     66a:	86 8b       	std	Z+22, r24	; 0x16
     66c:	6b c2       	rjmp	.+1238   	; 0xb44 <__stack+0x645>
      }
      break;

    case 3:
      // expect destination address
      if (rx_byte & 0x80)
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	88 23       	and	r24, r24
     672:	fc f4       	brge	.+62     	; 0x6b2 <__stack+0x1b3>
      {
        // invalid address
        cs->rx_packet_errors++;
     674:	ea 81       	ldd	r30, Y+2	; 0x02
     676:	fb 81       	ldd	r31, Y+3	; 0x03
     678:	82 85       	ldd	r24, Z+10	; 0x0a
     67a:	93 85       	ldd	r25, Z+11	; 0x0b
     67c:	a4 85       	ldd	r26, Z+12	; 0x0c
     67e:	b5 85       	ldd	r27, Z+13	; 0x0d
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	a1 1d       	adc	r26, r1
     684:	b1 1d       	adc	r27, r1
     686:	ea 81       	ldd	r30, Y+2	; 0x02
     688:	fb 81       	ldd	r31, Y+3	; 0x03
     68a:	82 87       	std	Z+10, r24	; 0x0a
     68c:	93 87       	std	Z+11, r25	; 0x0b
     68e:	a4 87       	std	Z+12, r26	; 0x0c
     690:	b5 87       	std	Z+13, r27	; 0x0d
        if (rx_byte >= COMMS_START_BYTE_BASE)
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	80 3c       	cpi	r24, 0xC0	; 192
     696:	48 f0       	brcs	.+18     	; 0x6aa <__stack+0x1ab>
        {
          cs->start_byte = rx_byte;
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	ea 81       	ldd	r30, Y+2	; 0x02
     69c:	fb 81       	ldd	r31, Y+3	; 0x03
     69e:	82 8b       	std	Z+18, r24	; 0x12
          cs->scan_state = 1;
     6a0:	ea 81       	ldd	r30, Y+2	; 0x02
     6a2:	fb 81       	ldd	r31, Y+3	; 0x03
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	86 8b       	std	Z+22, r24	; 0x16
     6a8:	4d c2       	rjmp	.+1178   	; 0xb44 <__stack+0x645>
        }
        else
          cs->scan_state = 0;
     6aa:	ea 81       	ldd	r30, Y+2	; 0x02
     6ac:	fb 81       	ldd	r31, Y+3	; 0x03
     6ae:	16 8a       	std	Z+22, r1	; 0x16
     6b0:	49 c2       	rjmp	.+1170   	; 0xb44 <__stack+0x645>
      }
      else
      {
        cs->destination_address = rx_byte;
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	ea 81       	ldd	r30, Y+2	; 0x02
     6b6:	fb 81       	ldd	r31, Y+3	; 0x03
     6b8:	81 8f       	std	Z+25, r24	; 0x19
        cs->scan_state = 4;
     6ba:	ea 81       	ldd	r30, Y+2	; 0x02
     6bc:	fb 81       	ldd	r31, Y+3	; 0x03
     6be:	84 e0       	ldi	r24, 0x04	; 4
     6c0:	86 8b       	std	Z+22, r24	; 0x16
     6c2:	40 c2       	rjmp	.+1152   	; 0xb44 <__stack+0x645>
      }
      break;

    case 4:
      // expect first byte of payload, or DLE for zero-length payload
      if (rx_byte & 0x80)
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	88 23       	and	r24, r24
     6c8:	3c f5       	brge	.+78     	; 0x718 <__stack+0x219>
      {
        if (rx_byte == COMMS_DLE_BYTE)
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	8d 3b       	cpi	r24, 0xBD	; 189
     6ce:	29 f4       	brne	.+10     	; 0x6da <__stack+0x1db>
          cs->scan_state = 7;
     6d0:	ea 81       	ldd	r30, Y+2	; 0x02
     6d2:	fb 81       	ldd	r31, Y+3	; 0x03
     6d4:	87 e0       	ldi	r24, 0x07	; 7
     6d6:	86 8b       	std	Z+22, r24	; 0x16
     6d8:	35 c2       	rjmp	.+1130   	; 0xb44 <__stack+0x645>
        else
        {
          cs->rx_packet_errors++;
     6da:	ea 81       	ldd	r30, Y+2	; 0x02
     6dc:	fb 81       	ldd	r31, Y+3	; 0x03
     6de:	82 85       	ldd	r24, Z+10	; 0x0a
     6e0:	93 85       	ldd	r25, Z+11	; 0x0b
     6e2:	a4 85       	ldd	r26, Z+12	; 0x0c
     6e4:	b5 85       	ldd	r27, Z+13	; 0x0d
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	a1 1d       	adc	r26, r1
     6ea:	b1 1d       	adc	r27, r1
     6ec:	ea 81       	ldd	r30, Y+2	; 0x02
     6ee:	fb 81       	ldd	r31, Y+3	; 0x03
     6f0:	82 87       	std	Z+10, r24	; 0x0a
     6f2:	93 87       	std	Z+11, r25	; 0x0b
     6f4:	a4 87       	std	Z+12, r26	; 0x0c
     6f6:	b5 87       	std	Z+13, r27	; 0x0d
          if (rx_byte >= COMMS_START_BYTE_BASE)
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	80 3c       	cpi	r24, 0xC0	; 192
     6fc:	48 f0       	brcs	.+18     	; 0x710 <__stack+0x211>
          {
            cs->start_byte = rx_byte;
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	ea 81       	ldd	r30, Y+2	; 0x02
     702:	fb 81       	ldd	r31, Y+3	; 0x03
     704:	82 8b       	std	Z+18, r24	; 0x12
            cs->scan_state = 1;
     706:	ea 81       	ldd	r30, Y+2	; 0x02
     708:	fb 81       	ldd	r31, Y+3	; 0x03
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	86 8b       	std	Z+22, r24	; 0x16
     70e:	1a c2       	rjmp	.+1076   	; 0xb44 <__stack+0x645>
          }
          else
            cs->scan_state = 0;
     710:	ea 81       	ldd	r30, Y+2	; 0x02
     712:	fb 81       	ldd	r31, Y+3	; 0x03
     714:	16 8a       	std	Z+22, r1	; 0x16
     716:	16 c2       	rjmp	.+1068   	; 0xb44 <__stack+0x645>
        }
      }
      else
      {
        if (cs->start_byte & COMMS_START_PAYLOAD_FIRST_BYTE_MSB_HIGH)
     718:	ea 81       	ldd	r30, Y+2	; 0x02
     71a:	fb 81       	ldd	r31, Y+3	; 0x03
     71c:	82 89       	ldd	r24, Z+18	; 0x12
     71e:	88 2f       	mov	r24, r24
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	82 70       	andi	r24, 0x02	; 2
     724:	90 70       	andi	r25, 0x00	; 0
     726:	00 97       	sbiw	r24, 0x00	; 0
     728:	49 f0       	breq	.+18     	; 0x73c <__stack+0x23d>
          cs->command_bytes[0] = rx_byte | 0x80;
     72a:	ea 81       	ldd	r30, Y+2	; 0x02
     72c:	fb 81       	ldd	r31, Y+3	; 0x03
     72e:	00 88       	ldd	r0, Z+16	; 0x10
     730:	f1 89       	ldd	r31, Z+17	; 0x11
     732:	e0 2d       	mov	r30, r0
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	80 68       	ori	r24, 0x80	; 128
     738:	80 83       	st	Z, r24
     73a:	07 c0       	rjmp	.+14     	; 0x74a <__stack+0x24b>
        else
          cs->command_bytes[0] = rx_byte;
     73c:	ea 81       	ldd	r30, Y+2	; 0x02
     73e:	fb 81       	ldd	r31, Y+3	; 0x03
     740:	00 88       	ldd	r0, Z+16	; 0x10
     742:	f1 89       	ldd	r31, Z+17	; 0x11
     744:	e0 2d       	mov	r30, r0
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	80 83       	st	Z, r24

        cs->command_bytes_available = 1;
     74a:	ea 81       	ldd	r30, Y+2	; 0x02
     74c:	fb 81       	ldd	r31, Y+3	; 0x03
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	84 8b       	std	Z+20, r24	; 0x14
        cs->scan_bytecheck = 1;
     752:	ea 81       	ldd	r30, Y+2	; 0x02
     754:	fb 81       	ldd	r31, Y+3	; 0x03
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	87 8b       	std	Z+23, r24	; 0x17
        cs->last_pre_dle = 0; // flag for whether a START byte was received prior to a DLE in the payload (it is assumed no START byte is 0)
     75a:	ea 81       	ldd	r30, Y+2	; 0x02
     75c:	fb 81       	ldd	r31, Y+3	; 0x03
     75e:	15 8a       	std	Z+21, r1	; 0x15
        cs->scan_state = 5;
     760:	ea 81       	ldd	r30, Y+2	; 0x02
     762:	fb 81       	ldd	r31, Y+3	; 0x03
     764:	85 e0       	ldi	r24, 0x05	; 5
     766:	86 8b       	std	Z+22, r24	; 0x16
     768:	ed c1       	rjmp	.+986    	; 0xb44 <__stack+0x645>
      }
      break;

    case 5:
      // beyond first byte of payload, previous byte was not DLE
      if (rx_byte == COMMS_DLE_BYTE)
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	8d 3b       	cpi	r24, 0xBD	; 189
     76e:	29 f4       	brne	.+10     	; 0x77a <__stack+0x27b>
        cs->scan_state = 6; // "destuff" DLE byte
     770:	ea 81       	ldd	r30, Y+2	; 0x02
     772:	fb 81       	ldd	r31, Y+3	; 0x03
     774:	86 e0       	ldi	r24, 0x06	; 6
     776:	86 8b       	std	Z+22, r24	; 0x16
     778:	e5 c1       	rjmp	.+970    	; 0xb44 <__stack+0x645>
      else if (cs->command_bytes_available >= cs->command_bytes_max_length)
     77a:	ea 81       	ldd	r30, Y+2	; 0x02
     77c:	fb 81       	ldd	r31, Y+3	; 0x03
     77e:	94 89       	ldd	r25, Z+20	; 0x14
     780:	ea 81       	ldd	r30, Y+2	; 0x02
     782:	fb 81       	ldd	r31, Y+3	; 0x03
     784:	83 89       	ldd	r24, Z+19	; 0x13
     786:	98 17       	cp	r25, r24
     788:	98 f0       	brcs	.+38     	; 0x7b0 <__stack+0x2b1>
      {
        // payload has overflowed payload buffer, abort packet
        cs->rx_packet_errors++;
     78a:	ea 81       	ldd	r30, Y+2	; 0x02
     78c:	fb 81       	ldd	r31, Y+3	; 0x03
     78e:	82 85       	ldd	r24, Z+10	; 0x0a
     790:	93 85       	ldd	r25, Z+11	; 0x0b
     792:	a4 85       	ldd	r26, Z+12	; 0x0c
     794:	b5 85       	ldd	r27, Z+13	; 0x0d
     796:	01 96       	adiw	r24, 0x01	; 1
     798:	a1 1d       	adc	r26, r1
     79a:	b1 1d       	adc	r27, r1
     79c:	ea 81       	ldd	r30, Y+2	; 0x02
     79e:	fb 81       	ldd	r31, Y+3	; 0x03
     7a0:	82 87       	std	Z+10, r24	; 0x0a
     7a2:	93 87       	std	Z+11, r25	; 0x0b
     7a4:	a4 87       	std	Z+12, r26	; 0x0c
     7a6:	b5 87       	std	Z+13, r27	; 0x0d
        cs->scan_state = 0;
     7a8:	ea 81       	ldd	r30, Y+2	; 0x02
     7aa:	fb 81       	ldd	r31, Y+3	; 0x03
     7ac:	16 8a       	std	Z+22, r1	; 0x16
     7ae:	ca c1       	rjmp	.+916    	; 0xb44 <__stack+0x645>
      }
      else
      {
        // add byte to payload buffer
        cs->command_bytes[cs->command_bytes_available++] = rx_byte;
     7b0:	ea 81       	ldd	r30, Y+2	; 0x02
     7b2:	fb 81       	ldd	r31, Y+3	; 0x03
     7b4:	20 89       	ldd	r18, Z+16	; 0x10
     7b6:	31 89       	ldd	r19, Z+17	; 0x11
     7b8:	ea 81       	ldd	r30, Y+2	; 0x02
     7ba:	fb 81       	ldd	r31, Y+3	; 0x03
     7bc:	44 89       	ldd	r20, Z+20	; 0x14
     7be:	84 2f       	mov	r24, r20
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	f9 01       	movw	r30, r18
     7c4:	e8 0f       	add	r30, r24
     7c6:	f9 1f       	adc	r31, r25
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	80 83       	st	Z, r24
     7cc:	84 2f       	mov	r24, r20
     7ce:	8f 5f       	subi	r24, 0xFF	; 255
     7d0:	ea 81       	ldd	r30, Y+2	; 0x02
     7d2:	fb 81       	ldd	r31, Y+3	; 0x03
     7d4:	84 8b       	std	Z+20, r24	; 0x14
        cs->last_pre_dle = rx_byte; // set to detect START DLE sequence in scan_state 5
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	ea 81       	ldd	r30, Y+2	; 0x02
     7da:	fb 81       	ldd	r31, Y+3	; 0x03
     7dc:	85 8b       	std	Z+21, r24	; 0x15

        if (cs->scan_bytecheck >= 127)
     7de:	ea 81       	ldd	r30, Y+2	; 0x02
     7e0:	fb 81       	ldd	r31, Y+3	; 0x03
     7e2:	87 89       	ldd	r24, Z+23	; 0x17
     7e4:	8f 37       	cpi	r24, 0x7F	; 127
     7e6:	20 f0       	brcs	.+8      	; 0x7f0 <__stack+0x2f1>
          cs->scan_bytecheck = 0; // bytecheck cannot be > 127, reset counter
     7e8:	ea 81       	ldd	r30, Y+2	; 0x02
     7ea:	fb 81       	ldd	r31, Y+3	; 0x03
     7ec:	17 8a       	std	Z+23, r1	; 0x17
     7ee:	aa c1       	rjmp	.+852    	; 0xb44 <__stack+0x645>
        else
          cs->scan_bytecheck++;
     7f0:	ea 81       	ldd	r30, Y+2	; 0x02
     7f2:	fb 81       	ldd	r31, Y+3	; 0x03
     7f4:	87 89       	ldd	r24, Z+23	; 0x17
     7f6:	8f 5f       	subi	r24, 0xFF	; 255
     7f8:	ea 81       	ldd	r30, Y+2	; 0x02
     7fa:	fb 81       	ldd	r31, Y+3	; 0x03
     7fc:	87 8b       	std	Z+23, r24	; 0x17
     7fe:	a2 c1       	rjmp	.+836    	; 0xb44 <__stack+0x645>
      }
      break;

    case 6:
      // beyond first byte of payload, previous byte was DLE
      if (rx_byte == COMMS_DLE_BYTE)
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	8d 3b       	cpi	r24, 0xBD	; 189
     804:	09 f0       	breq	.+2      	; 0x808 <__stack+0x309>
     806:	46 c0       	rjmp	.+140    	; 0x894 <__stack+0x395>
      {
        if (cs->command_bytes_available >= cs->command_bytes_max_length)
     808:	ea 81       	ldd	r30, Y+2	; 0x02
     80a:	fb 81       	ldd	r31, Y+3	; 0x03
     80c:	94 89       	ldd	r25, Z+20	; 0x14
     80e:	ea 81       	ldd	r30, Y+2	; 0x02
     810:	fb 81       	ldd	r31, Y+3	; 0x03
     812:	83 89       	ldd	r24, Z+19	; 0x13
     814:	98 17       	cp	r25, r24
     816:	98 f0       	brcs	.+38     	; 0x83e <__stack+0x33f>
        {
          // payload has overflowed payload buffer, abort packet
          cs->rx_packet_errors++;
     818:	ea 81       	ldd	r30, Y+2	; 0x02
     81a:	fb 81       	ldd	r31, Y+3	; 0x03
     81c:	82 85       	ldd	r24, Z+10	; 0x0a
     81e:	93 85       	ldd	r25, Z+11	; 0x0b
     820:	a4 85       	ldd	r26, Z+12	; 0x0c
     822:	b5 85       	ldd	r27, Z+13	; 0x0d
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	a1 1d       	adc	r26, r1
     828:	b1 1d       	adc	r27, r1
     82a:	ea 81       	ldd	r30, Y+2	; 0x02
     82c:	fb 81       	ldd	r31, Y+3	; 0x03
     82e:	82 87       	std	Z+10, r24	; 0x0a
     830:	93 87       	std	Z+11, r25	; 0x0b
     832:	a4 87       	std	Z+12, r26	; 0x0c
     834:	b5 87       	std	Z+13, r27	; 0x0d
          cs->scan_state = 0;
     836:	ea 81       	ldd	r30, Y+2	; 0x02
     838:	fb 81       	ldd	r31, Y+3	; 0x03
     83a:	16 8a       	std	Z+22, r1	; 0x16
     83c:	83 c1       	rjmp	.+774    	; 0xb44 <__stack+0x645>
        }
        else
        {
          // add byte to payload buffer
          cs->command_bytes[cs->command_bytes_available++] = rx_byte;
     83e:	ea 81       	ldd	r30, Y+2	; 0x02
     840:	fb 81       	ldd	r31, Y+3	; 0x03
     842:	20 89       	ldd	r18, Z+16	; 0x10
     844:	31 89       	ldd	r19, Z+17	; 0x11
     846:	ea 81       	ldd	r30, Y+2	; 0x02
     848:	fb 81       	ldd	r31, Y+3	; 0x03
     84a:	44 89       	ldd	r20, Z+20	; 0x14
     84c:	84 2f       	mov	r24, r20
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	f9 01       	movw	r30, r18
     852:	e8 0f       	add	r30, r24
     854:	f9 1f       	adc	r31, r25
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	80 83       	st	Z, r24
     85a:	84 2f       	mov	r24, r20
     85c:	8f 5f       	subi	r24, 0xFF	; 255
     85e:	ea 81       	ldd	r30, Y+2	; 0x02
     860:	fb 81       	ldd	r31, Y+3	; 0x03
     862:	84 8b       	std	Z+20, r24	; 0x14
            cs->last_pre_dle = 0; // no START byte was received prior to this DLE
     864:	ea 81       	ldd	r30, Y+2	; 0x02
     866:	fb 81       	ldd	r31, Y+3	; 0x03
     868:	15 8a       	std	Z+21, r1	; 0x15

          if (cs->scan_bytecheck >= 127)
     86a:	ea 81       	ldd	r30, Y+2	; 0x02
     86c:	fb 81       	ldd	r31, Y+3	; 0x03
     86e:	87 89       	ldd	r24, Z+23	; 0x17
     870:	8f 37       	cpi	r24, 0x7F	; 127
     872:	20 f0       	brcs	.+8      	; 0x87c <__stack+0x37d>
            cs->scan_bytecheck = 0; // bytecheck cannot be > 127, reset counter
     874:	ea 81       	ldd	r30, Y+2	; 0x02
     876:	fb 81       	ldd	r31, Y+3	; 0x03
     878:	17 8a       	std	Z+23, r1	; 0x17
     87a:	07 c0       	rjmp	.+14     	; 0x88a <__stack+0x38b>
          else
            cs->scan_bytecheck++;
     87c:	ea 81       	ldd	r30, Y+2	; 0x02
     87e:	fb 81       	ldd	r31, Y+3	; 0x03
     880:	87 89       	ldd	r24, Z+23	; 0x17
     882:	8f 5f       	subi	r24, 0xFF	; 255
     884:	ea 81       	ldd	r30, Y+2	; 0x02
     886:	fb 81       	ldd	r31, Y+3	; 0x03
     888:	87 8b       	std	Z+23, r24	; 0x17

          cs->scan_state = 5;
     88a:	ea 81       	ldd	r30, Y+2	; 0x02
     88c:	fb 81       	ldd	r31, Y+3	; 0x03
     88e:	85 e0       	ldi	r24, 0x05	; 5
     890:	86 8b       	std	Z+22, r24	; 0x16
     892:	58 c1       	rjmp	.+688    	; 0xb44 <__stack+0x645>
        }
      }
      else if (rx_byte == COMMS_ETX_BYTE)
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	8e 3b       	cpi	r24, 0xBE	; 190
     898:	29 f4       	brne	.+10     	; 0x8a4 <__stack+0x3a5>
        cs->scan_state = 8;
     89a:	ea 81       	ldd	r30, Y+2	; 0x02
     89c:	fb 81       	ldd	r31, Y+3	; 0x03
     89e:	88 e0       	ldi	r24, 0x08	; 8
     8a0:	86 8b       	std	Z+22, r24	; 0x16
     8a2:	50 c1       	rjmp	.+672    	; 0xb44 <__stack+0x645>
      else
      {
        cs->rx_packet_errors++; // assume last packet was incomplete and increment error count
     8a4:	ea 81       	ldd	r30, Y+2	; 0x02
     8a6:	fb 81       	ldd	r31, Y+3	; 0x03
     8a8:	82 85       	ldd	r24, Z+10	; 0x0a
     8aa:	93 85       	ldd	r25, Z+11	; 0x0b
     8ac:	a4 85       	ldd	r26, Z+12	; 0x0c
     8ae:	b5 85       	ldd	r27, Z+13	; 0x0d
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	a1 1d       	adc	r26, r1
     8b4:	b1 1d       	adc	r27, r1
     8b6:	ea 81       	ldd	r30, Y+2	; 0x02
     8b8:	fb 81       	ldd	r31, Y+3	; 0x03
     8ba:	82 87       	std	Z+10, r24	; 0x0a
     8bc:	93 87       	std	Z+11, r25	; 0x0b
     8be:	a4 87       	std	Z+12, r26	; 0x0c
     8c0:	b5 87       	std	Z+13, r27	; 0x0d
        if (rx_byte >= COMMS_START_BYTE_BASE)
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
     8c4:	80 3c       	cpi	r24, 0xC0	; 192
     8c6:	48 f0       	brcs	.+18     	; 0x8da <__stack+0x3db>
        {
          cs->start_byte = rx_byte;
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	ea 81       	ldd	r30, Y+2	; 0x02
     8cc:	fb 81       	ldd	r31, Y+3	; 0x03
     8ce:	82 8b       	std	Z+18, r24	; 0x12
          cs->scan_state = 1;
     8d0:	ea 81       	ldd	r30, Y+2	; 0x02
     8d2:	fb 81       	ldd	r31, Y+3	; 0x03
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	86 8b       	std	Z+22, r24	; 0x16
     8d8:	35 c1       	rjmp	.+618    	; 0xb44 <__stack+0x645>
        }
        else if (cs->last_pre_dle >= COMMS_START_BYTE_BASE)
     8da:	ea 81       	ldd	r30, Y+2	; 0x02
     8dc:	fb 81       	ldd	r31, Y+3	; 0x03
     8de:	85 89       	ldd	r24, Z+21	; 0x15
     8e0:	80 3c       	cpi	r24, 0xC0	; 192
     8e2:	08 f4       	brcc	.+2      	; 0x8e6 <__stack+0x3e7>
     8e4:	bd c0       	rjmp	.+378    	; 0xa60 <__stack+0x561>
        {
          // assume have actually found the START DLE of a new packet, and rx_byte is the next byte
          cs->start_byte = cs->last_pre_dle;
     8e6:	ea 81       	ldd	r30, Y+2	; 0x02
     8e8:	fb 81       	ldd	r31, Y+3	; 0x03
     8ea:	85 89       	ldd	r24, Z+21	; 0x15
     8ec:	ea 81       	ldd	r30, Y+2	; 0x02
     8ee:	fb 81       	ldd	r31, Y+3	; 0x03
     8f0:	82 8b       	std	Z+18, r24	; 0x12
          cs->is_single_class = (cs->start_byte & COMMS_START_SINGLE_CLASS) ? TRUE : FALSE;
     8f2:	ea 81       	ldd	r30, Y+2	; 0x02
     8f4:	fb 81       	ldd	r31, Y+3	; 0x03
     8f6:	82 89       	ldd	r24, Z+18	; 0x12
     8f8:	88 2f       	mov	r24, r24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	81 70       	andi	r24, 0x01	; 1
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	88 23       	and	r24, r24
     902:	19 f0       	breq	.+6      	; 0x90a <__stack+0x40b>
     904:	31 e0       	ldi	r19, 0x01	; 1
     906:	3d 83       	std	Y+5, r19	; 0x05
     908:	01 c0       	rjmp	.+2      	; 0x90c <__stack+0x40d>
     90a:	1d 82       	std	Y+5, r1	; 0x05
     90c:	ea 81       	ldd	r30, Y+2	; 0x02
     90e:	fb 81       	ldd	r31, Y+3	; 0x03
     910:	8d 81       	ldd	r24, Y+5	; 0x05
     912:	87 87       	std	Z+15, r24	; 0x0f
          if (cs->start_byte & COMMS_START_HAS_ADDRESS)
     914:	ea 81       	ldd	r30, Y+2	; 0x02
     916:	fb 81       	ldd	r31, Y+3	; 0x03
     918:	82 89       	ldd	r24, Z+18	; 0x12
     91a:	88 2f       	mov	r24, r24
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	8c 70       	andi	r24, 0x0C	; 12
     920:	90 70       	andi	r25, 0x00	; 0
     922:	00 97       	sbiw	r24, 0x00	; 0
     924:	09 f4       	brne	.+2      	; 0x928 <__stack+0x429>
     926:	41 c0       	rjmp	.+130    	; 0x9aa <__stack+0x4ab>
          {
            // do scan_state 2 work

            // expect source or destination address
            if (rx_byte & 0x80)
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	88 23       	and	r24, r24
     92c:	fc f4       	brge	.+62     	; 0x96c <__stack+0x46d>
            {
              // invalid address
              cs->rx_packet_errors++;
     92e:	ea 81       	ldd	r30, Y+2	; 0x02
     930:	fb 81       	ldd	r31, Y+3	; 0x03
     932:	82 85       	ldd	r24, Z+10	; 0x0a
     934:	93 85       	ldd	r25, Z+11	; 0x0b
     936:	a4 85       	ldd	r26, Z+12	; 0x0c
     938:	b5 85       	ldd	r27, Z+13	; 0x0d
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	a1 1d       	adc	r26, r1
     93e:	b1 1d       	adc	r27, r1
     940:	ea 81       	ldd	r30, Y+2	; 0x02
     942:	fb 81       	ldd	r31, Y+3	; 0x03
     944:	82 87       	std	Z+10, r24	; 0x0a
     946:	93 87       	std	Z+11, r25	; 0x0b
     948:	a4 87       	std	Z+12, r26	; 0x0c
     94a:	b5 87       	std	Z+13, r27	; 0x0d
              if (rx_byte >= COMMS_START_BYTE_BASE)
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	80 3c       	cpi	r24, 0xC0	; 192
     950:	48 f0       	brcs	.+18     	; 0x964 <__stack+0x465>
              {
                cs->start_byte = rx_byte;
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	ea 81       	ldd	r30, Y+2	; 0x02
     956:	fb 81       	ldd	r31, Y+3	; 0x03
     958:	82 8b       	std	Z+18, r24	; 0x12
                cs->scan_state = 1;
     95a:	ea 81       	ldd	r30, Y+2	; 0x02
     95c:	fb 81       	ldd	r31, Y+3	; 0x03
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	86 8b       	std	Z+22, r24	; 0x16
     962:	f0 c0       	rjmp	.+480    	; 0xb44 <__stack+0x645>
              }
              else
                cs->scan_state = 0;
     964:	ea 81       	ldd	r30, Y+2	; 0x02
     966:	fb 81       	ldd	r31, Y+3	; 0x03
     968:	16 8a       	std	Z+22, r1	; 0x16
     96a:	ec c0       	rjmp	.+472    	; 0xb44 <__stack+0x645>
            }
            else if (cs->start_byte & COMMS_START_HAS_SOURCE_ADDRESS)
     96c:	ea 81       	ldd	r30, Y+2	; 0x02
     96e:	fb 81       	ldd	r31, Y+3	; 0x03
     970:	82 89       	ldd	r24, Z+18	; 0x12
     972:	88 2f       	mov	r24, r24
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	88 70       	andi	r24, 0x08	; 8
     978:	90 70       	andi	r25, 0x00	; 0
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	49 f0       	breq	.+18     	; 0x990 <__stack+0x491>
            {
              cs->source_address = rx_byte;
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	ea 81       	ldd	r30, Y+2	; 0x02
     982:	fb 81       	ldd	r31, Y+3	; 0x03
     984:	80 8f       	std	Z+24, r24	; 0x18
              cs->scan_state = 3;
     986:	ea 81       	ldd	r30, Y+2	; 0x02
     988:	fb 81       	ldd	r31, Y+3	; 0x03
     98a:	83 e0       	ldi	r24, 0x03	; 3
     98c:	86 8b       	std	Z+22, r24	; 0x16
     98e:	da c0       	rjmp	.+436    	; 0xb44 <__stack+0x645>
            }
            else
            {
              cs->source_address = 255;
     990:	ea 81       	ldd	r30, Y+2	; 0x02
     992:	fb 81       	ldd	r31, Y+3	; 0x03
     994:	8f ef       	ldi	r24, 0xFF	; 255
     996:	80 8f       	std	Z+24, r24	; 0x18
              cs->destination_address = rx_byte;
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	ea 81       	ldd	r30, Y+2	; 0x02
     99c:	fb 81       	ldd	r31, Y+3	; 0x03
     99e:	81 8f       	std	Z+25, r24	; 0x19
              cs->scan_state = 4;
     9a0:	ea 81       	ldd	r30, Y+2	; 0x02
     9a2:	fb 81       	ldd	r31, Y+3	; 0x03
     9a4:	84 e0       	ldi	r24, 0x04	; 4
     9a6:	86 8b       	std	Z+22, r24	; 0x16
     9a8:	cd c0       	rjmp	.+410    	; 0xb44 <__stack+0x645>
            }
          }
          else
          {
            cs->source_address = 255;
     9aa:	ea 81       	ldd	r30, Y+2	; 0x02
     9ac:	fb 81       	ldd	r31, Y+3	; 0x03
     9ae:	8f ef       	ldi	r24, 0xFF	; 255
     9b0:	80 8f       	std	Z+24, r24	; 0x18
            cs->destination_address = 255;
     9b2:	ea 81       	ldd	r30, Y+2	; 0x02
     9b4:	fb 81       	ldd	r31, Y+3	; 0x03
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	81 8f       	std	Z+25, r24	; 0x19
            // do scan_state 4 work

            // expect first byte of payload, or DLE for zero-length payload
            if (rx_byte & 0x80)
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	88 23       	and	r24, r24
     9be:	3c f5       	brge	.+78     	; 0xa0e <__stack+0x50f>
            {
              if (rx_byte == COMMS_DLE_BYTE)
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	8d 3b       	cpi	r24, 0xBD	; 189
     9c4:	29 f4       	brne	.+10     	; 0x9d0 <__stack+0x4d1>
                cs->scan_state = 7;
     9c6:	ea 81       	ldd	r30, Y+2	; 0x02
     9c8:	fb 81       	ldd	r31, Y+3	; 0x03
     9ca:	87 e0       	ldi	r24, 0x07	; 7
     9cc:	86 8b       	std	Z+22, r24	; 0x16
     9ce:	ba c0       	rjmp	.+372    	; 0xb44 <__stack+0x645>
              else
              {
                cs->rx_packet_errors++;
     9d0:	ea 81       	ldd	r30, Y+2	; 0x02
     9d2:	fb 81       	ldd	r31, Y+3	; 0x03
     9d4:	82 85       	ldd	r24, Z+10	; 0x0a
     9d6:	93 85       	ldd	r25, Z+11	; 0x0b
     9d8:	a4 85       	ldd	r26, Z+12	; 0x0c
     9da:	b5 85       	ldd	r27, Z+13	; 0x0d
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	a1 1d       	adc	r26, r1
     9e0:	b1 1d       	adc	r27, r1
     9e2:	ea 81       	ldd	r30, Y+2	; 0x02
     9e4:	fb 81       	ldd	r31, Y+3	; 0x03
     9e6:	82 87       	std	Z+10, r24	; 0x0a
     9e8:	93 87       	std	Z+11, r25	; 0x0b
     9ea:	a4 87       	std	Z+12, r26	; 0x0c
     9ec:	b5 87       	std	Z+13, r27	; 0x0d
                if (rx_byte >= COMMS_START_BYTE_BASE)
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	80 3c       	cpi	r24, 0xC0	; 192
     9f2:	48 f0       	brcs	.+18     	; 0xa06 <__stack+0x507>
                {
                  cs->start_byte = rx_byte;
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	ea 81       	ldd	r30, Y+2	; 0x02
     9f8:	fb 81       	ldd	r31, Y+3	; 0x03
     9fa:	82 8b       	std	Z+18, r24	; 0x12
                  cs->scan_state = 1;
     9fc:	ea 81       	ldd	r30, Y+2	; 0x02
     9fe:	fb 81       	ldd	r31, Y+3	; 0x03
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	86 8b       	std	Z+22, r24	; 0x16
     a04:	9f c0       	rjmp	.+318    	; 0xb44 <__stack+0x645>
                }
                else
                  cs->scan_state = 0;
     a06:	ea 81       	ldd	r30, Y+2	; 0x02
     a08:	fb 81       	ldd	r31, Y+3	; 0x03
     a0a:	16 8a       	std	Z+22, r1	; 0x16
     a0c:	9b c0       	rjmp	.+310    	; 0xb44 <__stack+0x645>
              }
            }
            else
            {
              if (cs->start_byte & COMMS_START_PAYLOAD_FIRST_BYTE_MSB_HIGH)
     a0e:	ea 81       	ldd	r30, Y+2	; 0x02
     a10:	fb 81       	ldd	r31, Y+3	; 0x03
     a12:	82 89       	ldd	r24, Z+18	; 0x12
     a14:	88 2f       	mov	r24, r24
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 70       	andi	r24, 0x02	; 2
     a1a:	90 70       	andi	r25, 0x00	; 0
     a1c:	00 97       	sbiw	r24, 0x00	; 0
     a1e:	49 f0       	breq	.+18     	; 0xa32 <__stack+0x533>
                cs->command_bytes[0] = rx_byte | 0x80;
     a20:	ea 81       	ldd	r30, Y+2	; 0x02
     a22:	fb 81       	ldd	r31, Y+3	; 0x03
     a24:	00 88       	ldd	r0, Z+16	; 0x10
     a26:	f1 89       	ldd	r31, Z+17	; 0x11
     a28:	e0 2d       	mov	r30, r0
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	80 68       	ori	r24, 0x80	; 128
     a2e:	80 83       	st	Z, r24
     a30:	07 c0       	rjmp	.+14     	; 0xa40 <__stack+0x541>
              else
                cs->command_bytes[0] = rx_byte;
     a32:	ea 81       	ldd	r30, Y+2	; 0x02
     a34:	fb 81       	ldd	r31, Y+3	; 0x03
     a36:	00 88       	ldd	r0, Z+16	; 0x10
     a38:	f1 89       	ldd	r31, Z+17	; 0x11
     a3a:	e0 2d       	mov	r30, r0
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	80 83       	st	Z, r24
      
              cs->command_bytes_available = 1;
     a40:	ea 81       	ldd	r30, Y+2	; 0x02
     a42:	fb 81       	ldd	r31, Y+3	; 0x03
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	84 8b       	std	Z+20, r24	; 0x14
              cs->scan_bytecheck = 1;
     a48:	ea 81       	ldd	r30, Y+2	; 0x02
     a4a:	fb 81       	ldd	r31, Y+3	; 0x03
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	87 8b       	std	Z+23, r24	; 0x17
              cs->last_pre_dle = 0; // flag for whether a START byte was received prior to a DLE in the payload (it is assumed no START byte is 0)
     a50:	ea 81       	ldd	r30, Y+2	; 0x02
     a52:	fb 81       	ldd	r31, Y+3	; 0x03
     a54:	15 8a       	std	Z+21, r1	; 0x15
              cs->scan_state = 5;
     a56:	ea 81       	ldd	r30, Y+2	; 0x02
     a58:	fb 81       	ldd	r31, Y+3	; 0x03
     a5a:	85 e0       	ldi	r24, 0x05	; 5
     a5c:	86 8b       	std	Z+22, r24	; 0x16
     a5e:	72 c0       	rjmp	.+228    	; 0xb44 <__stack+0x645>
            }
          }
        }
        else
          cs->scan_state = 0;
     a60:	ea 81       	ldd	r30, Y+2	; 0x02
     a62:	fb 81       	ldd	r31, Y+3	; 0x03
     a64:	16 8a       	std	Z+22, r1	; 0x16
     a66:	6e c0       	rjmp	.+220    	; 0xb44 <__stack+0x645>
      }
      break;

    case 7:
      // first byte of payload was DLE
      if (rx_byte == COMMS_ETX_BYTE)
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	8e 3b       	cpi	r24, 0xBE	; 190
     a6c:	59 f4       	brne	.+22     	; 0xa84 <__stack+0x585>
      {
        cs->command_bytes_available = 0;
     a6e:	ea 81       	ldd	r30, Y+2	; 0x02
     a70:	fb 81       	ldd	r31, Y+3	; 0x03
     a72:	14 8a       	std	Z+20, r1	; 0x14
        cs->scan_bytecheck = 0;
     a74:	ea 81       	ldd	r30, Y+2	; 0x02
     a76:	fb 81       	ldd	r31, Y+3	; 0x03
     a78:	17 8a       	std	Z+23, r1	; 0x17
        cs->scan_state = 8;
     a7a:	ea 81       	ldd	r30, Y+2	; 0x02
     a7c:	fb 81       	ldd	r31, Y+3	; 0x03
     a7e:	88 e0       	ldi	r24, 0x08	; 8
     a80:	86 8b       	std	Z+22, r24	; 0x16
     a82:	60 c0       	rjmp	.+192    	; 0xb44 <__stack+0x645>
      }
      else
      {
        cs->rx_packet_errors++;
     a84:	ea 81       	ldd	r30, Y+2	; 0x02
     a86:	fb 81       	ldd	r31, Y+3	; 0x03
     a88:	82 85       	ldd	r24, Z+10	; 0x0a
     a8a:	93 85       	ldd	r25, Z+11	; 0x0b
     a8c:	a4 85       	ldd	r26, Z+12	; 0x0c
     a8e:	b5 85       	ldd	r27, Z+13	; 0x0d
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	a1 1d       	adc	r26, r1
     a94:	b1 1d       	adc	r27, r1
     a96:	ea 81       	ldd	r30, Y+2	; 0x02
     a98:	fb 81       	ldd	r31, Y+3	; 0x03
     a9a:	82 87       	std	Z+10, r24	; 0x0a
     a9c:	93 87       	std	Z+11, r25	; 0x0b
     a9e:	a4 87       	std	Z+12, r26	; 0x0c
     aa0:	b5 87       	std	Z+13, r27	; 0x0d
        if (rx_byte >= COMMS_START_BYTE_BASE)
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	80 3c       	cpi	r24, 0xC0	; 192
     aa6:	48 f0       	brcs	.+18     	; 0xaba <__stack+0x5bb>
        {
          cs->start_byte = rx_byte;
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	ea 81       	ldd	r30, Y+2	; 0x02
     aac:	fb 81       	ldd	r31, Y+3	; 0x03
     aae:	82 8b       	std	Z+18, r24	; 0x12
          cs->scan_state = 1;
     ab0:	ea 81       	ldd	r30, Y+2	; 0x02
     ab2:	fb 81       	ldd	r31, Y+3	; 0x03
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	86 8b       	std	Z+22, r24	; 0x16
     ab8:	45 c0       	rjmp	.+138    	; 0xb44 <__stack+0x645>
        }
        else
          cs->scan_state = 0;
     aba:	ea 81       	ldd	r30, Y+2	; 0x02
     abc:	fb 81       	ldd	r31, Y+3	; 0x03
     abe:	16 8a       	std	Z+22, r1	; 0x16
     ac0:	41 c0       	rjmp	.+130    	; 0xb44 <__stack+0x645>
      }
      break;

    case 8:
      // expect bytecheck byte
      if (rx_byte > 127)
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
     ac4:	88 23       	and	r24, r24
     ac6:	fc f4       	brge	.+62     	; 0xb06 <__stack+0x607>
      {
        cs->rx_packet_errors++;
     ac8:	ea 81       	ldd	r30, Y+2	; 0x02
     aca:	fb 81       	ldd	r31, Y+3	; 0x03
     acc:	82 85       	ldd	r24, Z+10	; 0x0a
     ace:	93 85       	ldd	r25, Z+11	; 0x0b
     ad0:	a4 85       	ldd	r26, Z+12	; 0x0c
     ad2:	b5 85       	ldd	r27, Z+13	; 0x0d
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	a1 1d       	adc	r26, r1
     ad8:	b1 1d       	adc	r27, r1
     ada:	ea 81       	ldd	r30, Y+2	; 0x02
     adc:	fb 81       	ldd	r31, Y+3	; 0x03
     ade:	82 87       	std	Z+10, r24	; 0x0a
     ae0:	93 87       	std	Z+11, r25	; 0x0b
     ae2:	a4 87       	std	Z+12, r26	; 0x0c
     ae4:	b5 87       	std	Z+13, r27	; 0x0d
        if (rx_byte >= COMMS_START_BYTE_BASE)
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	80 3c       	cpi	r24, 0xC0	; 192
     aea:	48 f0       	brcs	.+18     	; 0xafe <__stack+0x5ff>
        {
          cs->start_byte = rx_byte;
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	ea 81       	ldd	r30, Y+2	; 0x02
     af0:	fb 81       	ldd	r31, Y+3	; 0x03
     af2:	82 8b       	std	Z+18, r24	; 0x12
          cs->scan_state = 1;
     af4:	ea 81       	ldd	r30, Y+2	; 0x02
     af6:	fb 81       	ldd	r31, Y+3	; 0x03
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	86 8b       	std	Z+22, r24	; 0x16
     afc:	23 c0       	rjmp	.+70     	; 0xb44 <__stack+0x645>
        }
        else
          cs->scan_state = 0;
     afe:	ea 81       	ldd	r30, Y+2	; 0x02
     b00:	fb 81       	ldd	r31, Y+3	; 0x03
     b02:	16 8a       	std	Z+22, r1	; 0x16
     b04:	1f c0       	rjmp	.+62     	; 0xb44 <__stack+0x645>
      }
      else if (rx_byte != cs->scan_bytecheck)
     b06:	ea 81       	ldd	r30, Y+2	; 0x02
     b08:	fb 81       	ldd	r31, Y+3	; 0x03
     b0a:	97 89       	ldd	r25, Z+23	; 0x17
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	98 17       	cp	r25, r24
     b10:	99 f0       	breq	.+38     	; 0xb38 <__stack+0x639>
      {
        // bytecheck mismatch; some payload bytes have been missed
        cs->rx_packet_errors++;
     b12:	ea 81       	ldd	r30, Y+2	; 0x02
     b14:	fb 81       	ldd	r31, Y+3	; 0x03
     b16:	82 85       	ldd	r24, Z+10	; 0x0a
     b18:	93 85       	ldd	r25, Z+11	; 0x0b
     b1a:	a4 85       	ldd	r26, Z+12	; 0x0c
     b1c:	b5 85       	ldd	r27, Z+13	; 0x0d
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	a1 1d       	adc	r26, r1
     b22:	b1 1d       	adc	r27, r1
     b24:	ea 81       	ldd	r30, Y+2	; 0x02
     b26:	fb 81       	ldd	r31, Y+3	; 0x03
     b28:	82 87       	std	Z+10, r24	; 0x0a
     b2a:	93 87       	std	Z+11, r25	; 0x0b
     b2c:	a4 87       	std	Z+12, r26	; 0x0c
     b2e:	b5 87       	std	Z+13, r27	; 0x0d
        cs->scan_state = 0;
     b30:	ea 81       	ldd	r30, Y+2	; 0x02
     b32:	fb 81       	ldd	r31, Y+3	; 0x03
     b34:	16 8a       	std	Z+22, r1	; 0x16
     b36:	06 c0       	rjmp	.+12     	; 0xb44 <__stack+0x645>
      }
      else
      {
        cs->scan_state = 0; // reset scan_state
     b38:	ea 81       	ldd	r30, Y+2	; 0x02
     b3a:	fb 81       	ldd	r31, Y+3	; 0x03
     b3c:	16 8a       	std	Z+22, r1	; 0x16
        return (TRUE); // flag complete and verified packet has been received
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	9c 83       	std	Y+4, r25	; 0x04
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <__stack+0x647>
      }
      break;

  } // end of scan_state switch

  return (FALSE); // flag no complete packet has been found yet
     b44:	1c 82       	std	Y+4, r1	; 0x04
     b46:	8c 81       	ldd	r24, Y+4	; 0x04
}
     b48:	28 96       	adiw	r28, 0x08	; 8
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	f8 94       	cli
     b4e:	de bf       	out	0x3e, r29	; 62
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	cd bf       	out	0x3d, r28	; 61
     b54:	cf 91       	pop	r28
     b56:	df 91       	pop	r29
     b58:	08 95       	ret

00000b5a <comms_update>:

void comms_update()
{
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
  // check PAYLOAD RX FIFO buffer
  if (payload_stream.rx_fifo.tail != payload_stream.rx_fifo.head)
     b62:	90 91 c8 02 	lds	r25, 0x02C8
     b66:	80 91 c7 02 	lds	r24, 0x02C7
     b6a:	98 17       	cp	r25, r24
     b6c:	79 f0       	breq	.+30     	; 0xb8c <comms_update+0x32>
  {
    if (comms_packet_scan(&payload_stream))
     b6e:	87 ec       	ldi	r24, 0xC7	; 199
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	0e 94 28 02 	call	0x450	; 0x450 <comms_packet_scan>
     b76:	88 23       	and	r24, r24
     b78:	49 f0       	breq	.+18     	; 0xb8c <comms_update+0x32>
      module_packet_scan(payload_stream.command_bytes, payload_stream.command_bytes_available);
     b7a:	80 91 d7 02 	lds	r24, 0x02D7
     b7e:	90 91 d8 02 	lds	r25, 0x02D8
     b82:	20 91 db 02 	lds	r18, 0x02DB
     b86:	62 2f       	mov	r22, r18
     b88:	0e 94 4e 0a 	call	0x149c	; 0x149c <module_packet_scan>
  }

  // no need to check PAYLOAD TX FIFO buffer - it will be done automatically when a TX token is received
}
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <send_set_class_item>:

void send_set_class_item(uint8_t class_id, uint8_t item_id, void *set_data, uint8_t set_data_length)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	00 d0       	rcall	.+0      	; 0xb98 <send_set_class_item+0x6>
     b98:	00 d0       	rcall	.+0      	; 0xb9a <send_set_class_item+0x8>
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <send_set_class_item+0xa>
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	89 83       	std	Y+1, r24	; 0x01
     ba2:	6a 83       	std	Y+2, r22	; 0x02
     ba4:	5c 83       	std	Y+4, r21	; 0x04
     ba6:	4b 83       	std	Y+3, r20	; 0x03
     ba8:	2d 83       	std	Y+5, r18	; 0x05
  temp_payload_buffer[0] = class_id | CLASS_FLAG_IS_SET; // add SET flag
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	80 64       	ori	r24, 0x40	; 64
     bae:	80 93 e2 02 	sts	0x02E2, r24
  temp_payload_buffer[1] = item_id;
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	80 93 e3 02 	sts	0x02E3, r24
  temp_payload_buffer_count = 2;
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	80 93 e1 02 	sts	0x02E1, r24
  temp_payload_void_bytes = set_data;
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	90 93 94 01 	sts	0x0194, r25
     bc6:	80 93 93 01 	sts	0x0193, r24
     bca:	19 c0       	rjmp	.+50     	; 0xbfe <send_set_class_item+0x6c>
  while (set_data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
     bcc:	30 91 e1 02 	lds	r19, 0x02E1
     bd0:	83 2f       	mov	r24, r19
     bd2:	99 27       	eor	r25, r25
     bd4:	87 fd       	sbrc	r24, 7
     bd6:	90 95       	com	r25
     bd8:	a0 91 93 01 	lds	r26, 0x0193
     bdc:	b0 91 94 01 	lds	r27, 0x0194
     be0:	2c 91       	ld	r18, X
     be2:	fc 01       	movw	r30, r24
     be4:	ee 51       	subi	r30, 0x1E	; 30
     be6:	fd 4f       	sbci	r31, 0xFD	; 253
     be8:	20 83       	st	Z, r18
     bea:	83 2f       	mov	r24, r19
     bec:	8f 5f       	subi	r24, 0xFF	; 255
     bee:	80 93 e1 02 	sts	0x02E1, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	90 93 94 01 	sts	0x0194, r25
     bfa:	80 93 93 01 	sts	0x0193, r24
{
  temp_payload_buffer[0] = class_id | CLASS_FLAG_IS_SET; // add SET flag
  temp_payload_buffer[1] = item_id;
  temp_payload_buffer_count = 2;
  temp_payload_void_bytes = set_data;
  while (set_data_length-- > 0)
     bfe:	8d 81       	ldd	r24, Y+5	; 0x05
     c00:	8e 83       	std	Y+6, r24	; 0x06
     c02:	8e 81       	ldd	r24, Y+6	; 0x06
     c04:	88 23       	and	r24, r24
     c06:	11 f0       	breq	.+4      	; 0xc0c <send_set_class_item+0x7a>
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	8e 83       	std	Y+6, r24	; 0x06
     c0c:	8e 81       	ldd	r24, Y+6	; 0x06
     c0e:	9d 81       	ldd	r25, Y+5	; 0x05
     c10:	91 50       	subi	r25, 0x01	; 1
     c12:	9d 83       	std	Y+5, r25	; 0x05
     c14:	88 23       	and	r24, r24
     c16:	d1 f6       	brne	.-76     	; 0xbcc <send_set_class_item+0x3a>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
  send_packet(COMMS_START_BYTE_BASE | COMMS_START_SINGLE_CLASS, temp_payload_buffer, temp_payload_buffer_count);
     c18:	80 91 e1 02 	lds	r24, 0x02E1
     c1c:	98 2f       	mov	r25, r24
     c1e:	22 ee       	ldi	r18, 0xE2	; 226
     c20:	32 e0       	ldi	r19, 0x02	; 2
     c22:	81 ec       	ldi	r24, 0xC1	; 193
     c24:	b9 01       	movw	r22, r18
     c26:	49 2f       	mov	r20, r25
     c28:	0e 94 b1 08 	call	0x1162	; 0x1162 <send_packet>
}
     c2c:	26 96       	adiw	r28, 0x06	; 6
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <send_set_class_indexed_item>:

void send_set_class_indexed_item(uint8_t class_id, uint8_t class_index, uint8_t item_id, void *set_data, uint8_t set_data_length)
{
     c3e:	0f 93       	push	r16
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	27 97       	sbiw	r28, 0x07	; 7
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	6a 83       	std	Y+2, r22	; 0x02
     c58:	4b 83       	std	Y+3, r20	; 0x03
     c5a:	3d 83       	std	Y+5, r19	; 0x05
     c5c:	2c 83       	std	Y+4, r18	; 0x04
     c5e:	0e 83       	std	Y+6, r16	; 0x06
  temp_payload_buffer[0] = class_id | CLASS_FLAG_HAS_INDEX | CLASS_FLAG_IS_SET; // add indexed and SET flag
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	80 6c       	ori	r24, 0xC0	; 192
     c64:	80 93 e2 02 	sts	0x02E2, r24
  temp_payload_buffer[1] = class_index;
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	80 93 e3 02 	sts	0x02E3, r24
  temp_payload_buffer[2] = item_id;
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	80 93 e4 02 	sts	0x02E4, r24
  temp_payload_buffer_count = 3;
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	80 93 e1 02 	sts	0x02E1, r24
  temp_payload_void_bytes = set_data;
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
     c7c:	9d 81       	ldd	r25, Y+5	; 0x05
     c7e:	90 93 94 01 	sts	0x0194, r25
     c82:	80 93 93 01 	sts	0x0193, r24
     c86:	19 c0       	rjmp	.+50     	; 0xcba <send_set_class_indexed_item+0x7c>
  while (set_data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
     c88:	30 91 e1 02 	lds	r19, 0x02E1
     c8c:	83 2f       	mov	r24, r19
     c8e:	99 27       	eor	r25, r25
     c90:	87 fd       	sbrc	r24, 7
     c92:	90 95       	com	r25
     c94:	a0 91 93 01 	lds	r26, 0x0193
     c98:	b0 91 94 01 	lds	r27, 0x0194
     c9c:	2c 91       	ld	r18, X
     c9e:	fc 01       	movw	r30, r24
     ca0:	ee 51       	subi	r30, 0x1E	; 30
     ca2:	fd 4f       	sbci	r31, 0xFD	; 253
     ca4:	20 83       	st	Z, r18
     ca6:	83 2f       	mov	r24, r19
     ca8:	8f 5f       	subi	r24, 0xFF	; 255
     caa:	80 93 e1 02 	sts	0x02E1, r24
     cae:	cd 01       	movw	r24, r26
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	90 93 94 01 	sts	0x0194, r25
     cb6:	80 93 93 01 	sts	0x0193, r24
  temp_payload_buffer[0] = class_id | CLASS_FLAG_HAS_INDEX | CLASS_FLAG_IS_SET; // add indexed and SET flag
  temp_payload_buffer[1] = class_index;
  temp_payload_buffer[2] = item_id;
  temp_payload_buffer_count = 3;
  temp_payload_void_bytes = set_data;
  while (set_data_length-- > 0)
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	8f 83       	std	Y+7, r24	; 0x07
     cbe:	8f 81       	ldd	r24, Y+7	; 0x07
     cc0:	88 23       	and	r24, r24
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <send_set_class_indexed_item+0x8a>
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	8f 83       	std	Y+7, r24	; 0x07
     cc8:	8f 81       	ldd	r24, Y+7	; 0x07
     cca:	9e 81       	ldd	r25, Y+6	; 0x06
     ccc:	91 50       	subi	r25, 0x01	; 1
     cce:	9e 83       	std	Y+6, r25	; 0x06
     cd0:	88 23       	and	r24, r24
     cd2:	d1 f6       	brne	.-76     	; 0xc88 <send_set_class_indexed_item+0x4a>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
  send_packet(COMMS_START_BYTE_BASE | COMMS_START_SINGLE_CLASS, temp_payload_buffer, temp_payload_buffer_count);
     cd4:	80 91 e1 02 	lds	r24, 0x02E1
     cd8:	98 2f       	mov	r25, r24
     cda:	22 ee       	ldi	r18, 0xE2	; 226
     cdc:	32 e0       	ldi	r19, 0x02	; 2
     cde:	81 ec       	ldi	r24, 0xC1	; 193
     ce0:	b9 01       	movw	r22, r18
     ce2:	49 2f       	mov	r20, r25
     ce4:	0e 94 b1 08 	call	0x1162	; 0x1162 <send_packet>
}
     ce8:	27 96       	adiw	r28, 0x07	; 7
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	0f 91       	pop	r16
     cfa:	08 95       	ret

00000cfc <send_set_class_indexed_item_indexed>:

void send_set_class_indexed_item_indexed(uint8_t class_id, uint8_t class_index, uint8_t item_id, uint8_t item_index, void *set_data, uint8_t set_data_length)
{
     cfc:	ef 92       	push	r14
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	28 97       	sbiw	r28, 0x08	; 8
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	89 83       	std	Y+1, r24	; 0x01
     d18:	6a 83       	std	Y+2, r22	; 0x02
     d1a:	4b 83       	std	Y+3, r20	; 0x03
     d1c:	2c 83       	std	Y+4, r18	; 0x04
     d1e:	1e 83       	std	Y+6, r17	; 0x06
     d20:	0d 83       	std	Y+5, r16	; 0x05
     d22:	ef 82       	std	Y+7, r14	; 0x07
  temp_payload_buffer[0] = class_id | CLASS_FLAG_HAS_INDEX | CLASS_FLAG_IS_SET; // add indexed and SET flag
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	80 6c       	ori	r24, 0xC0	; 192
     d28:	80 93 e2 02 	sts	0x02E2, r24
  temp_payload_buffer[1] = class_index;
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	80 93 e3 02 	sts	0x02E3, r24
  temp_payload_buffer[2] = item_id | CLASS_ITEM_FLAG_HAS_INDEX; // add indexed flag
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	80 68       	ori	r24, 0x80	; 128
     d36:	80 93 e4 02 	sts	0x02E4, r24
	temp_payload_buffer[3] = item_index;
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	80 93 e5 02 	sts	0x02E5, r24
  temp_payload_buffer_count = 4;
     d40:	84 e0       	ldi	r24, 0x04	; 4
     d42:	80 93 e1 02 	sts	0x02E1, r24
  temp_payload_void_bytes = set_data;
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	9e 81       	ldd	r25, Y+6	; 0x06
     d4a:	90 93 94 01 	sts	0x0194, r25
     d4e:	80 93 93 01 	sts	0x0193, r24
     d52:	19 c0       	rjmp	.+50     	; 0xd86 <send_set_class_indexed_item_indexed+0x8a>
  while (set_data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
     d54:	30 91 e1 02 	lds	r19, 0x02E1
     d58:	83 2f       	mov	r24, r19
     d5a:	99 27       	eor	r25, r25
     d5c:	87 fd       	sbrc	r24, 7
     d5e:	90 95       	com	r25
     d60:	a0 91 93 01 	lds	r26, 0x0193
     d64:	b0 91 94 01 	lds	r27, 0x0194
     d68:	2c 91       	ld	r18, X
     d6a:	fc 01       	movw	r30, r24
     d6c:	ee 51       	subi	r30, 0x1E	; 30
     d6e:	fd 4f       	sbci	r31, 0xFD	; 253
     d70:	20 83       	st	Z, r18
     d72:	83 2f       	mov	r24, r19
     d74:	8f 5f       	subi	r24, 0xFF	; 255
     d76:	80 93 e1 02 	sts	0x02E1, r24
     d7a:	cd 01       	movw	r24, r26
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	90 93 94 01 	sts	0x0194, r25
     d82:	80 93 93 01 	sts	0x0193, r24
  temp_payload_buffer[1] = class_index;
  temp_payload_buffer[2] = item_id | CLASS_ITEM_FLAG_HAS_INDEX; // add indexed flag
	temp_payload_buffer[3] = item_index;
  temp_payload_buffer_count = 4;
  temp_payload_void_bytes = set_data;
  while (set_data_length-- > 0)
     d86:	8f 81       	ldd	r24, Y+7	; 0x07
     d88:	88 87       	std	Y+8, r24	; 0x08
     d8a:	88 85       	ldd	r24, Y+8	; 0x08
     d8c:	88 23       	and	r24, r24
     d8e:	11 f0       	breq	.+4      	; 0xd94 <send_set_class_indexed_item_indexed+0x98>
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	88 87       	std	Y+8, r24	; 0x08
     d94:	88 85       	ldd	r24, Y+8	; 0x08
     d96:	9f 81       	ldd	r25, Y+7	; 0x07
     d98:	91 50       	subi	r25, 0x01	; 1
     d9a:	9f 83       	std	Y+7, r25	; 0x07
     d9c:	88 23       	and	r24, r24
     d9e:	d1 f6       	brne	.-76     	; 0xd54 <send_set_class_indexed_item_indexed+0x58>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
  send_packet(COMMS_START_BYTE_BASE | COMMS_START_SINGLE_CLASS, temp_payload_buffer, temp_payload_buffer_count);
     da0:	80 91 e1 02 	lds	r24, 0x02E1
     da4:	98 2f       	mov	r25, r24
     da6:	22 ee       	ldi	r18, 0xE2	; 226
     da8:	32 e0       	ldi	r19, 0x02	; 2
     daa:	81 ec       	ldi	r24, 0xC1	; 193
     dac:	b9 01       	movw	r22, r18
     dae:	49 2f       	mov	r20, r25
     db0:	0e 94 b1 08 	call	0x1162	; 0x1162 <send_packet>
}
     db4:	28 96       	adiw	r28, 0x08	; 8
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ef 90       	pop	r14
     dca:	08 95       	ret

00000dcc <SSC_start>:

void SSC_start(uint8_t class_id)
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	0f 92       	push	r0
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	89 83       	std	Y+1, r24	; 0x01
  temp_payload_buffer[0] = class_id | CLASS_FLAG_IS_SET; // add SET flag
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	80 64       	ori	r24, 0x40	; 64
     ddc:	80 93 e2 02 	sts	0x02E2, r24
  temp_payload_buffer_count = 1;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	80 93 e1 02 	sts	0x02E1, r24
}
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <SSC_add_class_item>:

void SSC_add_class_item(uint8_t item_id, void *set_data, uint8_t set_data_length)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <SSC_add_class_item+0x6>
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <SSC_add_class_item+0x8>
     df6:	0f 92       	push	r0
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	7b 83       	std	Y+3, r23	; 0x03
     e00:	6a 83       	std	Y+2, r22	; 0x02
     e02:	4c 83       	std	Y+4, r20	; 0x04
  temp_payload_void_bytes = set_data;
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	9b 81       	ldd	r25, Y+3	; 0x03
     e08:	90 93 94 01 	sts	0x0194, r25
     e0c:	80 93 93 01 	sts	0x0193, r24
  temp_payload_buffer[temp_payload_buffer_count++] = item_id;
     e10:	20 91 e1 02 	lds	r18, 0x02E1
     e14:	82 2f       	mov	r24, r18
     e16:	99 27       	eor	r25, r25
     e18:	87 fd       	sbrc	r24, 7
     e1a:	90 95       	com	r25
     e1c:	fc 01       	movw	r30, r24
     e1e:	ee 51       	subi	r30, 0x1E	; 30
     e20:	fd 4f       	sbci	r31, 0xFD	; 253
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	80 83       	st	Z, r24
     e26:	82 2f       	mov	r24, r18
     e28:	8f 5f       	subi	r24, 0xFF	; 255
     e2a:	80 93 e1 02 	sts	0x02E1, r24
     e2e:	19 c0       	rjmp	.+50     	; 0xe62 <SSC_add_class_item+0x74>
  while (set_data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
     e30:	30 91 e1 02 	lds	r19, 0x02E1
     e34:	83 2f       	mov	r24, r19
     e36:	99 27       	eor	r25, r25
     e38:	87 fd       	sbrc	r24, 7
     e3a:	90 95       	com	r25
     e3c:	a0 91 93 01 	lds	r26, 0x0193
     e40:	b0 91 94 01 	lds	r27, 0x0194
     e44:	2c 91       	ld	r18, X
     e46:	fc 01       	movw	r30, r24
     e48:	ee 51       	subi	r30, 0x1E	; 30
     e4a:	fd 4f       	sbci	r31, 0xFD	; 253
     e4c:	20 83       	st	Z, r18
     e4e:	83 2f       	mov	r24, r19
     e50:	8f 5f       	subi	r24, 0xFF	; 255
     e52:	80 93 e1 02 	sts	0x02E1, r24
     e56:	cd 01       	movw	r24, r26
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	90 93 94 01 	sts	0x0194, r25
     e5e:	80 93 93 01 	sts	0x0193, r24

void SSC_add_class_item(uint8_t item_id, void *set_data, uint8_t set_data_length)
{
  temp_payload_void_bytes = set_data;
  temp_payload_buffer[temp_payload_buffer_count++] = item_id;
  while (set_data_length-- > 0)
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	8d 83       	std	Y+5, r24	; 0x05
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	88 23       	and	r24, r24
     e6a:	11 f0       	breq	.+4      	; 0xe70 <SSC_add_class_item+0x82>
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	8d 83       	std	Y+5, r24	; 0x05
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	91 50       	subi	r25, 0x01	; 1
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	88 23       	and	r24, r24
     e7a:	d1 f6       	brne	.-76     	; 0xe30 <SSC_add_class_item+0x42>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <SSC_add_data>:

void SSC_add_data(void *data, uint8_t data_length)
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	00 d0       	rcall	.+0      	; 0xe92 <SSC_add_data+0x6>
     e92:	00 d0       	rcall	.+0      	; 0xe94 <SSC_add_data+0x8>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	6b 83       	std	Y+3, r22	; 0x03
  temp_payload_void_bytes = data;
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	90 93 94 01 	sts	0x0194, r25
     ea6:	80 93 93 01 	sts	0x0193, r24
     eaa:	19 c0       	rjmp	.+50     	; 0xede <SSC_add_data+0x52>
  while (data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
     eac:	30 91 e1 02 	lds	r19, 0x02E1
     eb0:	83 2f       	mov	r24, r19
     eb2:	99 27       	eor	r25, r25
     eb4:	87 fd       	sbrc	r24, 7
     eb6:	90 95       	com	r25
     eb8:	a0 91 93 01 	lds	r26, 0x0193
     ebc:	b0 91 94 01 	lds	r27, 0x0194
     ec0:	2c 91       	ld	r18, X
     ec2:	fc 01       	movw	r30, r24
     ec4:	ee 51       	subi	r30, 0x1E	; 30
     ec6:	fd 4f       	sbci	r31, 0xFD	; 253
     ec8:	20 83       	st	Z, r18
     eca:	83 2f       	mov	r24, r19
     ecc:	8f 5f       	subi	r24, 0xFF	; 255
     ece:	80 93 e1 02 	sts	0x02E1, r24
     ed2:	cd 01       	movw	r24, r26
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	90 93 94 01 	sts	0x0194, r25
     eda:	80 93 93 01 	sts	0x0193, r24
}

void SSC_add_data(void *data, uint8_t data_length)
{
  temp_payload_void_bytes = data;
  while (data_length-- > 0)
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	8c 83       	std	Y+4, r24	; 0x04
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	88 23       	and	r24, r24
     ee6:	11 f0       	breq	.+4      	; 0xeec <SSC_add_data+0x60>
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	8c 83       	std	Y+4, r24	; 0x04
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	9b 81       	ldd	r25, Y+3	; 0x03
     ef0:	91 50       	subi	r25, 0x01	; 1
     ef2:	9b 83       	std	Y+3, r25	; 0x03
     ef4:	88 23       	and	r24, r24
     ef6:	d1 f6       	brne	.-76     	; 0xeac <SSC_add_data+0x20>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <SSC_send>:

void SSC_send()
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
  send_packet(COMMS_START_BYTE_BASE | COMMS_START_SINGLE_CLASS, temp_payload_buffer, temp_payload_buffer_count);
     f0e:	80 91 e1 02 	lds	r24, 0x02E1
     f12:	98 2f       	mov	r25, r24
     f14:	22 ee       	ldi	r18, 0xE2	; 226
     f16:	32 e0       	ldi	r19, 0x02	; 2
     f18:	81 ec       	ldi	r24, 0xC1	; 193
     f1a:	b9 01       	movw	r22, r18
     f1c:	49 2f       	mov	r20, r25
     f1e:	0e 94 b1 08 	call	0x1162	; 0x1162 <send_packet>
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <SMC_start>:

void SMC_start()
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
  temp_payload_buffer_count = 0;
     f30:	10 92 e1 02 	sts	0x02E1, r1
}
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <SMC_add_class_item>:

void SMC_add_class_item(uint8_t class_id, uint8_t item_id, void *set_data, uint8_t set_data_length)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <SMC_add_class_item+0x6>
     f40:	00 d0       	rcall	.+0      	; 0xf42 <SMC_add_class_item+0x8>
     f42:	00 d0       	rcall	.+0      	; 0xf44 <SMC_add_class_item+0xa>
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	6a 83       	std	Y+2, r22	; 0x02
     f4c:	5c 83       	std	Y+4, r21	; 0x04
     f4e:	4b 83       	std	Y+3, r20	; 0x03
     f50:	2d 83       	std	Y+5, r18	; 0x05
  temp_payload_void_bytes = set_data;
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	9c 81       	ldd	r25, Y+4	; 0x04
     f56:	90 93 94 01 	sts	0x0194, r25
     f5a:	80 93 93 01 	sts	0x0193, r24
  temp_payload_buffer[temp_payload_buffer_count++] = class_id | CLASS_FLAG_IS_SET; // add SET flag
     f5e:	90 91 e1 02 	lds	r25, 0x02E1
     f62:	29 2f       	mov	r18, r25
     f64:	33 27       	eor	r19, r19
     f66:	27 fd       	sbrc	r18, 7
     f68:	30 95       	com	r19
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	80 64       	ori	r24, 0x40	; 64
     f6e:	f9 01       	movw	r30, r18
     f70:	ee 51       	subi	r30, 0x1E	; 30
     f72:	fd 4f       	sbci	r31, 0xFD	; 253
     f74:	80 83       	st	Z, r24
     f76:	89 2f       	mov	r24, r25
     f78:	8f 5f       	subi	r24, 0xFF	; 255
     f7a:	80 93 e1 02 	sts	0x02E1, r24
  temp_payload_buffer[temp_payload_buffer_count++] = item_id;
     f7e:	20 91 e1 02 	lds	r18, 0x02E1
     f82:	82 2f       	mov	r24, r18
     f84:	99 27       	eor	r25, r25
     f86:	87 fd       	sbrc	r24, 7
     f88:	90 95       	com	r25
     f8a:	fc 01       	movw	r30, r24
     f8c:	ee 51       	subi	r30, 0x1E	; 30
     f8e:	fd 4f       	sbci	r31, 0xFD	; 253
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	80 83       	st	Z, r24
     f94:	82 2f       	mov	r24, r18
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	80 93 e1 02 	sts	0x02E1, r24
     f9c:	19 c0       	rjmp	.+50     	; 0xfd0 <SMC_add_class_item+0x96>
  while (set_data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
     f9e:	30 91 e1 02 	lds	r19, 0x02E1
     fa2:	83 2f       	mov	r24, r19
     fa4:	99 27       	eor	r25, r25
     fa6:	87 fd       	sbrc	r24, 7
     fa8:	90 95       	com	r25
     faa:	a0 91 93 01 	lds	r26, 0x0193
     fae:	b0 91 94 01 	lds	r27, 0x0194
     fb2:	2c 91       	ld	r18, X
     fb4:	fc 01       	movw	r30, r24
     fb6:	ee 51       	subi	r30, 0x1E	; 30
     fb8:	fd 4f       	sbci	r31, 0xFD	; 253
     fba:	20 83       	st	Z, r18
     fbc:	83 2f       	mov	r24, r19
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	80 93 e1 02 	sts	0x02E1, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	90 93 94 01 	sts	0x0194, r25
     fcc:	80 93 93 01 	sts	0x0193, r24
void SMC_add_class_item(uint8_t class_id, uint8_t item_id, void *set_data, uint8_t set_data_length)
{
  temp_payload_void_bytes = set_data;
  temp_payload_buffer[temp_payload_buffer_count++] = class_id | CLASS_FLAG_IS_SET; // add SET flag
  temp_payload_buffer[temp_payload_buffer_count++] = item_id;
  while (set_data_length-- > 0)
     fd0:	8d 81       	ldd	r24, Y+5	; 0x05
     fd2:	8e 83       	std	Y+6, r24	; 0x06
     fd4:	8e 81       	ldd	r24, Y+6	; 0x06
     fd6:	88 23       	and	r24, r24
     fd8:	11 f0       	breq	.+4      	; 0xfde <SMC_add_class_item+0xa4>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	8e 83       	std	Y+6, r24	; 0x06
     fde:	8e 81       	ldd	r24, Y+6	; 0x06
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	91 50       	subi	r25, 0x01	; 1
     fe4:	9d 83       	std	Y+5, r25	; 0x05
     fe6:	88 23       	and	r24, r24
     fe8:	d1 f6       	brne	.-76     	; 0xf9e <SMC_add_class_item+0x64>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
}
     fea:	26 96       	adiw	r28, 0x06	; 6
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <SMC_add_class_indexed_item>:

void SMC_add_class_indexed_item(uint8_t class_id, uint8_t class_index, uint8_t item_id, void *set_data, uint8_t set_data_length)
{
     ffc:	0f 93       	push	r16
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	27 97       	sbiw	r28, 0x07	; 7
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	6a 83       	std	Y+2, r22	; 0x02
    1016:	4b 83       	std	Y+3, r20	; 0x03
    1018:	3d 83       	std	Y+5, r19	; 0x05
    101a:	2c 83       	std	Y+4, r18	; 0x04
    101c:	0e 83       	std	Y+6, r16	; 0x06
  temp_payload_void_bytes = set_data;
    101e:	8c 81       	ldd	r24, Y+4	; 0x04
    1020:	9d 81       	ldd	r25, Y+5	; 0x05
    1022:	90 93 94 01 	sts	0x0194, r25
    1026:	80 93 93 01 	sts	0x0193, r24
  temp_payload_buffer[temp_payload_buffer_count++] = class_id | CLASS_FLAG_HAS_INDEX | CLASS_FLAG_IS_SET; // add indexed and SET flag
    102a:	90 91 e1 02 	lds	r25, 0x02E1
    102e:	29 2f       	mov	r18, r25
    1030:	33 27       	eor	r19, r19
    1032:	27 fd       	sbrc	r18, 7
    1034:	30 95       	com	r19
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	80 6c       	ori	r24, 0xC0	; 192
    103a:	f9 01       	movw	r30, r18
    103c:	ee 51       	subi	r30, 0x1E	; 30
    103e:	fd 4f       	sbci	r31, 0xFD	; 253
    1040:	80 83       	st	Z, r24
    1042:	89 2f       	mov	r24, r25
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	80 93 e1 02 	sts	0x02E1, r24
  temp_payload_buffer[temp_payload_buffer_count++] = class_index;
    104a:	20 91 e1 02 	lds	r18, 0x02E1
    104e:	82 2f       	mov	r24, r18
    1050:	99 27       	eor	r25, r25
    1052:	87 fd       	sbrc	r24, 7
    1054:	90 95       	com	r25
    1056:	fc 01       	movw	r30, r24
    1058:	ee 51       	subi	r30, 0x1E	; 30
    105a:	fd 4f       	sbci	r31, 0xFD	; 253
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	80 83       	st	Z, r24
    1060:	82 2f       	mov	r24, r18
    1062:	8f 5f       	subi	r24, 0xFF	; 255
    1064:	80 93 e1 02 	sts	0x02E1, r24
  temp_payload_buffer[temp_payload_buffer_count++] = item_id;
    1068:	20 91 e1 02 	lds	r18, 0x02E1
    106c:	82 2f       	mov	r24, r18
    106e:	99 27       	eor	r25, r25
    1070:	87 fd       	sbrc	r24, 7
    1072:	90 95       	com	r25
    1074:	fc 01       	movw	r30, r24
    1076:	ee 51       	subi	r30, 0x1E	; 30
    1078:	fd 4f       	sbci	r31, 0xFD	; 253
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	80 83       	st	Z, r24
    107e:	82 2f       	mov	r24, r18
    1080:	8f 5f       	subi	r24, 0xFF	; 255
    1082:	80 93 e1 02 	sts	0x02E1, r24
    1086:	19 c0       	rjmp	.+50     	; 0x10ba <SMC_add_class_indexed_item+0xbe>
  while (set_data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
    1088:	30 91 e1 02 	lds	r19, 0x02E1
    108c:	83 2f       	mov	r24, r19
    108e:	99 27       	eor	r25, r25
    1090:	87 fd       	sbrc	r24, 7
    1092:	90 95       	com	r25
    1094:	a0 91 93 01 	lds	r26, 0x0193
    1098:	b0 91 94 01 	lds	r27, 0x0194
    109c:	2c 91       	ld	r18, X
    109e:	fc 01       	movw	r30, r24
    10a0:	ee 51       	subi	r30, 0x1E	; 30
    10a2:	fd 4f       	sbci	r31, 0xFD	; 253
    10a4:	20 83       	st	Z, r18
    10a6:	83 2f       	mov	r24, r19
    10a8:	8f 5f       	subi	r24, 0xFF	; 255
    10aa:	80 93 e1 02 	sts	0x02E1, r24
    10ae:	cd 01       	movw	r24, r26
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	90 93 94 01 	sts	0x0194, r25
    10b6:	80 93 93 01 	sts	0x0193, r24
{
  temp_payload_void_bytes = set_data;
  temp_payload_buffer[temp_payload_buffer_count++] = class_id | CLASS_FLAG_HAS_INDEX | CLASS_FLAG_IS_SET; // add indexed and SET flag
  temp_payload_buffer[temp_payload_buffer_count++] = class_index;
  temp_payload_buffer[temp_payload_buffer_count++] = item_id;
  while (set_data_length-- > 0)
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	8f 83       	std	Y+7, r24	; 0x07
    10be:	8f 81       	ldd	r24, Y+7	; 0x07
    10c0:	88 23       	and	r24, r24
    10c2:	11 f0       	breq	.+4      	; 0x10c8 <SMC_add_class_indexed_item+0xcc>
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	8f 83       	std	Y+7, r24	; 0x07
    10c8:	8f 81       	ldd	r24, Y+7	; 0x07
    10ca:	9e 81       	ldd	r25, Y+6	; 0x06
    10cc:	91 50       	subi	r25, 0x01	; 1
    10ce:	9e 83       	std	Y+6, r25	; 0x06
    10d0:	88 23       	and	r24, r24
    10d2:	d1 f6       	brne	.-76     	; 0x1088 <SMC_add_class_indexed_item+0x8c>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
}
    10d4:	27 96       	adiw	r28, 0x07	; 7
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	0f 91       	pop	r16
    10e6:	08 95       	ret

000010e8 <SMC_send>:

void SMC_send()
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
  send_packet(COMMS_START_BYTE_BASE, temp_payload_buffer, temp_payload_buffer_count);
    10f0:	80 91 e1 02 	lds	r24, 0x02E1
    10f4:	98 2f       	mov	r25, r24
    10f6:	22 ee       	ldi	r18, 0xE2	; 226
    10f8:	32 e0       	ldi	r19, 0x02	; 2
    10fa:	80 ec       	ldi	r24, 0xC0	; 192
    10fc:	b9 01       	movw	r22, r18
    10fe:	49 2f       	mov	r20, r25
    1100:	0e 94 b1 08 	call	0x1162	; 0x1162 <send_packet>
}
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <send_text>:

void send_text(const char *text, ...)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <send_text+0x6>
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
	// send as CLASS_SYSTEM_TEXT
  va_list args;

  temp_text_buffer[0] = CLASS_SYSTEM | CLASS_FLAG_IS_SET; // add SET flag
    1114:	83 e4       	ldi	r24, 0x43	; 67
    1116:	80 93 95 01 	sts	0x0195, r24
  temp_text_buffer[1] = CLASS_SYSTEM_TEXT;
    111a:	10 92 96 01 	sts	0x0196, r1

  temp_text_buffer_count = 3;
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	80 93 d5 01 	sts	0x01D5, r24

  va_start(args, text);
    1124:	ce 01       	movw	r24, r28
    1126:	09 96       	adiw	r24, 0x09	; 9
    1128:	9a 83       	std	Y+2, r25	; 0x02
    112a:	89 83       	std	Y+1, r24	; 0x01
  vprintf(text, args);
    112c:	29 81       	ldd	r18, Y+1	; 0x01
    112e:	3a 81       	ldd	r19, Y+2	; 0x02
    1130:	8f 81       	ldd	r24, Y+7	; 0x07
    1132:	98 85       	ldd	r25, Y+8	; 0x08
    1134:	b9 01       	movw	r22, r18
    1136:	0e 94 44 0c 	call	0x1888	; 0x1888 <vprintf>
  va_end(args);

  temp_text_buffer[2] = temp_text_buffer_count - 3;
    113a:	80 91 d5 01 	lds	r24, 0x01D5
    113e:	83 50       	subi	r24, 0x03	; 3
    1140:	80 93 97 01 	sts	0x0197, r24

  send_packet(COMMS_START_BYTE_BASE | COMMS_START_SINGLE_CLASS, temp_text_buffer, temp_text_buffer_count);
    1144:	80 91 d5 01 	lds	r24, 0x01D5
    1148:	98 2f       	mov	r25, r24
    114a:	25 e9       	ldi	r18, 0x95	; 149
    114c:	31 e0       	ldi	r19, 0x01	; 1
    114e:	81 ec       	ldi	r24, 0xC1	; 193
    1150:	b9 01       	movw	r22, r18
    1152:	49 2f       	mov	r20, r25
    1154:	0e 94 b1 08 	call	0x1162	; 0x1162 <send_packet>
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <send_packet>:

// low-level send packet function, used by all intermediate packet-forming functions
void send_packet(uint8_t start_byte, uint8_t *payload, uint8_t payload_length)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <send_packet+0x6>
    1168:	00 d0       	rcall	.+0      	; 0x116a <send_packet+0x8>
    116a:	00 d0       	rcall	.+0      	; 0x116c <send_packet+0xa>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	8b 83       	std	Y+3, r24	; 0x03
    1172:	7d 83       	std	Y+5, r23	; 0x05
    1174:	6c 83       	std	Y+4, r22	; 0x04
    1176:	4e 83       	std	Y+6, r20	; 0x06
  uint8_t bytecheck = 0;
    1178:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t count;
	
	if ((payload_length > 0)&&(payload[0] & 0x80))
    117a:	8e 81       	ldd	r24, Y+6	; 0x06
    117c:	88 23       	and	r24, r24
    117e:	79 f0       	breq	.+30     	; 0x119e <send_packet+0x3c>
    1180:	ec 81       	ldd	r30, Y+4	; 0x04
    1182:	fd 81       	ldd	r31, Y+5	; 0x05
    1184:	80 81       	ld	r24, Z
    1186:	88 23       	and	r24, r24
    1188:	54 f4       	brge	.+20     	; 0x119e <send_packet+0x3c>
  {
    start_byte |= COMMS_START_PAYLOAD_FIRST_BYTE_MSB_HIGH;
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	82 60       	ori	r24, 0x02	; 2
    118e:	8b 83       	std	Y+3, r24	; 0x03
    payload[0] &= 0x7F;
    1190:	ec 81       	ldd	r30, Y+4	; 0x04
    1192:	fd 81       	ldd	r31, Y+5	; 0x05
    1194:	80 81       	ld	r24, Z
    1196:	8f 77       	andi	r24, 0x7F	; 127
    1198:	ec 81       	ldd	r30, Y+4	; 0x04
    119a:	fd 81       	ldd	r31, Y+5	; 0x05
    119c:	80 83       	st	Z, r24
  }

  fifo_add_byte(&(payload_stream.tx_fifo), start_byte);
    119e:	8c ec       	ldi	r24, 0xCC	; 204
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	6b 81       	ldd	r22, Y+3	; 0x03
    11a4:	0e 94 44 09 	call	0x1288	; 0x1288 <fifo_add_byte>
  fifo_add_byte(&(payload_stream.tx_fifo), COMMS_DLE_BYTE);
    11a8:	8c ec       	ldi	r24, 0xCC	; 204
    11aa:	92 e0       	ldi	r25, 0x02	; 2
    11ac:	6d eb       	ldi	r22, 0xBD	; 189
    11ae:	0e 94 44 09 	call	0x1288	; 0x1288 <fifo_add_byte>

  for (count = 0; count < payload_length; count++)
    11b2:	19 82       	std	Y+1, r1	; 0x01
    11b4:	29 c0       	rjmp	.+82     	; 0x1208 <send_packet+0xa6>
  {
    fifo_add_byte(&(payload_stream.tx_fifo), payload[count]);
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	8c 81       	ldd	r24, Y+4	; 0x04
    11be:	9d 81       	ldd	r25, Y+5	; 0x05
    11c0:	fc 01       	movw	r30, r24
    11c2:	e2 0f       	add	r30, r18
    11c4:	f3 1f       	adc	r31, r19
    11c6:	20 81       	ld	r18, Z
    11c8:	8c ec       	ldi	r24, 0xCC	; 204
    11ca:	92 e0       	ldi	r25, 0x02	; 2
    11cc:	62 2f       	mov	r22, r18
    11ce:	0e 94 44 09 	call	0x1288	; 0x1288 <fifo_add_byte>
    if (payload[count] == COMMS_DLE_BYTE)
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	9d 81       	ldd	r25, Y+5	; 0x05
    11dc:	fc 01       	movw	r30, r24
    11de:	e2 0f       	add	r30, r18
    11e0:	f3 1f       	adc	r31, r19
    11e2:	80 81       	ld	r24, Z
    11e4:	8d 3b       	cpi	r24, 0xBD	; 189
    11e6:	29 f4       	brne	.+10     	; 0x11f2 <send_packet+0x90>
      fifo_add_byte(&(payload_stream.tx_fifo), COMMS_DLE_BYTE); // "stuff" DLE byte
    11e8:	8c ec       	ldi	r24, 0xCC	; 204
    11ea:	92 e0       	ldi	r25, 0x02	; 2
    11ec:	6d eb       	ldi	r22, 0xBD	; 189
    11ee:	0e 94 44 09 	call	0x1288	; 0x1288 <fifo_add_byte>
    
    if (bytecheck >= 127)
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	8f 37       	cpi	r24, 0x7F	; 127
    11f6:	10 f0       	brcs	.+4      	; 0x11fc <send_packet+0x9a>
      bytecheck = 0; // bytecheck cannot be > 127, reset counter
    11f8:	1a 82       	std	Y+2, r1	; 0x02
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <send_packet+0xa0>
    else
      bytecheck++;
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	8a 83       	std	Y+2, r24	; 0x02
  }

  fifo_add_byte(&(payload_stream.tx_fifo), start_byte);
  fifo_add_byte(&(payload_stream.tx_fifo), COMMS_DLE_BYTE);

  for (count = 0; count < payload_length; count++)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	8f 5f       	subi	r24, 0xFF	; 255
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	99 81       	ldd	r25, Y+1	; 0x01
    120a:	8e 81       	ldd	r24, Y+6	; 0x06
    120c:	98 17       	cp	r25, r24
    120e:	98 f2       	brcs	.-90     	; 0x11b6 <send_packet+0x54>
      bytecheck = 0; // bytecheck cannot be > 127, reset counter
    else
      bytecheck++;
  }

  fifo_add_byte(&(payload_stream.tx_fifo), COMMS_DLE_BYTE);
    1210:	8c ec       	ldi	r24, 0xCC	; 204
    1212:	92 e0       	ldi	r25, 0x02	; 2
    1214:	6d eb       	ldi	r22, 0xBD	; 189
    1216:	0e 94 44 09 	call	0x1288	; 0x1288 <fifo_add_byte>
  fifo_add_byte(&(payload_stream.tx_fifo), COMMS_ETX_BYTE); // assume no originator byte to pass on for now..
    121a:	8c ec       	ldi	r24, 0xCC	; 204
    121c:	92 e0       	ldi	r25, 0x02	; 2
    121e:	6e eb       	ldi	r22, 0xBE	; 190
    1220:	0e 94 44 09 	call	0x1288	; 0x1288 <fifo_add_byte>
  fifo_add_byte(&(payload_stream.tx_fifo), bytecheck);
    1224:	8c ec       	ldi	r24, 0xCC	; 204
    1226:	92 e0       	ldi	r25, 0x02	; 2
    1228:	6a 81       	ldd	r22, Y+2	; 0x02
    122a:	0e 94 44 09 	call	0x1288	; 0x1288 <fifo_add_byte>
}
    122e:	26 96       	adiw	r28, 0x06	; 6
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <fifo_setup>:
#include "base.h"

#include "fifo.h"

void fifo_setup(fifo_struct *fifo, uint8_t *buffer, uint8_t buffer_length)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <fifo_setup+0x6>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <fifo_setup+0x8>
    1248:	0f 92       	push	r0
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	7c 83       	std	Y+4, r23	; 0x04
    1254:	6b 83       	std	Y+3, r22	; 0x03
    1256:	4d 83       	std	Y+5, r20	; 0x05
  fifo->head = 0;
    1258:	e9 81       	ldd	r30, Y+1	; 0x01
    125a:	fa 81       	ldd	r31, Y+2	; 0x02
    125c:	10 82       	st	Z, r1
  fifo->tail = 0;
    125e:	e9 81       	ldd	r30, Y+1	; 0x01
    1260:	fa 81       	ldd	r31, Y+2	; 0x02
    1262:	11 82       	std	Z+1, r1	; 0x01
  fifo->buffer = buffer;
    1264:	e9 81       	ldd	r30, Y+1	; 0x01
    1266:	fa 81       	ldd	r31, Y+2	; 0x02
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	94 83       	std	Z+4, r25	; 0x04
    126e:	83 83       	std	Z+3, r24	; 0x03
  fifo->buffer_length = buffer_length;
    1270:	e9 81       	ldd	r30, Y+1	; 0x01
    1272:	fa 81       	ldd	r31, Y+2	; 0x02
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	82 83       	std	Z+2, r24	; 0x02
}
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <fifo_add_byte>:

inline void fifo_add_byte(fifo_struct *fifo, uint8_t byte_in)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <fifo_add_byte+0x6>
    128e:	0f 92       	push	r0
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	6b 83       	std	Y+3, r22	; 0x03
  fifo->buffer[fifo->head++] = byte_in;
    129a:	e9 81       	ldd	r30, Y+1	; 0x01
    129c:	fa 81       	ldd	r31, Y+2	; 0x02
    129e:	23 81       	ldd	r18, Z+3	; 0x03
    12a0:	34 81       	ldd	r19, Z+4	; 0x04
    12a2:	e9 81       	ldd	r30, Y+1	; 0x01
    12a4:	fa 81       	ldd	r31, Y+2	; 0x02
    12a6:	40 81       	ld	r20, Z
    12a8:	84 2f       	mov	r24, r20
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	f9 01       	movw	r30, r18
    12ae:	e8 0f       	add	r30, r24
    12b0:	f9 1f       	adc	r31, r25
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	80 83       	st	Z, r24
    12b6:	84 2f       	mov	r24, r20
    12b8:	8f 5f       	subi	r24, 0xFF	; 255
    12ba:	e9 81       	ldd	r30, Y+1	; 0x01
    12bc:	fa 81       	ldd	r31, Y+2	; 0x02
    12be:	80 83       	st	Z, r24
  if (fifo->head == fifo->buffer_length)
    12c0:	e9 81       	ldd	r30, Y+1	; 0x01
    12c2:	fa 81       	ldd	r31, Y+2	; 0x02
    12c4:	90 81       	ld	r25, Z
    12c6:	e9 81       	ldd	r30, Y+1	; 0x01
    12c8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	98 17       	cp	r25, r24
    12ce:	19 f4       	brne	.+6      	; 0x12d6 <fifo_add_byte+0x4e>
    fifo->head = 0;
    12d0:	e9 81       	ldd	r30, Y+1	; 0x01
    12d2:	fa 81       	ldd	r31, Y+2	; 0x02
    12d4:	10 82       	st	Z, r1
}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <fifo_get_byte>:

inline void fifo_get_byte(fifo_struct *fifo, uint8_t *byte_out)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <fifo_get_byte+0x6>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <fifo_get_byte+0x8>
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	7c 83       	std	Y+4, r23	; 0x04
    12f4:	6b 83       	std	Y+3, r22	; 0x03
  // this assumes tail != head (i.e. there is some data to get)
  *byte_out = fifo->buffer[fifo->tail++];
    12f6:	e9 81       	ldd	r30, Y+1	; 0x01
    12f8:	fa 81       	ldd	r31, Y+2	; 0x02
    12fa:	23 81       	ldd	r18, Z+3	; 0x03
    12fc:	34 81       	ldd	r19, Z+4	; 0x04
    12fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1300:	fa 81       	ldd	r31, Y+2	; 0x02
    1302:	41 81       	ldd	r20, Z+1	; 0x01
    1304:	84 2f       	mov	r24, r20
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	f9 01       	movw	r30, r18
    130a:	e8 0f       	add	r30, r24
    130c:	f9 1f       	adc	r31, r25
    130e:	80 81       	ld	r24, Z
    1310:	eb 81       	ldd	r30, Y+3	; 0x03
    1312:	fc 81       	ldd	r31, Y+4	; 0x04
    1314:	80 83       	st	Z, r24
    1316:	84 2f       	mov	r24, r20
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	e9 81       	ldd	r30, Y+1	; 0x01
    131c:	fa 81       	ldd	r31, Y+2	; 0x02
    131e:	81 83       	std	Z+1, r24	; 0x01
  if (fifo->tail == fifo->buffer_length)
    1320:	e9 81       	ldd	r30, Y+1	; 0x01
    1322:	fa 81       	ldd	r31, Y+2	; 0x02
    1324:	91 81       	ldd	r25, Z+1	; 0x01
    1326:	e9 81       	ldd	r30, Y+1	; 0x01
    1328:	fa 81       	ldd	r31, Y+2	; 0x02
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	98 17       	cp	r25, r24
    132e:	19 f4       	brne	.+6      	; 0x1336 <fifo_get_byte+0x54>
    fifo->tail = 0;
    1330:	e9 81       	ldd	r30, Y+1	; 0x01
    1332:	fa 81       	ldd	r31, Y+2	; 0x02
    1334:	11 82       	std	Z+1, r1	; 0x01
}
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <payload_tx_enable>:

#include "io_pins.h"

// defined by module.h but must be implemented locally, here
void payload_tx_enable(boolean_t want_enable)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	0f 92       	push	r0
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	89 83       	std	Y+1, r24	; 0x01
	if (want_enable)
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	88 23       	and	r24, r24
    1354:	41 f0       	breq	.+16     	; 0x1366 <payload_tx_enable+0x22>
		PORTC |= PAYLOAD_TX_ENABLE;
    1356:	a8 e2       	ldi	r26, 0x28	; 40
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e8 e2       	ldi	r30, 0x28	; 40
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	81 60       	ori	r24, 0x01	; 1
    1362:	8c 93       	st	X, r24
    1364:	07 c0       	rjmp	.+14     	; 0x1374 <payload_tx_enable+0x30>
	else
		PORTC &= ~PAYLOAD_TX_ENABLE;
    1366:	a8 e2       	ldi	r26, 0x28	; 40
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e8 e2       	ldi	r30, 0x28	; 40
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8e 7f       	andi	r24, 0xFE	; 254
    1372:	8c 93       	st	X, r24
}
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <io_pins_setup>:

void io_pins_setup()
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
	// 1 = output, 0 = input
	
	DDRB = 0b00101100; // only PB2 (SPI_SS), PB3 (SPI_MOSI) and PB5 (SPI_CLK) are outputs
    1384:	e4 e2       	ldi	r30, 0x24	; 36
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	8c e2       	ldi	r24, 0x2C	; 44
    138a:	80 83       	st	Z, r24
	DDRC = 0b00000111; // only PC0 (PAYLOAD_TX_ENABLE), PC1 (STATUS_LED) and PC2 (nSPI_CS_ADC) are outputs
    138c:	e7 e2       	ldi	r30, 0x27	; 39
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	87 e0       	ldi	r24, 0x07	; 7
    1392:	80 83       	st	Z, r24
	DDRD = 0b00000010; // only PD1 (PAYLOAD_TX) is an output
    1394:	ea e2       	ldi	r30, 0x2A	; 42
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	80 83       	st	Z, r24
	
	PORTC = 0x04; // set PAYLOAD_TX_ENABLE low, STATUS_LED off and nSPI_CS_ADC high
    139c:	e8 e2       	ldi	r30, 0x28	; 40
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	84 e0       	ldi	r24, 0x04	; 4
    13a2:	80 83       	st	Z, r24
}
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <toggle_status_led>:

void toggle_status_led()
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
	if (PORTC & STATUS_LED)
    13b2:	e8 e2       	ldi	r30, 0x28	; 40
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	82 70       	andi	r24, 0x02	; 2
    13be:	90 70       	andi	r25, 0x00	; 0
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	41 f0       	breq	.+16     	; 0x13d4 <toggle_status_led+0x2a>
		PORTC &= ~STATUS_LED;
    13c4:	a8 e2       	ldi	r26, 0x28	; 40
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e8 e2       	ldi	r30, 0x28	; 40
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8d 7f       	andi	r24, 0xFD	; 253
    13d0:	8c 93       	st	X, r24
    13d2:	07 c0       	rjmp	.+14     	; 0x13e2 <toggle_status_led+0x38>
	else
		PORTC |= STATUS_LED;
    13d4:	a8 e2       	ldi	r26, 0x28	; 40
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e8 e2       	ldi	r30, 0x28	; 40
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	82 60       	ori	r24, 0x02	; 2
    13e0:	8c 93       	st	X, r24
}
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <status_led_on>:

void status_led_on()
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
	PORTC |= STATUS_LED;
    13f0:	a8 e2       	ldi	r26, 0x28	; 40
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e8 e2       	ldi	r30, 0x28	; 40
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	82 60       	ori	r24, 0x02	; 2
    13fc:	8c 93       	st	X, r24
}
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <status_led_off>:

void status_led_off()
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
	PORTC &= ~STATUS_LED;
    140c:	a8 e2       	ldi	r26, 0x28	; 40
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e8 e2       	ldi	r30, 0x28	; 40
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8d 7f       	andi	r24, 0xFD	; 253
    1418:	8c 93       	st	X, r24
}
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <main>:
#include "packet_scan.h"

uint8_t my_data[8]={0x07,0x42,0x42,0x42,0x42,0x42,0x42,0x42};

int main()
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
	
	io_pins_setup();
    1428:	0e 94 be 09 	call	0x137c	; 0x137c <io_pins_setup>
	module_setup();
    142c:	0e 94 33 0a 	call	0x1466	; 0x1466 <module_setup>
	//adc_setup();
	//timer1_setup();
	
	// enable global interrupts
	sei();
    1430:	78 94       	sei
	
	DDRB = 0xFF;
    1432:	e4 e2       	ldi	r30, 0x24	; 36
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	8f ef       	ldi	r24, 0xFF	; 255
    1438:	80 83       	st	Z, r24
	PORTB = 0xFF;
    143a:	e5 e2       	ldi	r30, 0x25	; 37
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	80 83       	st	Z, r24
	
	//DDRB |= 0x02;
	//PORTB &= ~(0x02);
	send_set_class_item(2,3,my_data,8);
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	31 e0       	ldi	r19, 0x01	; 1
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	63 e0       	ldi	r22, 0x03	; 3
    144a:	a9 01       	movw	r20, r18
    144c:	28 e0       	ldi	r18, 0x08	; 8
    144e:	0e 94 c9 05 	call	0xb92	; 0xb92 <send_set_class_item>
	while (1)
	{
		PORTB = 0x00;
    1452:	e5 e2       	ldi	r30, 0x25	; 37
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	10 82       	st	Z, r1
		comms_update();
    1458:	0e 94 ad 05 	call	0xb5a	; 0xb5a <comms_update>

		//send_set_class_indexed_item_indexed(CLASS_PAYLOAD, module_id, CLASS_PAYLOAD_MEM_BYTES, 0, adc_z_buffer_packed, 31);
		PORTB = 0xFF;
    145c:	e5 e2       	ldi	r30, 0x25	; 37
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	80 83       	st	Z, r24
    1464:	f6 cf       	rjmp	.-20     	; 0x1452 <main+0x32>

00001466 <module_setup>:
#include "uart.h"

#include "module.h"

void module_setup()
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	payload_tx_enable(FALSE); // disable payload TX (if not already done by local io_pins_setup())
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	0e 94 a2 09 	call	0x1344	; 0x1344 <payload_tx_enable>

  module_id = eeprom_read_byte(MODULE_EEPROM_ADDR_MODULE_ID);
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__eerd_byte_m168>
    147c:	80 93 c6 02 	sts	0x02C6, r24
	if (module_id > 127)
    1480:	80 91 c6 02 	lds	r24, 0x02C6
    1484:	88 23       	and	r24, r24
    1486:	1c f4       	brge	.+6      	; 0x148e <module_setup+0x28>
		module_id = MODULE_INITIAL_ID;
    1488:	8f e7       	ldi	r24, 0x7F	; 127
    148a:	80 93 c6 02 	sts	0x02C6, r24

	comms_setup();
    148e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <comms_setup>
	uart0_setup();
    1492:	0e 94 25 0c 	call	0x184a	; 0x184a <uart0_setup>
}
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <module_packet_scan>:

void module_packet_scan(uint8_t *data, uint8_t length)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <module_packet_scan+0x6>
    14a2:	0f 92       	push	r0
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	9a 83       	std	Y+2, r25	; 0x02
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	6b 83       	std	Y+3, r22	; 0x03
	// perform initial packet scan and handle standard module packet classes
	
	if (length > 0)
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	88 23       	and	r24, r24
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <module_packet_scan+0x1a>
    14b4:	49 c0       	rjmp	.+146    	; 0x1548 <module_packet_scan+0xac>
	{
		switch (data[0])
    14b6:	e9 81       	ldd	r30, Y+1	; 0x01
    14b8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ba:	80 81       	ld	r24, Z
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	8f 3f       	cpi	r24, 0xFF	; 255
    14c2:	91 05       	cpc	r25, r1
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <module_packet_scan+0x2c>
    14c6:	40 c0       	rjmp	.+128    	; 0x1548 <module_packet_scan+0xac>
		{
			case MODULE_PACKET_CLASS_CHANGE_MODULE_ID:
				if ((length > 1)&&(data[1] < 128))
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	82 30       	cpi	r24, 0x02	; 2
    14cc:	08 f4       	brcc	.+2      	; 0x14d0 <module_packet_scan+0x34>
    14ce:	41 c0       	rjmp	.+130    	; 0x1552 <module_packet_scan+0xb6>
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	fc 01       	movw	r30, r24
    14d6:	31 96       	adiw	r30, 0x01	; 1
    14d8:	80 81       	ld	r24, Z
    14da:	88 23       	and	r24, r24
    14dc:	d4 f1       	brlt	.+116    	; 0x1552 <module_packet_scan+0xb6>
				{
					eeprom_write_byte(MODULE_EEPROM_ADDR_MODULE_ID, data[1]);
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	9a 81       	ldd	r25, Y+2	; 0x02
    14e2:	fc 01       	movw	r30, r24
    14e4:	31 96       	adiw	r30, 0x01	; 1
    14e6:	20 81       	ld	r18, Z
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	62 2f       	mov	r22, r18
    14ee:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__eewr_byte_m168>
					send_text("Module ID changed %d -> %d", module_id, data[1]);
    14f2:	80 91 c6 02 	lds	r24, 0x02C6
    14f6:	48 2f       	mov	r20, r24
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	fc 01       	movw	r30, r24
    1500:	31 96       	adiw	r30, 0x01	; 1
    1502:	80 81       	ld	r24, Z
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	00 d0       	rcall	.+0      	; 0x150a <module_packet_scan+0x6e>
    150a:	00 d0       	rcall	.+0      	; 0x150c <module_packet_scan+0x70>
    150c:	00 d0       	rcall	.+0      	; 0x150e <module_packet_scan+0x72>
    150e:	ed b7       	in	r30, 0x3d	; 61
    1510:	fe b7       	in	r31, 0x3e	; 62
    1512:	31 96       	adiw	r30, 0x01	; 1
    1514:	88 e0       	ldi	r24, 0x08	; 8
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	91 83       	std	Z+1, r25	; 0x01
    151a:	80 83       	st	Z, r24
    151c:	53 83       	std	Z+3, r21	; 0x03
    151e:	42 83       	std	Z+2, r20	; 0x02
    1520:	35 83       	std	Z+5, r19	; 0x05
    1522:	24 83       	std	Z+4, r18	; 0x04
    1524:	0e 94 85 08 	call	0x110a	; 0x110a <send_text>
    1528:	8d b7       	in	r24, 0x3d	; 61
    152a:	9e b7       	in	r25, 0x3e	; 62
    152c:	06 96       	adiw	r24, 0x06	; 6
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	9e bf       	out	0x3e, r25	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	8d bf       	out	0x3d, r24	; 61
					module_id = data[1];
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	9a 81       	ldd	r25, Y+2	; 0x02
    153c:	fc 01       	movw	r30, r24
    153e:	31 96       	adiw	r30, 0x01	; 1
    1540:	80 81       	ld	r24, Z
    1542:	80 93 c6 02 	sts	0x02C6, r24
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <module_packet_scan+0xb6>
				return;
		}
	}
	
	// call external packet_scan() for module-specific packet handling
	packet_scan(data, length);
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	6b 81       	ldd	r22, Y+3	; 0x03
    154e:	0e 94 af 0a 	call	0x155e	; 0x155e <packet_scan>
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <packet_scan>:
#include "adc.h"

#include "packet_scan.h"

void packet_scan(uint8_t *data, uint8_t length)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <packet_scan+0x6>
    1564:	0f 92       	push	r0
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	6b 83       	std	Y+3, r22	; 0x03
	if (length > 0)
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	88 23       	and	r24, r24
    1574:	99 f0       	breq	.+38     	; 0x159c <packet_scan+0x3e>
	{
		switch (data[0])
    1576:	e9 81       	ldd	r30, Y+1	; 0x01
    1578:	fa 81       	ldd	r31, Y+2	; 0x02
    157a:	80 81       	ld	r24, Z
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	61 f4       	brne	.+24     	; 0x159c <packet_scan+0x3e>
		{
			case 0:
				send_text("hello");
    1584:	00 d0       	rcall	.+0      	; 0x1586 <packet_scan+0x28>
    1586:	ed b7       	in	r30, 0x3d	; 61
    1588:	fe b7       	in	r31, 0x3e	; 62
    158a:	31 96       	adiw	r30, 0x01	; 1
    158c:	83 e2       	ldi	r24, 0x23	; 35
    158e:	91 e0       	ldi	r25, 0x01	; 1
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	80 83       	st	Z, r24
    1594:	0e 94 85 08 	call	0x110a	; 0x110a <send_text>
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
				break;
		}
	}
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <packet_tx_request>:

void packet_tx_request()
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
	PORTC ^= STATUS_LED;
    15b0:	a8 e2       	ldi	r26, 0x28	; 40
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e8 e2       	ldi	r30, 0x28	; 40
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	90 81       	ld	r25, Z
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	89 27       	eor	r24, r25
    15be:	8c 93       	st	X, r24
	//adc_pack_buffer();
	
	// send output packet
	//send_set_class_indexed_item_indexed(CLASS_PAYLOAD, module_id, CLASS_PAYLOAD_MEM_BYTES, 0, adc_z_buffer_packed, 31);
}
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <peak_test_setup>:
#include <avr/io.h>
#include <avr/eeprom.h>

//uint8_t my_data={0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8};
void peak_test_setup()
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
	

		
}
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <peak_test_send_int>:

void peak_test_send_int()
{
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
//		send_set_class_item(2,3,my_data,8);
	
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <__vector_11>:
#include "adc.h"

#include "timer.h"

ISR(TIMER1_COMPA_vect)
{
    15e2:	1f 92       	push	r1
    15e4:	0f 92       	push	r0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	0f 92       	push	r0
    15ea:	11 24       	eor	r1, r1
    15ec:	2f 93       	push	r18
    15ee:	3f 93       	push	r19
    15f0:	4f 93       	push	r20
    15f2:	5f 93       	push	r21
    15f4:	6f 93       	push	r22
    15f6:	7f 93       	push	r23
    15f8:	8f 93       	push	r24
    15fa:	9f 93       	push	r25
    15fc:	af 93       	push	r26
    15fe:	bf 93       	push	r27
    1600:	ef 93       	push	r30
    1602:	ff 93       	push	r31
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
	adc_update();
    160c:	0e 94 20 01 	call	0x240	; 0x240 <adc_update>
}
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	ff 91       	pop	r31
    1616:	ef 91       	pop	r30
    1618:	bf 91       	pop	r27
    161a:	af 91       	pop	r26
    161c:	9f 91       	pop	r25
    161e:	8f 91       	pop	r24
    1620:	7f 91       	pop	r23
    1622:	6f 91       	pop	r22
    1624:	5f 91       	pop	r21
    1626:	4f 91       	pop	r20
    1628:	3f 91       	pop	r19
    162a:	2f 91       	pop	r18
    162c:	0f 90       	pop	r0
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	0f 90       	pop	r0
    1632:	1f 90       	pop	r1
    1634:	18 95       	reti

00001636 <timer1_setup>:

void timer1_setup()
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = (0 << WGM11) | (0 << WGM10); // set WGM1 to 4, this clears timer counter on OCR1A
    163e:	e0 e8       	ldi	r30, 0x80	; 128
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	10 82       	st	Z, r1
	TCCR1B = (0 << WGM13) | (1 << WGM12) | (0 << CS12) | (1 << CS11) | (1 << CS10); // set rest of WGM1 and set CS1 to 3 (64 prescaler)
    1644:	e1 e8       	ldi	r30, 0x81	; 129
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	8b e0       	ldi	r24, 0x0B	; 11
    164a:	80 83       	st	Z, r24
	OCR1A = (uint16_t) 249; // want 1 ms timer, which is 1000 Hz. Must half this, since f_oc1a period is TWICE timer length, to that's 500 Hz. Therefore: i.e. (f_clk / (2 * prescaler * f_oc1a)) - 1 = (16000000 / (2 * 64 * 500)) - 1 = 249
    164c:	e8 e8       	ldi	r30, 0x88	; 136
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	89 ef       	ldi	r24, 0xF9	; 249
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	80 83       	st	Z, r24
	TIMSK1 = (1 << OCIE1A); // enabled interrupt on OCR1A match (TIMER1_COMPA_vect)
    1658:	ef e6       	ldi	r30, 0x6F	; 111
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	80 83       	st	Z, r24
}
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <__vector_19>:
  uart0_tx_idle = FALSE;
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02) | (1 << UDRIE0); // enable TX register empty interrupt
}

ISR(USART_UDRE_vect)
{
    1666:	1f 92       	push	r1
    1668:	0f 92       	push	r0
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	0f 92       	push	r0
    166e:	11 24       	eor	r1, r1
    1670:	2f 93       	push	r18
    1672:	3f 93       	push	r19
    1674:	4f 93       	push	r20
    1676:	5f 93       	push	r21
    1678:	6f 93       	push	r22
    167a:	7f 93       	push	r23
    167c:	8f 93       	push	r24
    167e:	9f 93       	push	r25
    1680:	af 93       	push	r26
    1682:	bf 93       	push	r27
    1684:	ef 93       	push	r30
    1686:	ff 93       	push	r31
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	if (payload_stream.tx_fifo.head != payload_stream.tx_fifo.tail)
    1690:	90 91 cc 02 	lds	r25, 0x02CC
    1694:	80 91 cd 02 	lds	r24, 0x02CD
    1698:	98 17       	cp	r25, r24
    169a:	e1 f0       	breq	.+56     	; 0x16d4 <__vector_19+0x6e>
	{
		// get byte to be transmitted from payload_stream.tx_fifo (more efficient to duplicate fifo_get_byte() code here)
		UDR0 = payload_stream.tx_fifo.buffer[payload_stream.tx_fifo.tail++];
    169c:	a6 ec       	ldi	r26, 0xC6	; 198
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	20 91 cf 02 	lds	r18, 0x02CF
    16a4:	30 91 d0 02 	lds	r19, 0x02D0
    16a8:	40 91 cd 02 	lds	r20, 0x02CD
    16ac:	84 2f       	mov	r24, r20
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	f9 01       	movw	r30, r18
    16b2:	e8 0f       	add	r30, r24
    16b4:	f9 1f       	adc	r31, r25
    16b6:	80 81       	ld	r24, Z
    16b8:	8c 93       	st	X, r24
    16ba:	84 2f       	mov	r24, r20
    16bc:	8f 5f       	subi	r24, 0xFF	; 255
    16be:	80 93 cd 02 	sts	0x02CD, r24
		if (payload_stream.tx_fifo.tail == payload_stream.tx_fifo.buffer_length)
    16c2:	90 91 cd 02 	lds	r25, 0x02CD
    16c6:	80 91 ce 02 	lds	r24, 0x02CE
    16ca:	98 17       	cp	r25, r24
    16cc:	01 f5       	brne	.+64     	; 0x170e <__vector_19+0xa8>
			payload_stream.tx_fifo.tail = 0;
    16ce:	10 92 cd 02 	sts	0x02CD, r1
    16d2:	1d c0       	rjmp	.+58     	; 0x170e <__vector_19+0xa8>
	}
	else if (sent_etx_token == FALSE)
    16d4:	80 91 22 03 	lds	r24, 0x0322
    16d8:	88 23       	and	r24, r24
    16da:	69 f4       	brne	.+26     	; 0x16f6 <__vector_19+0x90>
	{
		// send end of TX token byte - 9th bit must be high to flag this
		sent_etx_token = TRUE;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	80 93 22 03 	sts	0x0322, r24
		UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02) | (1 << UDRIE0) | (1 << TXB80); // set TXB80 high
    16e2:	e1 ec       	ldi	r30, 0xC1	; 193
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	8d eb       	ldi	r24, 0xBD	; 189
    16e8:	80 83       	st	Z, r24
		UDR0 = module_id;
    16ea:	e6 ec       	ldi	r30, 0xC6	; 198
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 91 c6 02 	lds	r24, 0x02C6
    16f2:	80 83       	st	Z, r24
    16f4:	0c c0       	rjmp	.+24     	; 0x170e <__vector_19+0xa8>
	}
	else
	{
		UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02); // disable TX register empty interrupt
    16f6:	e1 ec       	ldi	r30, 0xC1	; 193
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	8c e9       	ldi	r24, 0x9C	; 156
    16fc:	80 83       	st	Z, r24
		sent_etx_token = FALSE; // reset flag
    16fe:	10 92 22 03 	sts	0x0322, r1
		payload_tx_enable(FALSE); // disable payload TX
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	0e 94 a2 09 	call	0x1344	; 0x1344 <payload_tx_enable>
		uart0_tx_idle = TRUE;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	80 93 23 03 	sts	0x0323, r24
	}
}
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	ff 91       	pop	r31
    1714:	ef 91       	pop	r30
    1716:	bf 91       	pop	r27
    1718:	af 91       	pop	r26
    171a:	9f 91       	pop	r25
    171c:	8f 91       	pop	r24
    171e:	7f 91       	pop	r23
    1720:	6f 91       	pop	r22
    1722:	5f 91       	pop	r21
    1724:	4f 91       	pop	r20
    1726:	3f 91       	pop	r19
    1728:	2f 91       	pop	r18
    172a:	0f 90       	pop	r0
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	0f 90       	pop	r0
    1730:	1f 90       	pop	r1
    1732:	18 95       	reti

00001734 <__vector_18>:

ISR(USART_RX_vect)
{
    1734:	1f 92       	push	r1
    1736:	0f 92       	push	r0
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	0f 92       	push	r0
    173c:	11 24       	eor	r1, r1
    173e:	2f 93       	push	r18
    1740:	3f 93       	push	r19
    1742:	4f 93       	push	r20
    1744:	5f 93       	push	r21
    1746:	6f 93       	push	r22
    1748:	7f 93       	push	r23
    174a:	8f 93       	push	r24
    174c:	9f 93       	push	r25
    174e:	af 93       	push	r26
    1750:	bf 93       	push	r27
    1752:	ef 93       	push	r30
    1754:	ff 93       	push	r31
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	0f 92       	push	r0
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
	uint8_t rx_byte;
	
	if (UCSR0B & 0x02)
    1760:	e1 ec       	ldi	r30, 0xC1	; 193
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	88 2f       	mov	r24, r24
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	82 70       	andi	r24, 0x02	; 2
    176c:	90 70       	andi	r25, 0x00	; 0
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	69 f1       	breq	.+90     	; 0x17cc <__vector_18+0x98>
	{
		rx_byte = UDR0;
    1772:	e6 ec       	ldi	r30, 0xC6	; 198
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	89 83       	std	Y+1, r24	; 0x01
		
		if (((rx_byte & 0x7F) == module_id) || ((rx_byte & 0x7F) == MODULE_BROADCAST_ID))
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9c 01       	movw	r18, r24
    1782:	2f 77       	andi	r18, 0x7F	; 127
    1784:	30 70       	andi	r19, 0x00	; 0
    1786:	80 91 c6 02 	lds	r24, 0x02C6
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	28 17       	cp	r18, r24
    1790:	39 07       	cpc	r19, r25
    1792:	41 f0       	breq	.+16     	; 0x17a4 <__vector_18+0x70>
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	8f 77       	andi	r24, 0x7F	; 127
    179c:	90 70       	andi	r25, 0x00	; 0
    179e:	8f 37       	cpi	r24, 0x7F	; 127
    17a0:	91 05       	cpc	r25, r1
    17a2:	79 f4       	brne	.+30     	; 0x17c2 <__vector_18+0x8e>
		{
			// address is intended for this module
			UCSR0A = 0; // disable multi-processor comms mode, i.e. continue to receive next set of non-address RX data
    17a4:	e0 ec       	ldi	r30, 0xC0	; 192
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	10 82       	st	Z, r1
		
			if (rx_byte & 0x80)
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	88 23       	and	r24, r24
    17ae:	4c f5       	brge	.+82     	; 0x1802 <__vector_18+0xce>
			{
				// received a TX token
				
				packet_tx_request();
    17b0:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <packet_tx_request>
			
				if (uart0_tx_idle)
    17b4:	80 91 23 03 	lds	r24, 0x0323
    17b8:	88 23       	and	r24, r24
    17ba:	19 f1       	breq	.+70     	; 0x1802 <__vector_18+0xce>
					uart0_start_tx(); // start TX immediately (even if it's just a "nothing to TX" byte)
    17bc:	0e 94 15 0c 	call	0x182a	; 0x182a <uart0_start_tx>
    17c0:	20 c0       	rjmp	.+64     	; 0x1802 <__vector_18+0xce>
			}
		}
		else
			UCSR0A = (1 << MPCM0); // enable multi-processor comms mode, i.e. ignore subsequent RX data until next address byte (9th bit is high)
    17c2:	e0 ec       	ldi	r30, 0xC0	; 192
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	80 83       	st	Z, r24
    17ca:	1b c0       	rjmp	.+54     	; 0x1802 <__vector_18+0xce>
	}
	else
	{
		// add received byte to payload_stream.rx_fifo (more efficient to duplicate fifo_add_byte() code here)
		// since multi-processor comms mode used, assume this data is intended for this module
		payload_stream.rx_fifo.buffer[payload_stream.rx_fifo.head++] = UDR0;
    17cc:	20 91 ca 02 	lds	r18, 0x02CA
    17d0:	30 91 cb 02 	lds	r19, 0x02CB
    17d4:	40 91 c7 02 	lds	r20, 0x02C7
    17d8:	84 2f       	mov	r24, r20
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	d9 01       	movw	r26, r18
    17de:	a8 0f       	add	r26, r24
    17e0:	b9 1f       	adc	r27, r25
    17e2:	e6 ec       	ldi	r30, 0xC6	; 198
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8c 93       	st	X, r24
    17ea:	84 2f       	mov	r24, r20
    17ec:	8f 5f       	subi	r24, 0xFF	; 255
    17ee:	80 93 c7 02 	sts	0x02C7, r24
		if (payload_stream.rx_fifo.head == payload_stream.rx_fifo.buffer_length)
    17f2:	90 91 c7 02 	lds	r25, 0x02C7
    17f6:	80 91 c9 02 	lds	r24, 0x02C9
    17fa:	98 17       	cp	r25, r24
    17fc:	11 f4       	brne	.+4      	; 0x1802 <__vector_18+0xce>
			payload_stream.rx_fifo.head = 0;
    17fe:	10 92 c7 02 	sts	0x02C7, r1
	}
}
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	ff 91       	pop	r31
    180a:	ef 91       	pop	r30
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	7f 91       	pop	r23
    1816:	6f 91       	pop	r22
    1818:	5f 91       	pop	r21
    181a:	4f 91       	pop	r20
    181c:	3f 91       	pop	r19
    181e:	2f 91       	pop	r18
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	0f 90       	pop	r0
    1826:	1f 90       	pop	r1
    1828:	18 95       	reti

0000182a <uart0_start_tx>:
volatile boolean_t uart0_tx_idle;
volatile boolean_t sent_etx_token;

// only to be called if ((payload_stream.tx_fifo.head != payload_stream.tx_fifo.tail)&&(uart0_tx_idle))
static inline void uart0_start_tx()
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
	payload_tx_enable(TRUE); // enable payload TX
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	0e 94 a2 09 	call	0x1344	; 0x1344 <payload_tx_enable>
  uart0_tx_idle = FALSE;
    1838:	10 92 23 03 	sts	0x0323, r1
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02) | (1 << UDRIE0); // enable TX register empty interrupt
    183c:	e1 ec       	ldi	r30, 0xC1	; 193
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	8c eb       	ldi	r24, 0xBC	; 188
    1842:	80 83       	st	Z, r24
}
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <uart0_setup>:
			payload_stream.rx_fifo.head = 0;
	}
}

void uart0_setup()
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
	// set for 38400 baud assuming 16 MHz clock
	UBRR0H = 0x00;
    1852:	e5 ec       	ldi	r30, 0xC5	; 197
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	10 82       	st	Z, r1
	UBRR0L = 0x19;
    1858:	e4 ec       	ldi	r30, 0xC4	; 196
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	89 e1       	ldi	r24, 0x19	; 25
    185e:	80 83       	st	Z, r24
	
	UCSR0A = (1 << MPCM0); // disable double TX speed and enable multi-processor comms mode (i.e. ignore all RX data until address bit received (9th bit is high))
    1860:	e0 ec       	ldi	r30, 0xC0	; 192
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	80 83       	st	Z, r24
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02); // enable RX and TX and the RX interrupt (do not enable TX interrupt until data ready to send), set UCSZ02 high (for 9 bit character size)
    1868:	e1 ec       	ldi	r30, 0xC1	; 193
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8c e9       	ldi	r24, 0x9C	; 156
    186e:	80 83       	st	Z, r24
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // set as asynchronous, format as 9N1 (9, not 8, given UCSZ02 in UCSR0B)
    1870:	e2 ec       	ldi	r30, 0xC2	; 194
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	86 e0       	ldi	r24, 0x06	; 6
    1876:	80 83       	st	Z, r24

  uart0_tx_idle = TRUE;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	80 93 23 03 	sts	0x0323, r24
	sent_etx_token = FALSE;
    187e:	10 92 22 03 	sts	0x0322, r1
}
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <vprintf>:
    1888:	9c 01       	movw	r18, r24
    188a:	ab 01       	movw	r20, r22
    188c:	80 91 26 03 	lds	r24, 0x0326
    1890:	90 91 27 03 	lds	r25, 0x0327
    1894:	b9 01       	movw	r22, r18
    1896:	0e 94 4e 0c 	call	0x189c	; 0x189c <vfprintf>
    189a:	08 95       	ret

0000189c <vfprintf>:
    189c:	ab e0       	ldi	r26, 0x0B	; 11
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e4 e5       	ldi	r30, 0x54	; 84
    18a2:	fc e0       	ldi	r31, 0x0C	; 12
    18a4:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__prologue_saves__>
    18a8:	3c 01       	movw	r6, r24
    18aa:	2b 01       	movw	r4, r22
    18ac:	5a 01       	movw	r10, r20
    18ae:	fc 01       	movw	r30, r24
    18b0:	17 82       	std	Z+7, r1	; 0x07
    18b2:	16 82       	std	Z+6, r1	; 0x06
    18b4:	83 81       	ldd	r24, Z+3	; 0x03
    18b6:	81 fd       	sbrc	r24, 1
    18b8:	03 c0       	rjmp	.+6      	; 0x18c0 <vfprintf+0x24>
    18ba:	6f ef       	ldi	r22, 0xFF	; 255
    18bc:	7f ef       	ldi	r23, 0xFF	; 255
    18be:	c6 c1       	rjmp	.+908    	; 0x1c4c <vfprintf+0x3b0>
    18c0:	9a e0       	ldi	r25, 0x0A	; 10
    18c2:	89 2e       	mov	r8, r25
    18c4:	1e 01       	movw	r2, r28
    18c6:	08 94       	sec
    18c8:	21 1c       	adc	r2, r1
    18ca:	31 1c       	adc	r3, r1
    18cc:	f3 01       	movw	r30, r6
    18ce:	23 81       	ldd	r18, Z+3	; 0x03
    18d0:	f2 01       	movw	r30, r4
    18d2:	23 fd       	sbrc	r18, 3
    18d4:	85 91       	lpm	r24, Z+
    18d6:	23 ff       	sbrs	r18, 3
    18d8:	81 91       	ld	r24, Z+
    18da:	2f 01       	movw	r4, r30
    18dc:	88 23       	and	r24, r24
    18de:	09 f4       	brne	.+2      	; 0x18e2 <vfprintf+0x46>
    18e0:	b2 c1       	rjmp	.+868    	; 0x1c46 <vfprintf+0x3aa>
    18e2:	85 32       	cpi	r24, 0x25	; 37
    18e4:	39 f4       	brne	.+14     	; 0x18f4 <vfprintf+0x58>
    18e6:	23 fd       	sbrc	r18, 3
    18e8:	85 91       	lpm	r24, Z+
    18ea:	23 ff       	sbrs	r18, 3
    18ec:	81 91       	ld	r24, Z+
    18ee:	2f 01       	movw	r4, r30
    18f0:	85 32       	cpi	r24, 0x25	; 37
    18f2:	29 f4       	brne	.+10     	; 0x18fe <vfprintf+0x62>
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	b3 01       	movw	r22, r6
    18f8:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    18fc:	e7 cf       	rjmp	.-50     	; 0x18cc <vfprintf+0x30>
    18fe:	98 2f       	mov	r25, r24
    1900:	ff 24       	eor	r15, r15
    1902:	ee 24       	eor	r14, r14
    1904:	99 24       	eor	r9, r9
    1906:	ff e1       	ldi	r31, 0x1F	; 31
    1908:	ff 15       	cp	r31, r15
    190a:	d0 f0       	brcs	.+52     	; 0x1940 <vfprintf+0xa4>
    190c:	9b 32       	cpi	r25, 0x2B	; 43
    190e:	69 f0       	breq	.+26     	; 0x192a <vfprintf+0x8e>
    1910:	9c 32       	cpi	r25, 0x2C	; 44
    1912:	28 f4       	brcc	.+10     	; 0x191e <vfprintf+0x82>
    1914:	90 32       	cpi	r25, 0x20	; 32
    1916:	59 f0       	breq	.+22     	; 0x192e <vfprintf+0x92>
    1918:	93 32       	cpi	r25, 0x23	; 35
    191a:	91 f4       	brne	.+36     	; 0x1940 <vfprintf+0xa4>
    191c:	0e c0       	rjmp	.+28     	; 0x193a <vfprintf+0x9e>
    191e:	9d 32       	cpi	r25, 0x2D	; 45
    1920:	49 f0       	breq	.+18     	; 0x1934 <vfprintf+0x98>
    1922:	90 33       	cpi	r25, 0x30	; 48
    1924:	69 f4       	brne	.+26     	; 0x1940 <vfprintf+0xa4>
    1926:	41 e0       	ldi	r20, 0x01	; 1
    1928:	24 c0       	rjmp	.+72     	; 0x1972 <vfprintf+0xd6>
    192a:	52 e0       	ldi	r21, 0x02	; 2
    192c:	f5 2a       	or	r15, r21
    192e:	84 e0       	ldi	r24, 0x04	; 4
    1930:	f8 2a       	or	r15, r24
    1932:	28 c0       	rjmp	.+80     	; 0x1984 <vfprintf+0xe8>
    1934:	98 e0       	ldi	r25, 0x08	; 8
    1936:	f9 2a       	or	r15, r25
    1938:	25 c0       	rjmp	.+74     	; 0x1984 <vfprintf+0xe8>
    193a:	e0 e1       	ldi	r30, 0x10	; 16
    193c:	fe 2a       	or	r15, r30
    193e:	22 c0       	rjmp	.+68     	; 0x1984 <vfprintf+0xe8>
    1940:	f7 fc       	sbrc	r15, 7
    1942:	29 c0       	rjmp	.+82     	; 0x1996 <vfprintf+0xfa>
    1944:	89 2f       	mov	r24, r25
    1946:	80 53       	subi	r24, 0x30	; 48
    1948:	8a 30       	cpi	r24, 0x0A	; 10
    194a:	70 f4       	brcc	.+28     	; 0x1968 <vfprintf+0xcc>
    194c:	f6 fe       	sbrs	r15, 6
    194e:	05 c0       	rjmp	.+10     	; 0x195a <vfprintf+0xbe>
    1950:	98 9c       	mul	r9, r8
    1952:	90 2c       	mov	r9, r0
    1954:	11 24       	eor	r1, r1
    1956:	98 0e       	add	r9, r24
    1958:	15 c0       	rjmp	.+42     	; 0x1984 <vfprintf+0xe8>
    195a:	e8 9c       	mul	r14, r8
    195c:	e0 2c       	mov	r14, r0
    195e:	11 24       	eor	r1, r1
    1960:	e8 0e       	add	r14, r24
    1962:	f0 e2       	ldi	r31, 0x20	; 32
    1964:	ff 2a       	or	r15, r31
    1966:	0e c0       	rjmp	.+28     	; 0x1984 <vfprintf+0xe8>
    1968:	9e 32       	cpi	r25, 0x2E	; 46
    196a:	29 f4       	brne	.+10     	; 0x1976 <vfprintf+0xda>
    196c:	f6 fc       	sbrc	r15, 6
    196e:	6b c1       	rjmp	.+726    	; 0x1c46 <vfprintf+0x3aa>
    1970:	40 e4       	ldi	r20, 0x40	; 64
    1972:	f4 2a       	or	r15, r20
    1974:	07 c0       	rjmp	.+14     	; 0x1984 <vfprintf+0xe8>
    1976:	9c 36       	cpi	r25, 0x6C	; 108
    1978:	19 f4       	brne	.+6      	; 0x1980 <vfprintf+0xe4>
    197a:	50 e8       	ldi	r21, 0x80	; 128
    197c:	f5 2a       	or	r15, r21
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <vfprintf+0xe8>
    1980:	98 36       	cpi	r25, 0x68	; 104
    1982:	49 f4       	brne	.+18     	; 0x1996 <vfprintf+0xfa>
    1984:	f2 01       	movw	r30, r4
    1986:	23 fd       	sbrc	r18, 3
    1988:	95 91       	lpm	r25, Z+
    198a:	23 ff       	sbrs	r18, 3
    198c:	91 91       	ld	r25, Z+
    198e:	2f 01       	movw	r4, r30
    1990:	99 23       	and	r25, r25
    1992:	09 f0       	breq	.+2      	; 0x1996 <vfprintf+0xfa>
    1994:	b8 cf       	rjmp	.-144    	; 0x1906 <vfprintf+0x6a>
    1996:	89 2f       	mov	r24, r25
    1998:	85 54       	subi	r24, 0x45	; 69
    199a:	83 30       	cpi	r24, 0x03	; 3
    199c:	18 f0       	brcs	.+6      	; 0x19a4 <vfprintf+0x108>
    199e:	80 52       	subi	r24, 0x20	; 32
    19a0:	83 30       	cpi	r24, 0x03	; 3
    19a2:	38 f4       	brcc	.+14     	; 0x19b2 <vfprintf+0x116>
    19a4:	44 e0       	ldi	r20, 0x04	; 4
    19a6:	50 e0       	ldi	r21, 0x00	; 0
    19a8:	a4 0e       	add	r10, r20
    19aa:	b5 1e       	adc	r11, r21
    19ac:	5f e3       	ldi	r21, 0x3F	; 63
    19ae:	59 83       	std	Y+1, r21	; 0x01
    19b0:	0f c0       	rjmp	.+30     	; 0x19d0 <vfprintf+0x134>
    19b2:	93 36       	cpi	r25, 0x63	; 99
    19b4:	31 f0       	breq	.+12     	; 0x19c2 <vfprintf+0x126>
    19b6:	93 37       	cpi	r25, 0x73	; 115
    19b8:	79 f0       	breq	.+30     	; 0x19d8 <vfprintf+0x13c>
    19ba:	93 35       	cpi	r25, 0x53	; 83
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <vfprintf+0x124>
    19be:	56 c0       	rjmp	.+172    	; 0x1a6c <vfprintf+0x1d0>
    19c0:	20 c0       	rjmp	.+64     	; 0x1a02 <vfprintf+0x166>
    19c2:	f5 01       	movw	r30, r10
    19c4:	80 81       	ld	r24, Z
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	42 e0       	ldi	r20, 0x02	; 2
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	a4 0e       	add	r10, r20
    19ce:	b5 1e       	adc	r11, r21
    19d0:	61 01       	movw	r12, r2
    19d2:	01 e0       	ldi	r16, 0x01	; 1
    19d4:	10 e0       	ldi	r17, 0x00	; 0
    19d6:	12 c0       	rjmp	.+36     	; 0x19fc <vfprintf+0x160>
    19d8:	f5 01       	movw	r30, r10
    19da:	c0 80       	ld	r12, Z
    19dc:	d1 80       	ldd	r13, Z+1	; 0x01
    19de:	f6 fc       	sbrc	r15, 6
    19e0:	03 c0       	rjmp	.+6      	; 0x19e8 <vfprintf+0x14c>
    19e2:	6f ef       	ldi	r22, 0xFF	; 255
    19e4:	7f ef       	ldi	r23, 0xFF	; 255
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <vfprintf+0x150>
    19e8:	69 2d       	mov	r22, r9
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	42 e0       	ldi	r20, 0x02	; 2
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	a4 0e       	add	r10, r20
    19f2:	b5 1e       	adc	r11, r21
    19f4:	c6 01       	movw	r24, r12
    19f6:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <strnlen>
    19fa:	8c 01       	movw	r16, r24
    19fc:	5f e7       	ldi	r21, 0x7F	; 127
    19fe:	f5 22       	and	r15, r21
    1a00:	14 c0       	rjmp	.+40     	; 0x1a2a <vfprintf+0x18e>
    1a02:	f5 01       	movw	r30, r10
    1a04:	c0 80       	ld	r12, Z
    1a06:	d1 80       	ldd	r13, Z+1	; 0x01
    1a08:	f6 fc       	sbrc	r15, 6
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <vfprintf+0x176>
    1a0c:	6f ef       	ldi	r22, 0xFF	; 255
    1a0e:	7f ef       	ldi	r23, 0xFF	; 255
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <vfprintf+0x17a>
    1a12:	69 2d       	mov	r22, r9
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	42 e0       	ldi	r20, 0x02	; 2
    1a18:	50 e0       	ldi	r21, 0x00	; 0
    1a1a:	a4 0e       	add	r10, r20
    1a1c:	b5 1e       	adc	r11, r21
    1a1e:	c6 01       	movw	r24, r12
    1a20:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <strnlen_P>
    1a24:	8c 01       	movw	r16, r24
    1a26:	50 e8       	ldi	r21, 0x80	; 128
    1a28:	f5 2a       	or	r15, r21
    1a2a:	f3 fe       	sbrs	r15, 3
    1a2c:	07 c0       	rjmp	.+14     	; 0x1a3c <vfprintf+0x1a0>
    1a2e:	1a c0       	rjmp	.+52     	; 0x1a64 <vfprintf+0x1c8>
    1a30:	80 e2       	ldi	r24, 0x20	; 32
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	b3 01       	movw	r22, r6
    1a36:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    1a3a:	ea 94       	dec	r14
    1a3c:	8e 2d       	mov	r24, r14
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	08 17       	cp	r16, r24
    1a42:	19 07       	cpc	r17, r25
    1a44:	a8 f3       	brcs	.-22     	; 0x1a30 <vfprintf+0x194>
    1a46:	0e c0       	rjmp	.+28     	; 0x1a64 <vfprintf+0x1c8>
    1a48:	f6 01       	movw	r30, r12
    1a4a:	f7 fc       	sbrc	r15, 7
    1a4c:	85 91       	lpm	r24, Z+
    1a4e:	f7 fe       	sbrs	r15, 7
    1a50:	81 91       	ld	r24, Z+
    1a52:	6f 01       	movw	r12, r30
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	b3 01       	movw	r22, r6
    1a58:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    1a5c:	e1 10       	cpse	r14, r1
    1a5e:	ea 94       	dec	r14
    1a60:	01 50       	subi	r16, 0x01	; 1
    1a62:	10 40       	sbci	r17, 0x00	; 0
    1a64:	01 15       	cp	r16, r1
    1a66:	11 05       	cpc	r17, r1
    1a68:	79 f7       	brne	.-34     	; 0x1a48 <vfprintf+0x1ac>
    1a6a:	ea c0       	rjmp	.+468    	; 0x1c40 <vfprintf+0x3a4>
    1a6c:	94 36       	cpi	r25, 0x64	; 100
    1a6e:	11 f0       	breq	.+4      	; 0x1a74 <vfprintf+0x1d8>
    1a70:	99 36       	cpi	r25, 0x69	; 105
    1a72:	69 f5       	brne	.+90     	; 0x1ace <vfprintf+0x232>
    1a74:	f7 fe       	sbrs	r15, 7
    1a76:	08 c0       	rjmp	.+16     	; 0x1a88 <vfprintf+0x1ec>
    1a78:	f5 01       	movw	r30, r10
    1a7a:	20 81       	ld	r18, Z
    1a7c:	31 81       	ldd	r19, Z+1	; 0x01
    1a7e:	42 81       	ldd	r20, Z+2	; 0x02
    1a80:	53 81       	ldd	r21, Z+3	; 0x03
    1a82:	84 e0       	ldi	r24, 0x04	; 4
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0a c0       	rjmp	.+20     	; 0x1a9c <vfprintf+0x200>
    1a88:	f5 01       	movw	r30, r10
    1a8a:	80 81       	ld	r24, Z
    1a8c:	91 81       	ldd	r25, Z+1	; 0x01
    1a8e:	9c 01       	movw	r18, r24
    1a90:	44 27       	eor	r20, r20
    1a92:	37 fd       	sbrc	r19, 7
    1a94:	40 95       	com	r20
    1a96:	54 2f       	mov	r21, r20
    1a98:	82 e0       	ldi	r24, 0x02	; 2
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a8 0e       	add	r10, r24
    1a9e:	b9 1e       	adc	r11, r25
    1aa0:	9f e6       	ldi	r25, 0x6F	; 111
    1aa2:	f9 22       	and	r15, r25
    1aa4:	57 ff       	sbrs	r21, 7
    1aa6:	09 c0       	rjmp	.+18     	; 0x1aba <vfprintf+0x21e>
    1aa8:	50 95       	com	r21
    1aaa:	40 95       	com	r20
    1aac:	30 95       	com	r19
    1aae:	21 95       	neg	r18
    1ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab6:	e0 e8       	ldi	r30, 0x80	; 128
    1ab8:	fe 2a       	or	r15, r30
    1aba:	ca 01       	movw	r24, r20
    1abc:	b9 01       	movw	r22, r18
    1abe:	a1 01       	movw	r20, r2
    1ac0:	2a e0       	ldi	r18, 0x0A	; 10
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__ultoa_invert>
    1ac8:	d8 2e       	mov	r13, r24
    1aca:	d2 18       	sub	r13, r2
    1acc:	40 c0       	rjmp	.+128    	; 0x1b4e <vfprintf+0x2b2>
    1ace:	95 37       	cpi	r25, 0x75	; 117
    1ad0:	29 f4       	brne	.+10     	; 0x1adc <vfprintf+0x240>
    1ad2:	1f 2d       	mov	r17, r15
    1ad4:	1f 7e       	andi	r17, 0xEF	; 239
    1ad6:	2a e0       	ldi	r18, 0x0A	; 10
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	1d c0       	rjmp	.+58     	; 0x1b16 <vfprintf+0x27a>
    1adc:	1f 2d       	mov	r17, r15
    1ade:	19 7f       	andi	r17, 0xF9	; 249
    1ae0:	9f 36       	cpi	r25, 0x6F	; 111
    1ae2:	61 f0       	breq	.+24     	; 0x1afc <vfprintf+0x260>
    1ae4:	90 37       	cpi	r25, 0x70	; 112
    1ae6:	20 f4       	brcc	.+8      	; 0x1af0 <vfprintf+0x254>
    1ae8:	98 35       	cpi	r25, 0x58	; 88
    1aea:	09 f0       	breq	.+2      	; 0x1aee <vfprintf+0x252>
    1aec:	ac c0       	rjmp	.+344    	; 0x1c46 <vfprintf+0x3aa>
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <vfprintf+0x272>
    1af0:	90 37       	cpi	r25, 0x70	; 112
    1af2:	39 f0       	breq	.+14     	; 0x1b02 <vfprintf+0x266>
    1af4:	98 37       	cpi	r25, 0x78	; 120
    1af6:	09 f0       	breq	.+2      	; 0x1afa <vfprintf+0x25e>
    1af8:	a6 c0       	rjmp	.+332    	; 0x1c46 <vfprintf+0x3aa>
    1afa:	04 c0       	rjmp	.+8      	; 0x1b04 <vfprintf+0x268>
    1afc:	28 e0       	ldi	r18, 0x08	; 8
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	0a c0       	rjmp	.+20     	; 0x1b16 <vfprintf+0x27a>
    1b02:	10 61       	ori	r17, 0x10	; 16
    1b04:	14 fd       	sbrc	r17, 4
    1b06:	14 60       	ori	r17, 0x04	; 4
    1b08:	20 e1       	ldi	r18, 0x10	; 16
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <vfprintf+0x27a>
    1b0e:	14 fd       	sbrc	r17, 4
    1b10:	16 60       	ori	r17, 0x06	; 6
    1b12:	20 e1       	ldi	r18, 0x10	; 16
    1b14:	32 e0       	ldi	r19, 0x02	; 2
    1b16:	17 ff       	sbrs	r17, 7
    1b18:	08 c0       	rjmp	.+16     	; 0x1b2a <vfprintf+0x28e>
    1b1a:	f5 01       	movw	r30, r10
    1b1c:	60 81       	ld	r22, Z
    1b1e:	71 81       	ldd	r23, Z+1	; 0x01
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	93 81       	ldd	r25, Z+3	; 0x03
    1b24:	44 e0       	ldi	r20, 0x04	; 4
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	08 c0       	rjmp	.+16     	; 0x1b3a <vfprintf+0x29e>
    1b2a:	f5 01       	movw	r30, r10
    1b2c:	80 81       	ld	r24, Z
    1b2e:	91 81       	ldd	r25, Z+1	; 0x01
    1b30:	bc 01       	movw	r22, r24
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	42 e0       	ldi	r20, 0x02	; 2
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	a4 0e       	add	r10, r20
    1b3c:	b5 1e       	adc	r11, r21
    1b3e:	a1 01       	movw	r20, r2
    1b40:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__ultoa_invert>
    1b44:	d8 2e       	mov	r13, r24
    1b46:	d2 18       	sub	r13, r2
    1b48:	8f e7       	ldi	r24, 0x7F	; 127
    1b4a:	f8 2e       	mov	r15, r24
    1b4c:	f1 22       	and	r15, r17
    1b4e:	f6 fe       	sbrs	r15, 6
    1b50:	0b c0       	rjmp	.+22     	; 0x1b68 <vfprintf+0x2cc>
    1b52:	5e ef       	ldi	r21, 0xFE	; 254
    1b54:	f5 22       	and	r15, r21
    1b56:	d9 14       	cp	r13, r9
    1b58:	38 f4       	brcc	.+14     	; 0x1b68 <vfprintf+0x2cc>
    1b5a:	f4 fe       	sbrs	r15, 4
    1b5c:	07 c0       	rjmp	.+14     	; 0x1b6c <vfprintf+0x2d0>
    1b5e:	f2 fc       	sbrc	r15, 2
    1b60:	05 c0       	rjmp	.+10     	; 0x1b6c <vfprintf+0x2d0>
    1b62:	8f ee       	ldi	r24, 0xEF	; 239
    1b64:	f8 22       	and	r15, r24
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <vfprintf+0x2d0>
    1b68:	1d 2d       	mov	r17, r13
    1b6a:	01 c0       	rjmp	.+2      	; 0x1b6e <vfprintf+0x2d2>
    1b6c:	19 2d       	mov	r17, r9
    1b6e:	f4 fe       	sbrs	r15, 4
    1b70:	0d c0       	rjmp	.+26     	; 0x1b8c <vfprintf+0x2f0>
    1b72:	fe 01       	movw	r30, r28
    1b74:	ed 0d       	add	r30, r13
    1b76:	f1 1d       	adc	r31, r1
    1b78:	80 81       	ld	r24, Z
    1b7a:	80 33       	cpi	r24, 0x30	; 48
    1b7c:	19 f4       	brne	.+6      	; 0x1b84 <vfprintf+0x2e8>
    1b7e:	99 ee       	ldi	r25, 0xE9	; 233
    1b80:	f9 22       	and	r15, r25
    1b82:	08 c0       	rjmp	.+16     	; 0x1b94 <vfprintf+0x2f8>
    1b84:	1f 5f       	subi	r17, 0xFF	; 255
    1b86:	f2 fe       	sbrs	r15, 2
    1b88:	05 c0       	rjmp	.+10     	; 0x1b94 <vfprintf+0x2f8>
    1b8a:	03 c0       	rjmp	.+6      	; 0x1b92 <vfprintf+0x2f6>
    1b8c:	8f 2d       	mov	r24, r15
    1b8e:	86 78       	andi	r24, 0x86	; 134
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <vfprintf+0x2f8>
    1b92:	1f 5f       	subi	r17, 0xFF	; 255
    1b94:	0f 2d       	mov	r16, r15
    1b96:	f3 fc       	sbrc	r15, 3
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <vfprintf+0x326>
    1b9a:	f0 fe       	sbrs	r15, 0
    1b9c:	0f c0       	rjmp	.+30     	; 0x1bbc <vfprintf+0x320>
    1b9e:	1e 15       	cp	r17, r14
    1ba0:	10 f0       	brcs	.+4      	; 0x1ba6 <vfprintf+0x30a>
    1ba2:	9d 2c       	mov	r9, r13
    1ba4:	0b c0       	rjmp	.+22     	; 0x1bbc <vfprintf+0x320>
    1ba6:	9d 2c       	mov	r9, r13
    1ba8:	9e 0c       	add	r9, r14
    1baa:	91 1a       	sub	r9, r17
    1bac:	1e 2d       	mov	r17, r14
    1bae:	06 c0       	rjmp	.+12     	; 0x1bbc <vfprintf+0x320>
    1bb0:	80 e2       	ldi	r24, 0x20	; 32
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	b3 01       	movw	r22, r6
    1bb6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    1bba:	1f 5f       	subi	r17, 0xFF	; 255
    1bbc:	1e 15       	cp	r17, r14
    1bbe:	c0 f3       	brcs	.-16     	; 0x1bb0 <vfprintf+0x314>
    1bc0:	04 c0       	rjmp	.+8      	; 0x1bca <vfprintf+0x32e>
    1bc2:	1e 15       	cp	r17, r14
    1bc4:	10 f4       	brcc	.+4      	; 0x1bca <vfprintf+0x32e>
    1bc6:	e1 1a       	sub	r14, r17
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <vfprintf+0x330>
    1bca:	ee 24       	eor	r14, r14
    1bcc:	04 ff       	sbrs	r16, 4
    1bce:	0f c0       	rjmp	.+30     	; 0x1bee <vfprintf+0x352>
    1bd0:	80 e3       	ldi	r24, 0x30	; 48
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	b3 01       	movw	r22, r6
    1bd6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    1bda:	02 ff       	sbrs	r16, 2
    1bdc:	1d c0       	rjmp	.+58     	; 0x1c18 <vfprintf+0x37c>
    1bde:	01 fd       	sbrc	r16, 1
    1be0:	03 c0       	rjmp	.+6      	; 0x1be8 <vfprintf+0x34c>
    1be2:	88 e7       	ldi	r24, 0x78	; 120
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e c0       	rjmp	.+28     	; 0x1c04 <vfprintf+0x368>
    1be8:	88 e5       	ldi	r24, 0x58	; 88
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0b c0       	rjmp	.+22     	; 0x1c04 <vfprintf+0x368>
    1bee:	80 2f       	mov	r24, r16
    1bf0:	86 78       	andi	r24, 0x86	; 134
    1bf2:	91 f0       	breq	.+36     	; 0x1c18 <vfprintf+0x37c>
    1bf4:	01 ff       	sbrs	r16, 1
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <vfprintf+0x360>
    1bf8:	8b e2       	ldi	r24, 0x2B	; 43
    1bfa:	01 c0       	rjmp	.+2      	; 0x1bfe <vfprintf+0x362>
    1bfc:	80 e2       	ldi	r24, 0x20	; 32
    1bfe:	f7 fc       	sbrc	r15, 7
    1c00:	8d e2       	ldi	r24, 0x2D	; 45
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	b3 01       	movw	r22, r6
    1c06:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    1c0a:	06 c0       	rjmp	.+12     	; 0x1c18 <vfprintf+0x37c>
    1c0c:	80 e3       	ldi	r24, 0x30	; 48
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	b3 01       	movw	r22, r6
    1c12:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    1c16:	9a 94       	dec	r9
    1c18:	d9 14       	cp	r13, r9
    1c1a:	c0 f3       	brcs	.-16     	; 0x1c0c <vfprintf+0x370>
    1c1c:	da 94       	dec	r13
    1c1e:	f1 01       	movw	r30, r2
    1c20:	ed 0d       	add	r30, r13
    1c22:	f1 1d       	adc	r31, r1
    1c24:	80 81       	ld	r24, Z
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	b3 01       	movw	r22, r6
    1c2a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    1c2e:	dd 20       	and	r13, r13
    1c30:	a9 f7       	brne	.-22     	; 0x1c1c <vfprintf+0x380>
    1c32:	06 c0       	rjmp	.+12     	; 0x1c40 <vfprintf+0x3a4>
    1c34:	80 e2       	ldi	r24, 0x20	; 32
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	b3 01       	movw	r22, r6
    1c3a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    1c3e:	ea 94       	dec	r14
    1c40:	ee 20       	and	r14, r14
    1c42:	c1 f7       	brne	.-16     	; 0x1c34 <vfprintf+0x398>
    1c44:	43 ce       	rjmp	.-890    	; 0x18cc <vfprintf+0x30>
    1c46:	f3 01       	movw	r30, r6
    1c48:	66 81       	ldd	r22, Z+6	; 0x06
    1c4a:	77 81       	ldd	r23, Z+7	; 0x07
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	2b 96       	adiw	r28, 0x0b	; 11
    1c50:	e2 e1       	ldi	r30, 0x12	; 18
    1c52:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__epilogue_restores__>

00001c56 <__eerd_byte_m168>:
    1c56:	f9 99       	sbic	0x1f, 1	; 31
    1c58:	fe cf       	rjmp	.-4      	; 0x1c56 <__eerd_byte_m168>
    1c5a:	92 bd       	out	0x22, r25	; 34
    1c5c:	81 bd       	out	0x21, r24	; 33
    1c5e:	f8 9a       	sbi	0x1f, 0	; 31
    1c60:	99 27       	eor	r25, r25
    1c62:	80 b5       	in	r24, 0x20	; 32
    1c64:	08 95       	ret

00001c66 <__eewr_byte_m168>:
    1c66:	26 2f       	mov	r18, r22

00001c68 <__eewr_r18_m168>:
    1c68:	f9 99       	sbic	0x1f, 1	; 31
    1c6a:	fe cf       	rjmp	.-4      	; 0x1c68 <__eewr_r18_m168>
    1c6c:	1f ba       	out	0x1f, r1	; 31
    1c6e:	92 bd       	out	0x22, r25	; 34
    1c70:	81 bd       	out	0x21, r24	; 33
    1c72:	20 bd       	out	0x20, r18	; 32
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	fa 9a       	sbi	0x1f, 2	; 31
    1c7a:	f9 9a       	sbi	0x1f, 1	; 31
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	08 95       	ret

00001c82 <strnlen_P>:
    1c82:	fc 01       	movw	r30, r24
    1c84:	05 90       	lpm	r0, Z+
    1c86:	61 50       	subi	r22, 0x01	; 1
    1c88:	70 40       	sbci	r23, 0x00	; 0
    1c8a:	01 10       	cpse	r0, r1
    1c8c:	d8 f7       	brcc	.-10     	; 0x1c84 <strnlen_P+0x2>
    1c8e:	80 95       	com	r24
    1c90:	90 95       	com	r25
    1c92:	8e 0f       	add	r24, r30
    1c94:	9f 1f       	adc	r25, r31
    1c96:	08 95       	ret

00001c98 <strnlen>:
    1c98:	fc 01       	movw	r30, r24
    1c9a:	61 50       	subi	r22, 0x01	; 1
    1c9c:	70 40       	sbci	r23, 0x00	; 0
    1c9e:	01 90       	ld	r0, Z+
    1ca0:	01 10       	cpse	r0, r1
    1ca2:	d8 f7       	brcc	.-10     	; 0x1c9a <strnlen+0x2>
    1ca4:	80 95       	com	r24
    1ca6:	90 95       	com	r25
    1ca8:	8e 0f       	add	r24, r30
    1caa:	9f 1f       	adc	r25, r31
    1cac:	08 95       	ret

00001cae <fputc>:
    1cae:	0f 93       	push	r16
    1cb0:	1f 93       	push	r17
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	8c 01       	movw	r16, r24
    1cb8:	eb 01       	movw	r28, r22
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	81 ff       	sbrs	r24, 1
    1cbe:	1b c0       	rjmp	.+54     	; 0x1cf6 <fputc+0x48>
    1cc0:	82 ff       	sbrs	r24, 2
    1cc2:	0d c0       	rjmp	.+26     	; 0x1cde <fputc+0x30>
    1cc4:	2e 81       	ldd	r18, Y+6	; 0x06
    1cc6:	3f 81       	ldd	r19, Y+7	; 0x07
    1cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ccc:	28 17       	cp	r18, r24
    1cce:	39 07       	cpc	r19, r25
    1cd0:	64 f4       	brge	.+24     	; 0x1cea <fputc+0x3c>
    1cd2:	e8 81       	ld	r30, Y
    1cd4:	f9 81       	ldd	r31, Y+1	; 0x01
    1cd6:	01 93       	st	Z+, r16
    1cd8:	f9 83       	std	Y+1, r31	; 0x01
    1cda:	e8 83       	st	Y, r30
    1cdc:	06 c0       	rjmp	.+12     	; 0x1cea <fputc+0x3c>
    1cde:	e8 85       	ldd	r30, Y+8	; 0x08
    1ce0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ce2:	80 2f       	mov	r24, r16
    1ce4:	09 95       	icall
    1ce6:	89 2b       	or	r24, r25
    1ce8:	31 f4       	brne	.+12     	; 0x1cf6 <fputc+0x48>
    1cea:	8e 81       	ldd	r24, Y+6	; 0x06
    1cec:	9f 81       	ldd	r25, Y+7	; 0x07
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	9f 83       	std	Y+7, r25	; 0x07
    1cf2:	8e 83       	std	Y+6, r24	; 0x06
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <fputc+0x4c>
    1cf6:	0f ef       	ldi	r16, 0xFF	; 255
    1cf8:	1f ef       	ldi	r17, 0xFF	; 255
    1cfa:	c8 01       	movw	r24, r16
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	08 95       	ret

00001d06 <__ultoa_invert>:
    1d06:	fa 01       	movw	r30, r20
    1d08:	aa 27       	eor	r26, r26
    1d0a:	28 30       	cpi	r18, 0x08	; 8
    1d0c:	51 f1       	breq	.+84     	; 0x1d62 <__ultoa_invert+0x5c>
    1d0e:	20 31       	cpi	r18, 0x10	; 16
    1d10:	81 f1       	breq	.+96     	; 0x1d72 <__ultoa_invert+0x6c>
    1d12:	e8 94       	clt
    1d14:	6f 93       	push	r22
    1d16:	6e 7f       	andi	r22, 0xFE	; 254
    1d18:	6e 5f       	subi	r22, 0xFE	; 254
    1d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d20:	af 4f       	sbci	r26, 0xFF	; 255
    1d22:	b1 e0       	ldi	r27, 0x01	; 1
    1d24:	3e d0       	rcall	.+124    	; 0x1da2 <__ultoa_invert+0x9c>
    1d26:	b4 e0       	ldi	r27, 0x04	; 4
    1d28:	3c d0       	rcall	.+120    	; 0x1da2 <__ultoa_invert+0x9c>
    1d2a:	67 0f       	add	r22, r23
    1d2c:	78 1f       	adc	r23, r24
    1d2e:	89 1f       	adc	r24, r25
    1d30:	9a 1f       	adc	r25, r26
    1d32:	a1 1d       	adc	r26, r1
    1d34:	68 0f       	add	r22, r24
    1d36:	79 1f       	adc	r23, r25
    1d38:	8a 1f       	adc	r24, r26
    1d3a:	91 1d       	adc	r25, r1
    1d3c:	a1 1d       	adc	r26, r1
    1d3e:	6a 0f       	add	r22, r26
    1d40:	71 1d       	adc	r23, r1
    1d42:	81 1d       	adc	r24, r1
    1d44:	91 1d       	adc	r25, r1
    1d46:	a1 1d       	adc	r26, r1
    1d48:	20 d0       	rcall	.+64     	; 0x1d8a <__ultoa_invert+0x84>
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <__ultoa_invert+0x48>
    1d4c:	68 94       	set
    1d4e:	3f 91       	pop	r19
    1d50:	2a e0       	ldi	r18, 0x0A	; 10
    1d52:	26 9f       	mul	r18, r22
    1d54:	11 24       	eor	r1, r1
    1d56:	30 19       	sub	r19, r0
    1d58:	30 5d       	subi	r19, 0xD0	; 208
    1d5a:	31 93       	st	Z+, r19
    1d5c:	de f6       	brtc	.-74     	; 0x1d14 <__ultoa_invert+0xe>
    1d5e:	cf 01       	movw	r24, r30
    1d60:	08 95       	ret
    1d62:	46 2f       	mov	r20, r22
    1d64:	47 70       	andi	r20, 0x07	; 7
    1d66:	40 5d       	subi	r20, 0xD0	; 208
    1d68:	41 93       	st	Z+, r20
    1d6a:	b3 e0       	ldi	r27, 0x03	; 3
    1d6c:	0f d0       	rcall	.+30     	; 0x1d8c <__ultoa_invert+0x86>
    1d6e:	c9 f7       	brne	.-14     	; 0x1d62 <__ultoa_invert+0x5c>
    1d70:	f6 cf       	rjmp	.-20     	; 0x1d5e <__ultoa_invert+0x58>
    1d72:	46 2f       	mov	r20, r22
    1d74:	4f 70       	andi	r20, 0x0F	; 15
    1d76:	40 5d       	subi	r20, 0xD0	; 208
    1d78:	4a 33       	cpi	r20, 0x3A	; 58
    1d7a:	18 f0       	brcs	.+6      	; 0x1d82 <__ultoa_invert+0x7c>
    1d7c:	49 5d       	subi	r20, 0xD9	; 217
    1d7e:	31 fd       	sbrc	r19, 1
    1d80:	40 52       	subi	r20, 0x20	; 32
    1d82:	41 93       	st	Z+, r20
    1d84:	02 d0       	rcall	.+4      	; 0x1d8a <__ultoa_invert+0x84>
    1d86:	a9 f7       	brne	.-22     	; 0x1d72 <__ultoa_invert+0x6c>
    1d88:	ea cf       	rjmp	.-44     	; 0x1d5e <__ultoa_invert+0x58>
    1d8a:	b4 e0       	ldi	r27, 0x04	; 4
    1d8c:	a6 95       	lsr	r26
    1d8e:	97 95       	ror	r25
    1d90:	87 95       	ror	r24
    1d92:	77 95       	ror	r23
    1d94:	67 95       	ror	r22
    1d96:	ba 95       	dec	r27
    1d98:	c9 f7       	brne	.-14     	; 0x1d8c <__ultoa_invert+0x86>
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	61 05       	cpc	r22, r1
    1d9e:	71 05       	cpc	r23, r1
    1da0:	08 95       	ret
    1da2:	9b 01       	movw	r18, r22
    1da4:	ac 01       	movw	r20, r24
    1da6:	0a 2e       	mov	r0, r26
    1da8:	06 94       	lsr	r0
    1daa:	57 95       	ror	r21
    1dac:	47 95       	ror	r20
    1dae:	37 95       	ror	r19
    1db0:	27 95       	ror	r18
    1db2:	ba 95       	dec	r27
    1db4:	c9 f7       	brne	.-14     	; 0x1da8 <__ultoa_invert+0xa2>
    1db6:	62 0f       	add	r22, r18
    1db8:	73 1f       	adc	r23, r19
    1dba:	84 1f       	adc	r24, r20
    1dbc:	95 1f       	adc	r25, r21
    1dbe:	a0 1d       	adc	r26, r0
    1dc0:	08 95       	ret

00001dc2 <__prologue_saves__>:
    1dc2:	2f 92       	push	r2
    1dc4:	3f 92       	push	r3
    1dc6:	4f 92       	push	r4
    1dc8:	5f 92       	push	r5
    1dca:	6f 92       	push	r6
    1dcc:	7f 92       	push	r7
    1dce:	8f 92       	push	r8
    1dd0:	9f 92       	push	r9
    1dd2:	af 92       	push	r10
    1dd4:	bf 92       	push	r11
    1dd6:	cf 92       	push	r12
    1dd8:	df 92       	push	r13
    1dda:	ef 92       	push	r14
    1ddc:	ff 92       	push	r15
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	ca 1b       	sub	r28, r26
    1dec:	db 0b       	sbc	r29, r27
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	09 94       	ijmp

00001dfa <__epilogue_restores__>:
    1dfa:	2a 88       	ldd	r2, Y+18	; 0x12
    1dfc:	39 88       	ldd	r3, Y+17	; 0x11
    1dfe:	48 88       	ldd	r4, Y+16	; 0x10
    1e00:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e02:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e04:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e06:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e08:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e0c:	b9 84       	ldd	r11, Y+9	; 0x09
    1e0e:	c8 84       	ldd	r12, Y+8	; 0x08
    1e10:	df 80       	ldd	r13, Y+7	; 0x07
    1e12:	ee 80       	ldd	r14, Y+6	; 0x06
    1e14:	fd 80       	ldd	r15, Y+5	; 0x05
    1e16:	0c 81       	ldd	r16, Y+4	; 0x04
    1e18:	1b 81       	ldd	r17, Y+3	; 0x03
    1e1a:	aa 81       	ldd	r26, Y+2	; 0x02
    1e1c:	b9 81       	ldd	r27, Y+1	; 0x01
    1e1e:	ce 0f       	add	r28, r30
    1e20:	d1 1d       	adc	r29, r1
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	ed 01       	movw	r28, r26
    1e2e:	08 95       	ret

00001e30 <_exit>:
    1e30:	f8 94       	cli

00001e32 <__stop_program>:
    1e32:	ff cf       	rjmp	.-2      	; 0x1e32 <__stop_program>
