
hisCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001ea0  00001f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ea0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000200  0080011e  00001ebe  00001f32  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  00001f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000412  00000000  00000000  00002052  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011ba  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b0  00000000  00000000  0000361e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000122f  00000000  00000000  00003cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00004f00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e5  00000000  00000000  00005250  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__vector_18>
      4c:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ea       	ldi	r30, 0xA0	; 160
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ae 31       	cpi	r26, 0x1E	; 30
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	13 e0       	ldi	r17, 0x03	; 3
      8c:	ae e1       	ldi	r26, 0x1E	; 30
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 31       	cpi	r26, 0x1E	; 30
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 14 0a 	call	0x1428	; 0x1428 <main>
      9e:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_rw_blocking>:
volatile uint16_t adc_z_new;
uint8_t adc_z_buffer_packed[31]; // includes size byte
volatile boolean_t adc_z_want_update;

static uint8_t adc_rw_blocking(uint8_t write_byte)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	0f 92       	push	r0
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	89 83       	std	Y+1, r24	; 0x01
	// start TX
	SPDR = write_byte;
      b2:	ee e4       	ldi	r30, 0x4E	; 78
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	89 81       	ldd	r24, Y+1	; 0x01
      b8:	80 83       	st	Z, r24
	
	// wait for TX/RX to complete (blocking)
	while ((SPSR & (1 << SPIF)) == 0);
      ba:	ed e4       	ldi	r30, 0x4D	; 77
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	88 23       	and	r24, r24
      c2:	dc f7       	brge	.-10     	; 0xba <adc_rw_blocking+0x14>
	
	// read RX
	return (SPDR);
      c4:	ee e4       	ldi	r30, 0x4E	; 78
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
}
      ca:	0f 90       	pop	r0
      cc:	cf 91       	pop	r28
      ce:	df 91       	pop	r29
      d0:	08 95       	ret

000000d2 <adc_pack_buffer>:

void adc_pack_buffer()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	00 d0       	rcall	.+0      	; 0xd8 <adc_pack_buffer+0x6>
      d8:	00 d0       	rcall	.+0      	; 0xda <adc_pack_buffer+0x8>
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp_head = adc_z_buffer_head;
      de:	80 91 46 01 	lds	r24, 0x0146
      e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i;
	
	// first byte is size byte
	adc_z_buffer_packed[0] = 30;
      e4:	8e e1       	ldi	r24, 0x1E	; 30
      e6:	80 93 98 02 	sts	0x0298, r24
	
	// pack the 12-bit values into 8-bit chunks
	// since 2 12-bit values exactly fit into 3 bytes, do as a loop
	
	for (i = 1; i < 31; i += 3)
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	89 83       	std	Y+1, r24	; 0x01
      ee:	79 c0       	rjmp	.+242    	; 0x1e2 <adc_pack_buffer+0x110>
	{
		adc_z_buffer_packed[i] = adc_z_buffer[temp_head] & 0x00FF;
      f0:	89 81       	ldd	r24, Y+1	; 0x01
      f2:	28 2f       	mov	r18, r24
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	8a 81       	ldd	r24, Y+2	; 0x02
      f8:	88 2f       	mov	r24, r24
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	88 0f       	add	r24, r24
      fe:	99 1f       	adc	r25, r25
     100:	fc 01       	movw	r30, r24
     102:	e2 5e       	subi	r30, 0xE2	; 226
     104:	fe 4f       	sbci	r31, 0xFE	; 254
     106:	80 81       	ld	r24, Z
     108:	91 81       	ldd	r25, Z+1	; 0x01
     10a:	f9 01       	movw	r30, r18
     10c:	e8 56       	subi	r30, 0x68	; 104
     10e:	fd 4f       	sbci	r31, 0xFD	; 253
     110:	80 83       	st	Z, r24
		adc_z_buffer_packed[i + 1] = adc_z_buffer[temp_head] >> 8;
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	88 2f       	mov	r24, r24
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	9c 01       	movw	r18, r24
     11a:	2f 5f       	subi	r18, 0xFF	; 255
     11c:	3f 4f       	sbci	r19, 0xFF	; 255
     11e:	8a 81       	ldd	r24, Y+2	; 0x02
     120:	88 2f       	mov	r24, r24
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	88 0f       	add	r24, r24
     126:	99 1f       	adc	r25, r25
     128:	fc 01       	movw	r30, r24
     12a:	e2 5e       	subi	r30, 0xE2	; 226
     12c:	fe 4f       	sbci	r31, 0xFE	; 254
     12e:	80 81       	ld	r24, Z
     130:	91 81       	ldd	r25, Z+1	; 0x01
     132:	89 2f       	mov	r24, r25
     134:	99 27       	eor	r25, r25
     136:	f9 01       	movw	r30, r18
     138:	e8 56       	subi	r30, 0x68	; 104
     13a:	fd 4f       	sbci	r31, 0xFD	; 253
     13c:	80 83       	st	Z, r24
		temp_head = (temp_head >= 19) ? 0 : (temp_head + 1);
     13e:	8a 81       	ldd	r24, Y+2	; 0x02
     140:	83 31       	cpi	r24, 0x13	; 19
     142:	28 f4       	brcc	.+10     	; 0x14e <adc_pack_buffer+0x7c>
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	98 2f       	mov	r25, r24
     148:	9f 5f       	subi	r25, 0xFF	; 255
     14a:	9c 83       	std	Y+4, r25	; 0x04
     14c:	01 c0       	rjmp	.+2      	; 0x150 <adc_pack_buffer+0x7e>
     14e:	1c 82       	std	Y+4, r1	; 0x04
     150:	8c 81       	ldd	r24, Y+4	; 0x04
     152:	8a 83       	std	Y+2, r24	; 0x02
		adc_z_buffer_packed[i + 1] |= (adc_z_buffer[temp_head] << 4) & 0x00F0;
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	88 2f       	mov	r24, r24
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	9c 01       	movw	r18, r24
     15c:	2f 5f       	subi	r18, 0xFF	; 255
     15e:	3f 4f       	sbci	r19, 0xFF	; 255
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	88 2f       	mov	r24, r24
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	01 96       	adiw	r24, 0x01	; 1
     168:	fc 01       	movw	r30, r24
     16a:	e8 56       	subi	r30, 0x68	; 104
     16c:	fd 4f       	sbci	r31, 0xFD	; 253
     16e:	40 81       	ld	r20, Z
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	88 2f       	mov	r24, r24
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	fc 01       	movw	r30, r24
     17c:	e2 5e       	subi	r30, 0xE2	; 226
     17e:	fe 4f       	sbci	r31, 0xFE	; 254
     180:	80 81       	ld	r24, Z
     182:	91 81       	ldd	r25, Z+1	; 0x01
     184:	82 95       	swap	r24
     186:	80 7f       	andi	r24, 0xF0	; 240
     188:	84 2b       	or	r24, r20
     18a:	f9 01       	movw	r30, r18
     18c:	e8 56       	subi	r30, 0x68	; 104
     18e:	fd 4f       	sbci	r31, 0xFD	; 253
     190:	80 83       	st	Z, r24
		adc_z_buffer_packed[i + 2] = adc_z_buffer[temp_head] >> 4;
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	88 2f       	mov	r24, r24
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	9c 01       	movw	r18, r24
     19a:	2e 5f       	subi	r18, 0xFE	; 254
     19c:	3f 4f       	sbci	r19, 0xFF	; 255
     19e:	8a 81       	ldd	r24, Y+2	; 0x02
     1a0:	88 2f       	mov	r24, r24
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	fc 01       	movw	r30, r24
     1aa:	e2 5e       	subi	r30, 0xE2	; 226
     1ac:	fe 4f       	sbci	r31, 0xFE	; 254
     1ae:	80 81       	ld	r24, Z
     1b0:	91 81       	ldd	r25, Z+1	; 0x01
     1b2:	92 95       	swap	r25
     1b4:	82 95       	swap	r24
     1b6:	8f 70       	andi	r24, 0x0F	; 15
     1b8:	89 27       	eor	r24, r25
     1ba:	9f 70       	andi	r25, 0x0F	; 15
     1bc:	89 27       	eor	r24, r25
     1be:	f9 01       	movw	r30, r18
     1c0:	e8 56       	subi	r30, 0x68	; 104
     1c2:	fd 4f       	sbci	r31, 0xFD	; 253
     1c4:	80 83       	st	Z, r24
		temp_head = (temp_head >= 19) ? 0 : (temp_head + 1);
     1c6:	8a 81       	ldd	r24, Y+2	; 0x02
     1c8:	83 31       	cpi	r24, 0x13	; 19
     1ca:	28 f4       	brcc	.+10     	; 0x1d6 <adc_pack_buffer+0x104>
     1cc:	8a 81       	ldd	r24, Y+2	; 0x02
     1ce:	98 2f       	mov	r25, r24
     1d0:	9f 5f       	subi	r25, 0xFF	; 255
     1d2:	9b 83       	std	Y+3, r25	; 0x03
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <adc_pack_buffer+0x106>
     1d6:	1b 82       	std	Y+3, r1	; 0x03
     1d8:	8b 81       	ldd	r24, Y+3	; 0x03
     1da:	8a 83       	std	Y+2, r24	; 0x02
	adc_z_buffer_packed[0] = 30;
	
	// pack the 12-bit values into 8-bit chunks
	// since 2 12-bit values exactly fit into 3 bytes, do as a loop
	
	for (i = 1; i < 31; i += 3)
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	8d 5f       	subi	r24, 0xFD	; 253
     1e0:	89 83       	std	Y+1, r24	; 0x01
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	8f 31       	cpi	r24, 0x1F	; 31
     1e6:	08 f4       	brcc	.+2      	; 0x1ea <adc_pack_buffer+0x118>
     1e8:	83 cf       	rjmp	.-250    	; 0xf0 <adc_pack_buffer+0x1e>
		temp_head = (temp_head >= 19) ? 0 : (temp_head + 1);
		adc_z_buffer_packed[i + 1] |= (adc_z_buffer[temp_head] << 4) & 0x00F0;
		adc_z_buffer_packed[i + 2] = adc_z_buffer[temp_head] >> 4;
		temp_head = (temp_head >= 19) ? 0 : (temp_head + 1);
	}
}
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <adc_buffer_update>:

void adc_buffer_update()
{
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
	// add newest ADC Z reading to buffer
	adc_z_buffer[adc_z_buffer_head] = adc_z_new;
     200:	80 91 46 01 	lds	r24, 0x0146
     204:	88 2f       	mov	r24, r24
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	20 91 b7 02 	lds	r18, 0x02B7
     20c:	30 91 b8 02 	lds	r19, 0x02B8
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	fc 01       	movw	r30, r24
     216:	e2 5e       	subi	r30, 0xE2	; 226
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	31 83       	std	Z+1, r19	; 0x01
     21c:	20 83       	st	Z, r18
	
	// clear update flag
	adc_z_want_update = FALSE;
     21e:	10 92 b9 02 	sts	0x02B9, r1

	// increment adc Z buffer head
	if (adc_z_buffer_head >= 19)
     222:	80 91 46 01 	lds	r24, 0x0146
     226:	83 31       	cpi	r24, 0x13	; 19
     228:	18 f0       	brcs	.+6      	; 0x230 <adc_buffer_update+0x38>
		adc_z_buffer_head = 0;
     22a:	10 92 46 01 	sts	0x0146, r1
     22e:	05 c0       	rjmp	.+10     	; 0x23a <adc_buffer_update+0x42>
	else
		adc_z_buffer_head++;
     230:	80 91 46 01 	lds	r24, 0x0146
     234:	8f 5f       	subi	r24, 0xFF	; 255
     236:	80 93 46 01 	sts	0x0146, r24
}
     23a:	cf 91       	pop	r28
     23c:	df 91       	pop	r29
     23e:	08 95       	ret

00000240 <adc_update>:

void adc_update()
{
     240:	df 93       	push	r29
     242:	cf 93       	push	r28
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
	if (!adc_z_want_update)
     248:	80 91 b9 02 	lds	r24, 0x02B9
     24c:	88 23       	and	r24, r24
     24e:	81 f5       	brne	.+96     	; 0x2b0 <adc_update+0x70>
	{
		// update flag is false, so last data was successfully buffered
	
		// read channel 2 (accelerometer Z axis)
		PORTC &= ~nSPI_CS_ADC; // set ADC CS low
     250:	a8 e2       	ldi	r26, 0x28	; 40
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	e8 e2       	ldi	r30, 0x28	; 40
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	8c 7f       	andi	r24, 0xFC	; 252
     25c:	8c 93       	st	X, r24
		adc_rw_blocking(0x06);
     25e:	86 e0       	ldi	r24, 0x06	; 6
     260:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_rw_blocking>
		adc_z_new = (adc_rw_blocking(0x80) & 0x000F) << 8;
     264:	80 e8       	ldi	r24, 0x80	; 128
     266:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_rw_blocking>
     26a:	88 2f       	mov	r24, r24
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	8f 70       	andi	r24, 0x0F	; 15
     270:	90 70       	andi	r25, 0x00	; 0
     272:	98 2f       	mov	r25, r24
     274:	88 27       	eor	r24, r24
     276:	90 93 b8 02 	sts	0x02B8, r25
     27a:	80 93 b7 02 	sts	0x02B7, r24
		adc_z_new |= adc_rw_blocking(0x00);
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_rw_blocking>
     284:	28 2f       	mov	r18, r24
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	80 91 b7 02 	lds	r24, 0x02B7
     28c:	90 91 b8 02 	lds	r25, 0x02B8
     290:	82 2b       	or	r24, r18
     292:	93 2b       	or	r25, r19
     294:	90 93 b8 02 	sts	0x02B8, r25
     298:	80 93 b7 02 	sts	0x02B7, r24
		PORTC |= nSPI_CS_ADC; // set ADC CS high
     29c:	a8 e2       	ldi	r26, 0x28	; 40
     29e:	b0 e0       	ldi	r27, 0x00	; 0
     2a0:	e8 e2       	ldi	r30, 0x28	; 40
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	83 60       	ori	r24, 0x03	; 3
     2a8:	8c 93       	st	X, r24
		
		// set update flag (allows remaining work to be done outside of ISR, and without risk of adc_z_new conflict)
		adc_z_want_update = TRUE;
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	80 93 b9 02 	sts	0x02B9, r24
	}
}
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret

000002b6 <adc_setup>:

void adc_setup()
{
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // enable SPI, set SPI master, set SPI clock as fosc/16 (1 MHz)
     2be:	ec e4       	ldi	r30, 0x4C	; 76
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	81 e5       	ldi	r24, 0x51	; 81
     2c4:	80 83       	st	Z, r24
	adc_z_buffer_head = 0;
     2c6:	10 92 46 01 	sts	0x0146, r1
	adc_z_want_update = FALSE;
     2ca:	10 92 b9 02 	sts	0x02B9, r1
     2ce:	cf 91       	pop	r28
     2d0:	df 91       	pop	r29
     2d2:	08 95       	ret

000002d4 <comms_putchar>:
static FILE comms_putchar_file;

// include for printf and vprintf functionality (used by send_text function)
// uses temp_text_buffer and temp_text_buffer_count (and assumes the buffer never overflows)
static int comms_putchar(char ch, FILE *stream)
{ 
     2d4:	df 93       	push	r29
     2d6:	cf 93       	push	r28
     2d8:	00 d0       	rcall	.+0      	; 0x2da <comms_putchar+0x6>
     2da:	0f 92       	push	r0
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	89 83       	std	Y+1, r24	; 0x01
     2e2:	7b 83       	std	Y+3, r23	; 0x03
     2e4:	6a 83       	std	Y+2, r22	; 0x02
  if (ch == '\n')
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	8a 30       	cpi	r24, 0x0A	; 10
     2ea:	79 f4       	brne	.+30     	; 0x30a <comms_putchar+0x36>
		temp_text_buffer[temp_text_buffer_count++] = '\r';
     2ec:	20 91 c9 01 	lds	r18, 0x01C9
     2f0:	82 2f       	mov	r24, r18
     2f2:	99 27       	eor	r25, r25
     2f4:	87 fd       	sbrc	r24, 7
     2f6:	90 95       	com	r25
     2f8:	fc 01       	movw	r30, r24
     2fa:	e7 57       	subi	r30, 0x77	; 119
     2fc:	fe 4f       	sbci	r31, 0xFE	; 254
     2fe:	8d e0       	ldi	r24, 0x0D	; 13
     300:	80 83       	st	Z, r24
     302:	82 2f       	mov	r24, r18
     304:	8f 5f       	subi	r24, 0xFF	; 255
     306:	80 93 c9 01 	sts	0x01C9, r24

  temp_text_buffer[temp_text_buffer_count++] = ch;
     30a:	20 91 c9 01 	lds	r18, 0x01C9
     30e:	82 2f       	mov	r24, r18
     310:	99 27       	eor	r25, r25
     312:	87 fd       	sbrc	r24, 7
     314:	90 95       	com	r25
     316:	fc 01       	movw	r30, r24
     318:	e7 57       	subi	r30, 0x77	; 119
     31a:	fe 4f       	sbci	r31, 0xFE	; 254
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	80 83       	st	Z, r24
     320:	82 2f       	mov	r24, r18
     322:	8f 5f       	subi	r24, 0xFF	; 255
     324:	80 93 c9 01 	sts	0x01C9, r24

  return (ch); // assumes always successful (would otherwise return EOF)
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	88 2f       	mov	r24, r24
     32c:	90 e0       	ldi	r25, 0x00	; 0
}
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	cf 91       	pop	r28
     336:	df 91       	pop	r29
     338:	08 95       	ret

0000033a <comms_stream_setup>:

static void comms_stream_setup(comms_stream_struct *cs, uint8_t *tx_fifo_buffer, uint8_t tx_fifo_length, uint8_t *rx_fifo_buffer, uint8_t rx_fifo_length, uint8_t *command_bytes, uint8_t command_bytes_max_length)
{
     33a:	cf 92       	push	r12
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	df 93       	push	r29
     344:	cf 93       	push	r28
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	2b 97       	sbiw	r28, 0x0b	; 11
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
     356:	9a 83       	std	Y+2, r25	; 0x02
     358:	89 83       	std	Y+1, r24	; 0x01
     35a:	7c 83       	std	Y+4, r23	; 0x04
     35c:	6b 83       	std	Y+3, r22	; 0x03
     35e:	4d 83       	std	Y+5, r20	; 0x05
     360:	3f 83       	std	Y+7, r19	; 0x07
     362:	2e 83       	std	Y+6, r18	; 0x06
     364:	08 87       	std	Y+8, r16	; 0x08
     366:	fa 86       	std	Y+10, r15	; 0x0a
     368:	e9 86       	std	Y+9, r14	; 0x09
     36a:	cb 86       	std	Y+11, r12	; 0x0b
  fifo_setup(&(cs->tx_fifo), tx_fifo_buffer, tx_fifo_length);
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	9a 81       	ldd	r25, Y+2	; 0x02
     370:	9c 01       	movw	r18, r24
     372:	2b 5f       	subi	r18, 0xFB	; 251
     374:	3f 4f       	sbci	r19, 0xFF	; 255
     376:	8b 81       	ldd	r24, Y+3	; 0x03
     378:	9c 81       	ldd	r25, Y+4	; 0x04
     37a:	4d 81       	ldd	r20, Y+5	; 0x05
     37c:	bc 01       	movw	r22, r24
     37e:	c9 01       	movw	r24, r18
     380:	0e 94 24 09 	call	0x1248	; 0x1248 <fifo_setup>
  fifo_setup(&(cs->rx_fifo), rx_fifo_buffer, rx_fifo_length);
     384:	29 81       	ldd	r18, Y+1	; 0x01
     386:	3a 81       	ldd	r19, Y+2	; 0x02
     388:	8e 81       	ldd	r24, Y+6	; 0x06
     38a:	9f 81       	ldd	r25, Y+7	; 0x07
     38c:	48 85       	ldd	r20, Y+8	; 0x08
     38e:	bc 01       	movw	r22, r24
     390:	c9 01       	movw	r24, r18
     392:	0e 94 24 09 	call	0x1248	; 0x1248 <fifo_setup>
  cs->scan_state = 0;
     396:	e9 81       	ldd	r30, Y+1	; 0x01
     398:	fa 81       	ldd	r31, Y+2	; 0x02
     39a:	16 8a       	std	Z+22, r1	; 0x16
  cs->unknown_start_bytes = FALSE;
     39c:	e9 81       	ldd	r30, Y+1	; 0x01
     39e:	fa 81       	ldd	r31, Y+2	; 0x02
     3a0:	16 86       	std	Z+14, r1	; 0x0e
  cs->rx_packet_errors = 0;
     3a2:	e9 81       	ldd	r30, Y+1	; 0x01
     3a4:	fa 81       	ldd	r31, Y+2	; 0x02
     3a6:	12 86       	std	Z+10, r1	; 0x0a
     3a8:	13 86       	std	Z+11, r1	; 0x0b
     3aa:	14 86       	std	Z+12, r1	; 0x0c
     3ac:	15 86       	std	Z+13, r1	; 0x0d
	
	cs->command_bytes = command_bytes;
     3ae:	e9 81       	ldd	r30, Y+1	; 0x01
     3b0:	fa 81       	ldd	r31, Y+2	; 0x02
     3b2:	89 85       	ldd	r24, Y+9	; 0x09
     3b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b6:	91 8b       	std	Z+17, r25	; 0x11
     3b8:	80 8b       	std	Z+16, r24	; 0x10
  cs->command_bytes_max_length = command_bytes_max_length;
     3ba:	e9 81       	ldd	r30, Y+1	; 0x01
     3bc:	fa 81       	ldd	r31, Y+2	; 0x02
     3be:	8b 85       	ldd	r24, Y+11	; 0x0b
     3c0:	83 8b       	std	Z+19, r24	; 0x13
  cs->command_bytes_available = 0;
     3c2:	e9 81       	ldd	r30, Y+1	; 0x01
     3c4:	fa 81       	ldd	r31, Y+2	; 0x02
     3c6:	14 8a       	std	Z+20, r1	; 0x14
  
	// cs->is_single_class should be set by command source itself (i.e. from start byte of incoming comms packet)
  // however, if this does not dynamically change default to cs->is_single_class is FALSE
  cs->is_single_class = FALSE;
     3c8:	e9 81       	ldd	r30, Y+1	; 0x01
     3ca:	fa 81       	ldd	r31, Y+2	; 0x02
     3cc:	17 86       	std	Z+15, r1	; 0x0f
}
     3ce:	2b 96       	adiw	r28, 0x0b	; 11
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	cf 91       	pop	r28
     3dc:	df 91       	pop	r29
     3de:	0f 91       	pop	r16
     3e0:	ff 90       	pop	r15
     3e2:	ef 90       	pop	r14
     3e4:	cf 90       	pop	r12
     3e6:	08 95       	ret

000003e8 <comms_setup>:


void comms_setup()
{
     3e8:	cf 92       	push	r12
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	df 93       	push	r29
     3f2:	cf 93       	push	r28
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
	// set up stdio write redirect to comms_putchar
	fdev_setup_stream(&comms_putchar_file, &comms_putchar, NULL, _FDEV_SETUP_WRITE);
     3f8:	8a e6       	ldi	r24, 0x6A	; 106
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	90 93 93 02 	sts	0x0293, r25
     400:	80 93 92 02 	sts	0x0292, r24
     404:	10 92 95 02 	sts	0x0295, r1
     408:	10 92 94 02 	sts	0x0294, r1
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	80 93 8d 02 	sts	0x028D, r24
     412:	10 92 97 02 	sts	0x0297, r1
     416:	10 92 96 02 	sts	0x0296, r1
	stdout = &comms_putchar_file;
     41a:	8a e8       	ldi	r24, 0x8A	; 138
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	90 93 1b 03 	sts	0x031B, r25
     422:	80 93 1a 03 	sts	0x031A, r24

	// set up comms stream
  comms_stream_setup(&payload_stream, payload_tx_fifo_buffer, PAYLOAD_TX_FIFO_LENGTH, payload_rx_fifo_buffer, PAYLOAD_RX_FIFO_LENGTH, payload_command_bytes, PAYLOAD_COMMAND_BYTES_MAX_LENGTH);
     426:	87 e4       	ldi	r24, 0x47	; 71
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	2a e2       	ldi	r18, 0x2A	; 42
     42c:	32 e0       	ldi	r19, 0x02	; 2
     42e:	6a ec       	ldi	r22, 0xCA	; 202
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	eb eb       	ldi	r30, 0xBB	; 187
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	cc 24       	eor	r12, r12
     438:	68 94       	set
     43a:	c6 f8       	bld	r12, 6
     43c:	7c 01       	movw	r14, r24
     43e:	00 e6       	ldi	r16, 0x60	; 96
     440:	40 e6       	ldi	r20, 0x60	; 96
     442:	cf 01       	movw	r24, r30
     444:	0e 94 9d 01 	call	0x33a	; 0x33a <comms_stream_setup>
}
     448:	cf 91       	pop	r28
     44a:	df 91       	pop	r29
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	cf 90       	pop	r12
     454:	08 95       	ret

00000456 <comms_packet_scan>:

static boolean_t comms_packet_scan(comms_stream_struct *cs) // returns TRUE when a complete and validated packet has been received
{
     456:	df 93       	push	r29
     458:	cf 93       	push	r28
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	28 97       	sbiw	r28, 0x08	; 8
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61
     46a:	9b 83       	std	Y+3, r25	; 0x03
     46c:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t rx_byte;

  // read waiting byte in RX fifo
  fifo_get_byte(&(cs->rx_fifo), &rx_byte);
     46e:	2a 81       	ldd	r18, Y+2	; 0x02
     470:	3b 81       	ldd	r19, Y+3	; 0x03
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	bc 01       	movw	r22, r24
     478:	c9 01       	movw	r24, r18
     47a:	0e 94 75 09 	call	0x12ea	; 0x12ea <fifo_get_byte>

  switch (cs->scan_state)
     47e:	ea 81       	ldd	r30, Y+2	; 0x02
     480:	fb 81       	ldd	r31, Y+3	; 0x03
     482:	86 89       	ldd	r24, Z+22	; 0x16
     484:	28 2f       	mov	r18, r24
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	38 87       	std	Y+8, r19	; 0x08
     48a:	2f 83       	std	Y+7, r18	; 0x07
     48c:	8f 81       	ldd	r24, Y+7	; 0x07
     48e:	98 85       	ldd	r25, Y+8	; 0x08
     490:	84 30       	cpi	r24, 0x04	; 4
     492:	91 05       	cpc	r25, r1
     494:	09 f4       	brne	.+2      	; 0x498 <comms_packet_scan+0x42>
     496:	19 c1       	rjmp	.+562    	; 0x6ca <__stack+0x1cb>
     498:	2f 81       	ldd	r18, Y+7	; 0x07
     49a:	38 85       	ldd	r19, Y+8	; 0x08
     49c:	25 30       	cpi	r18, 0x05	; 5
     49e:	31 05       	cpc	r19, r1
     4a0:	ec f4       	brge	.+58     	; 0x4dc <comms_packet_scan+0x86>
     4a2:	8f 81       	ldd	r24, Y+7	; 0x07
     4a4:	98 85       	ldd	r25, Y+8	; 0x08
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	91 05       	cpc	r25, r1
     4aa:	09 f4       	brne	.+2      	; 0x4ae <comms_packet_scan+0x58>
     4ac:	41 c0       	rjmp	.+130    	; 0x530 <__stack+0x31>
     4ae:	2f 81       	ldd	r18, Y+7	; 0x07
     4b0:	38 85       	ldd	r19, Y+8	; 0x08
     4b2:	22 30       	cpi	r18, 0x02	; 2
     4b4:	31 05       	cpc	r19, r1
     4b6:	2c f4       	brge	.+10     	; 0x4c2 <comms_packet_scan+0x6c>
     4b8:	8f 81       	ldd	r24, Y+7	; 0x07
     4ba:	98 85       	ldd	r25, Y+8	; 0x08
     4bc:	00 97       	sbiw	r24, 0x00	; 0
     4be:	39 f1       	breq	.+78     	; 0x50e <__stack+0xf>
     4c0:	44 c3       	rjmp	.+1672   	; 0xb4a <__stack+0x64b>
     4c2:	2f 81       	ldd	r18, Y+7	; 0x07
     4c4:	38 85       	ldd	r19, Y+8	; 0x08
     4c6:	22 30       	cpi	r18, 0x02	; 2
     4c8:	31 05       	cpc	r19, r1
     4ca:	09 f4       	brne	.+2      	; 0x4ce <comms_packet_scan+0x78>
     4cc:	92 c0       	rjmp	.+292    	; 0x5f2 <__stack+0xf3>
     4ce:	8f 81       	ldd	r24, Y+7	; 0x07
     4d0:	98 85       	ldd	r25, Y+8	; 0x08
     4d2:	83 30       	cpi	r24, 0x03	; 3
     4d4:	91 05       	cpc	r25, r1
     4d6:	09 f4       	brne	.+2      	; 0x4da <comms_packet_scan+0x84>
     4d8:	cd c0       	rjmp	.+410    	; 0x674 <__stack+0x175>
     4da:	37 c3       	rjmp	.+1646   	; 0xb4a <__stack+0x64b>
     4dc:	2f 81       	ldd	r18, Y+7	; 0x07
     4de:	38 85       	ldd	r19, Y+8	; 0x08
     4e0:	26 30       	cpi	r18, 0x06	; 6
     4e2:	31 05       	cpc	r19, r1
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <comms_packet_scan+0x92>
     4e6:	8f c1       	rjmp	.+798    	; 0x806 <__stack+0x307>
     4e8:	8f 81       	ldd	r24, Y+7	; 0x07
     4ea:	98 85       	ldd	r25, Y+8	; 0x08
     4ec:	86 30       	cpi	r24, 0x06	; 6
     4ee:	91 05       	cpc	r25, r1
     4f0:	0c f4       	brge	.+2      	; 0x4f4 <comms_packet_scan+0x9e>
     4f2:	3e c1       	rjmp	.+636    	; 0x770 <__stack+0x271>
     4f4:	2f 81       	ldd	r18, Y+7	; 0x07
     4f6:	38 85       	ldd	r19, Y+8	; 0x08
     4f8:	27 30       	cpi	r18, 0x07	; 7
     4fa:	31 05       	cpc	r19, r1
     4fc:	09 f4       	brne	.+2      	; 0x500 <__stack+0x1>
     4fe:	b7 c2       	rjmp	.+1390   	; 0xa6e <__stack+0x56f>
     500:	8f 81       	ldd	r24, Y+7	; 0x07
     502:	98 85       	ldd	r25, Y+8	; 0x08
     504:	88 30       	cpi	r24, 0x08	; 8
     506:	91 05       	cpc	r25, r1
     508:	09 f4       	brne	.+2      	; 0x50c <__stack+0xd>
     50a:	de c2       	rjmp	.+1468   	; 0xac8 <__stack+0x5c9>
     50c:	1e c3       	rjmp	.+1596   	; 0xb4a <__stack+0x64b>
  {
    case 0:
      // wait for START byte (two MSB's are high) to signify start of packet
      if (rx_byte >= COMMS_START_BYTE_BASE)
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	80 3c       	cpi	r24, 0xC0	; 192
     512:	48 f0       	brcs	.+18     	; 0x526 <__stack+0x27>
      {
        cs->start_byte = rx_byte;
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	ea 81       	ldd	r30, Y+2	; 0x02
     518:	fb 81       	ldd	r31, Y+3	; 0x03
     51a:	82 8b       	std	Z+18, r24	; 0x12
        cs->scan_state = 1;
     51c:	ea 81       	ldd	r30, Y+2	; 0x02
     51e:	fb 81       	ldd	r31, Y+3	; 0x03
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	86 8b       	std	Z+22, r24	; 0x16
     524:	12 c3       	rjmp	.+1572   	; 0xb4a <__stack+0x64b>
      }
      else
        cs->unknown_start_bytes = TRUE;
     526:	ea 81       	ldd	r30, Y+2	; 0x02
     528:	fb 81       	ldd	r31, Y+3	; 0x03
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	86 87       	std	Z+14, r24	; 0x0e
     52e:	0d c3       	rjmp	.+1562   	; 0xb4a <__stack+0x64b>
      break;

    case 1:
      // expect DLE after START byte

      if (cs->unknown_start_bytes)
     530:	ea 81       	ldd	r30, Y+2	; 0x02
     532:	fb 81       	ldd	r31, Y+3	; 0x03
     534:	86 85       	ldd	r24, Z+14	; 0x0e
     536:	88 23       	and	r24, r24
     538:	91 f0       	breq	.+36     	; 0x55e <__stack+0x5f>
      {
        cs->rx_packet_errors++;
     53a:	ea 81       	ldd	r30, Y+2	; 0x02
     53c:	fb 81       	ldd	r31, Y+3	; 0x03
     53e:	82 85       	ldd	r24, Z+10	; 0x0a
     540:	93 85       	ldd	r25, Z+11	; 0x0b
     542:	a4 85       	ldd	r26, Z+12	; 0x0c
     544:	b5 85       	ldd	r27, Z+13	; 0x0d
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	a1 1d       	adc	r26, r1
     54a:	b1 1d       	adc	r27, r1
     54c:	ea 81       	ldd	r30, Y+2	; 0x02
     54e:	fb 81       	ldd	r31, Y+3	; 0x03
     550:	82 87       	std	Z+10, r24	; 0x0a
     552:	93 87       	std	Z+11, r25	; 0x0b
     554:	a4 87       	std	Z+12, r26	; 0x0c
     556:	b5 87       	std	Z+13, r27	; 0x0d
        cs->unknown_start_bytes = FALSE;
     558:	ea 81       	ldd	r30, Y+2	; 0x02
     55a:	fb 81       	ldd	r31, Y+3	; 0x03
     55c:	16 86       	std	Z+14, r1	; 0x0e
      }

      if (rx_byte == COMMS_DLE_BYTE)
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	8d 3b       	cpi	r24, 0xBD	; 189
     562:	61 f5       	brne	.+88     	; 0x5bc <__stack+0xbd>
      {
        cs->is_single_class = (cs->start_byte & COMMS_START_SINGLE_CLASS) ? TRUE : FALSE;
     564:	ea 81       	ldd	r30, Y+2	; 0x02
     566:	fb 81       	ldd	r31, Y+3	; 0x03
     568:	82 89       	ldd	r24, Z+18	; 0x12
     56a:	88 2f       	mov	r24, r24
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	81 70       	andi	r24, 0x01	; 1
     570:	90 70       	andi	r25, 0x00	; 0
     572:	88 23       	and	r24, r24
     574:	19 f0       	breq	.+6      	; 0x57c <__stack+0x7d>
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	9e 83       	std	Y+6, r25	; 0x06
     57a:	01 c0       	rjmp	.+2      	; 0x57e <__stack+0x7f>
     57c:	1e 82       	std	Y+6, r1	; 0x06
     57e:	ea 81       	ldd	r30, Y+2	; 0x02
     580:	fb 81       	ldd	r31, Y+3	; 0x03
     582:	2e 81       	ldd	r18, Y+6	; 0x06
     584:	27 87       	std	Z+15, r18	; 0x0f
        if (cs->start_byte & COMMS_START_HAS_ADDRESS)
     586:	ea 81       	ldd	r30, Y+2	; 0x02
     588:	fb 81       	ldd	r31, Y+3	; 0x03
     58a:	82 89       	ldd	r24, Z+18	; 0x12
     58c:	88 2f       	mov	r24, r24
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	8c 70       	andi	r24, 0x0C	; 12
     592:	90 70       	andi	r25, 0x00	; 0
     594:	00 97       	sbiw	r24, 0x00	; 0
     596:	29 f0       	breq	.+10     	; 0x5a2 <__stack+0xa3>
          cs->scan_state = 2;
     598:	ea 81       	ldd	r30, Y+2	; 0x02
     59a:	fb 81       	ldd	r31, Y+3	; 0x03
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	86 8b       	std	Z+22, r24	; 0x16
     5a0:	d4 c2       	rjmp	.+1448   	; 0xb4a <__stack+0x64b>
        else
        {
          cs->source_address = 255;
     5a2:	ea 81       	ldd	r30, Y+2	; 0x02
     5a4:	fb 81       	ldd	r31, Y+3	; 0x03
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	80 8f       	std	Z+24, r24	; 0x18
          cs->destination_address = 255;
     5aa:	ea 81       	ldd	r30, Y+2	; 0x02
     5ac:	fb 81       	ldd	r31, Y+3	; 0x03
     5ae:	8f ef       	ldi	r24, 0xFF	; 255
     5b0:	81 8f       	std	Z+25, r24	; 0x19
          cs->scan_state = 4;
     5b2:	ea 81       	ldd	r30, Y+2	; 0x02
     5b4:	fb 81       	ldd	r31, Y+3	; 0x03
     5b6:	84 e0       	ldi	r24, 0x04	; 4
     5b8:	86 8b       	std	Z+22, r24	; 0x16
     5ba:	c7 c2       	rjmp	.+1422   	; 0xb4a <__stack+0x64b>
        }
      }
      else if (rx_byte >= COMMS_START_BYTE_BASE)
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	80 3c       	cpi	r24, 0xC0	; 192
     5c0:	28 f0       	brcs	.+10     	; 0x5cc <__stack+0xcd>
      {
        cs->start_byte = rx_byte;
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	ea 81       	ldd	r30, Y+2	; 0x02
     5c6:	fb 81       	ldd	r31, Y+3	; 0x03
     5c8:	82 8b       	std	Z+18, r24	; 0x12
     5ca:	bf c2       	rjmp	.+1406   	; 0xb4a <__stack+0x64b>
        // stay in scan_state 1
      }
      else
      {
        cs->rx_packet_errors++;
     5cc:	ea 81       	ldd	r30, Y+2	; 0x02
     5ce:	fb 81       	ldd	r31, Y+3	; 0x03
     5d0:	82 85       	ldd	r24, Z+10	; 0x0a
     5d2:	93 85       	ldd	r25, Z+11	; 0x0b
     5d4:	a4 85       	ldd	r26, Z+12	; 0x0c
     5d6:	b5 85       	ldd	r27, Z+13	; 0x0d
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	a1 1d       	adc	r26, r1
     5dc:	b1 1d       	adc	r27, r1
     5de:	ea 81       	ldd	r30, Y+2	; 0x02
     5e0:	fb 81       	ldd	r31, Y+3	; 0x03
     5e2:	82 87       	std	Z+10, r24	; 0x0a
     5e4:	93 87       	std	Z+11, r25	; 0x0b
     5e6:	a4 87       	std	Z+12, r26	; 0x0c
     5e8:	b5 87       	std	Z+13, r27	; 0x0d
        cs->scan_state = 0;
     5ea:	ea 81       	ldd	r30, Y+2	; 0x02
     5ec:	fb 81       	ldd	r31, Y+3	; 0x03
     5ee:	16 8a       	std	Z+22, r1	; 0x16
     5f0:	ac c2       	rjmp	.+1368   	; 0xb4a <__stack+0x64b>
      }
      break;

    case 2:
      // expect source or destination address
      if (rx_byte & 0x80)
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	88 23       	and	r24, r24
     5f6:	fc f4       	brge	.+62     	; 0x636 <__stack+0x137>
      {
        // invalid address
        cs->rx_packet_errors++;
     5f8:	ea 81       	ldd	r30, Y+2	; 0x02
     5fa:	fb 81       	ldd	r31, Y+3	; 0x03
     5fc:	82 85       	ldd	r24, Z+10	; 0x0a
     5fe:	93 85       	ldd	r25, Z+11	; 0x0b
     600:	a4 85       	ldd	r26, Z+12	; 0x0c
     602:	b5 85       	ldd	r27, Z+13	; 0x0d
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	a1 1d       	adc	r26, r1
     608:	b1 1d       	adc	r27, r1
     60a:	ea 81       	ldd	r30, Y+2	; 0x02
     60c:	fb 81       	ldd	r31, Y+3	; 0x03
     60e:	82 87       	std	Z+10, r24	; 0x0a
     610:	93 87       	std	Z+11, r25	; 0x0b
     612:	a4 87       	std	Z+12, r26	; 0x0c
     614:	b5 87       	std	Z+13, r27	; 0x0d
        if (rx_byte >= COMMS_START_BYTE_BASE)
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	80 3c       	cpi	r24, 0xC0	; 192
     61a:	48 f0       	brcs	.+18     	; 0x62e <__stack+0x12f>
        {
          cs->start_byte = rx_byte;
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	ea 81       	ldd	r30, Y+2	; 0x02
     620:	fb 81       	ldd	r31, Y+3	; 0x03
     622:	82 8b       	std	Z+18, r24	; 0x12
          cs->scan_state = 1;
     624:	ea 81       	ldd	r30, Y+2	; 0x02
     626:	fb 81       	ldd	r31, Y+3	; 0x03
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	86 8b       	std	Z+22, r24	; 0x16
     62c:	8e c2       	rjmp	.+1308   	; 0xb4a <__stack+0x64b>
        }
        else
          cs->scan_state = 0;
     62e:	ea 81       	ldd	r30, Y+2	; 0x02
     630:	fb 81       	ldd	r31, Y+3	; 0x03
     632:	16 8a       	std	Z+22, r1	; 0x16
     634:	8a c2       	rjmp	.+1300   	; 0xb4a <__stack+0x64b>
      }
      else if (cs->start_byte & COMMS_START_HAS_SOURCE_ADDRESS)
     636:	ea 81       	ldd	r30, Y+2	; 0x02
     638:	fb 81       	ldd	r31, Y+3	; 0x03
     63a:	82 89       	ldd	r24, Z+18	; 0x12
     63c:	88 2f       	mov	r24, r24
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	88 70       	andi	r24, 0x08	; 8
     642:	90 70       	andi	r25, 0x00	; 0
     644:	00 97       	sbiw	r24, 0x00	; 0
     646:	49 f0       	breq	.+18     	; 0x65a <__stack+0x15b>
      {
        cs->source_address = rx_byte;
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	ea 81       	ldd	r30, Y+2	; 0x02
     64c:	fb 81       	ldd	r31, Y+3	; 0x03
     64e:	80 8f       	std	Z+24, r24	; 0x18
        cs->scan_state = 3;
     650:	ea 81       	ldd	r30, Y+2	; 0x02
     652:	fb 81       	ldd	r31, Y+3	; 0x03
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	86 8b       	std	Z+22, r24	; 0x16
     658:	78 c2       	rjmp	.+1264   	; 0xb4a <__stack+0x64b>
      }
      else
      {
        cs->source_address = 255;
     65a:	ea 81       	ldd	r30, Y+2	; 0x02
     65c:	fb 81       	ldd	r31, Y+3	; 0x03
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	80 8f       	std	Z+24, r24	; 0x18
        cs->destination_address = rx_byte;
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	ea 81       	ldd	r30, Y+2	; 0x02
     666:	fb 81       	ldd	r31, Y+3	; 0x03
     668:	81 8f       	std	Z+25, r24	; 0x19
        cs->scan_state = 4;
     66a:	ea 81       	ldd	r30, Y+2	; 0x02
     66c:	fb 81       	ldd	r31, Y+3	; 0x03
     66e:	84 e0       	ldi	r24, 0x04	; 4
     670:	86 8b       	std	Z+22, r24	; 0x16
     672:	6b c2       	rjmp	.+1238   	; 0xb4a <__stack+0x64b>
      }
      break;

    case 3:
      // expect destination address
      if (rx_byte & 0x80)
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	88 23       	and	r24, r24
     678:	fc f4       	brge	.+62     	; 0x6b8 <__stack+0x1b9>
      {
        // invalid address
        cs->rx_packet_errors++;
     67a:	ea 81       	ldd	r30, Y+2	; 0x02
     67c:	fb 81       	ldd	r31, Y+3	; 0x03
     67e:	82 85       	ldd	r24, Z+10	; 0x0a
     680:	93 85       	ldd	r25, Z+11	; 0x0b
     682:	a4 85       	ldd	r26, Z+12	; 0x0c
     684:	b5 85       	ldd	r27, Z+13	; 0x0d
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	a1 1d       	adc	r26, r1
     68a:	b1 1d       	adc	r27, r1
     68c:	ea 81       	ldd	r30, Y+2	; 0x02
     68e:	fb 81       	ldd	r31, Y+3	; 0x03
     690:	82 87       	std	Z+10, r24	; 0x0a
     692:	93 87       	std	Z+11, r25	; 0x0b
     694:	a4 87       	std	Z+12, r26	; 0x0c
     696:	b5 87       	std	Z+13, r27	; 0x0d
        if (rx_byte >= COMMS_START_BYTE_BASE)
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	80 3c       	cpi	r24, 0xC0	; 192
     69c:	48 f0       	brcs	.+18     	; 0x6b0 <__stack+0x1b1>
        {
          cs->start_byte = rx_byte;
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	ea 81       	ldd	r30, Y+2	; 0x02
     6a2:	fb 81       	ldd	r31, Y+3	; 0x03
     6a4:	82 8b       	std	Z+18, r24	; 0x12
          cs->scan_state = 1;
     6a6:	ea 81       	ldd	r30, Y+2	; 0x02
     6a8:	fb 81       	ldd	r31, Y+3	; 0x03
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	86 8b       	std	Z+22, r24	; 0x16
     6ae:	4d c2       	rjmp	.+1178   	; 0xb4a <__stack+0x64b>
        }
        else
          cs->scan_state = 0;
     6b0:	ea 81       	ldd	r30, Y+2	; 0x02
     6b2:	fb 81       	ldd	r31, Y+3	; 0x03
     6b4:	16 8a       	std	Z+22, r1	; 0x16
     6b6:	49 c2       	rjmp	.+1170   	; 0xb4a <__stack+0x64b>
      }
      else
      {
        cs->destination_address = rx_byte;
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	ea 81       	ldd	r30, Y+2	; 0x02
     6bc:	fb 81       	ldd	r31, Y+3	; 0x03
     6be:	81 8f       	std	Z+25, r24	; 0x19
        cs->scan_state = 4;
     6c0:	ea 81       	ldd	r30, Y+2	; 0x02
     6c2:	fb 81       	ldd	r31, Y+3	; 0x03
     6c4:	84 e0       	ldi	r24, 0x04	; 4
     6c6:	86 8b       	std	Z+22, r24	; 0x16
     6c8:	40 c2       	rjmp	.+1152   	; 0xb4a <__stack+0x64b>
      }
      break;

    case 4:
      // expect first byte of payload, or DLE for zero-length payload
      if (rx_byte & 0x80)
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	88 23       	and	r24, r24
     6ce:	3c f5       	brge	.+78     	; 0x71e <__stack+0x21f>
      {
        if (rx_byte == COMMS_DLE_BYTE)
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	8d 3b       	cpi	r24, 0xBD	; 189
     6d4:	29 f4       	brne	.+10     	; 0x6e0 <__stack+0x1e1>
          cs->scan_state = 7;
     6d6:	ea 81       	ldd	r30, Y+2	; 0x02
     6d8:	fb 81       	ldd	r31, Y+3	; 0x03
     6da:	87 e0       	ldi	r24, 0x07	; 7
     6dc:	86 8b       	std	Z+22, r24	; 0x16
     6de:	35 c2       	rjmp	.+1130   	; 0xb4a <__stack+0x64b>
        else
        {
          cs->rx_packet_errors++;
     6e0:	ea 81       	ldd	r30, Y+2	; 0x02
     6e2:	fb 81       	ldd	r31, Y+3	; 0x03
     6e4:	82 85       	ldd	r24, Z+10	; 0x0a
     6e6:	93 85       	ldd	r25, Z+11	; 0x0b
     6e8:	a4 85       	ldd	r26, Z+12	; 0x0c
     6ea:	b5 85       	ldd	r27, Z+13	; 0x0d
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	a1 1d       	adc	r26, r1
     6f0:	b1 1d       	adc	r27, r1
     6f2:	ea 81       	ldd	r30, Y+2	; 0x02
     6f4:	fb 81       	ldd	r31, Y+3	; 0x03
     6f6:	82 87       	std	Z+10, r24	; 0x0a
     6f8:	93 87       	std	Z+11, r25	; 0x0b
     6fa:	a4 87       	std	Z+12, r26	; 0x0c
     6fc:	b5 87       	std	Z+13, r27	; 0x0d
          if (rx_byte >= COMMS_START_BYTE_BASE)
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	80 3c       	cpi	r24, 0xC0	; 192
     702:	48 f0       	brcs	.+18     	; 0x716 <__stack+0x217>
          {
            cs->start_byte = rx_byte;
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	ea 81       	ldd	r30, Y+2	; 0x02
     708:	fb 81       	ldd	r31, Y+3	; 0x03
     70a:	82 8b       	std	Z+18, r24	; 0x12
            cs->scan_state = 1;
     70c:	ea 81       	ldd	r30, Y+2	; 0x02
     70e:	fb 81       	ldd	r31, Y+3	; 0x03
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	86 8b       	std	Z+22, r24	; 0x16
     714:	1a c2       	rjmp	.+1076   	; 0xb4a <__stack+0x64b>
          }
          else
            cs->scan_state = 0;
     716:	ea 81       	ldd	r30, Y+2	; 0x02
     718:	fb 81       	ldd	r31, Y+3	; 0x03
     71a:	16 8a       	std	Z+22, r1	; 0x16
     71c:	16 c2       	rjmp	.+1068   	; 0xb4a <__stack+0x64b>
        }
      }
      else
      {
        if (cs->start_byte & COMMS_START_PAYLOAD_FIRST_BYTE_MSB_HIGH)
     71e:	ea 81       	ldd	r30, Y+2	; 0x02
     720:	fb 81       	ldd	r31, Y+3	; 0x03
     722:	82 89       	ldd	r24, Z+18	; 0x12
     724:	88 2f       	mov	r24, r24
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	82 70       	andi	r24, 0x02	; 2
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	00 97       	sbiw	r24, 0x00	; 0
     72e:	49 f0       	breq	.+18     	; 0x742 <__stack+0x243>
          cs->command_bytes[0] = rx_byte | 0x80;
     730:	ea 81       	ldd	r30, Y+2	; 0x02
     732:	fb 81       	ldd	r31, Y+3	; 0x03
     734:	00 88       	ldd	r0, Z+16	; 0x10
     736:	f1 89       	ldd	r31, Z+17	; 0x11
     738:	e0 2d       	mov	r30, r0
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	80 68       	ori	r24, 0x80	; 128
     73e:	80 83       	st	Z, r24
     740:	07 c0       	rjmp	.+14     	; 0x750 <__stack+0x251>
        else
          cs->command_bytes[0] = rx_byte;
     742:	ea 81       	ldd	r30, Y+2	; 0x02
     744:	fb 81       	ldd	r31, Y+3	; 0x03
     746:	00 88       	ldd	r0, Z+16	; 0x10
     748:	f1 89       	ldd	r31, Z+17	; 0x11
     74a:	e0 2d       	mov	r30, r0
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	80 83       	st	Z, r24

        cs->command_bytes_available = 1;
     750:	ea 81       	ldd	r30, Y+2	; 0x02
     752:	fb 81       	ldd	r31, Y+3	; 0x03
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	84 8b       	std	Z+20, r24	; 0x14
        cs->scan_bytecheck = 1;
     758:	ea 81       	ldd	r30, Y+2	; 0x02
     75a:	fb 81       	ldd	r31, Y+3	; 0x03
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	87 8b       	std	Z+23, r24	; 0x17
        cs->last_pre_dle = 0; // flag for whether a START byte was received prior to a DLE in the payload (it is assumed no START byte is 0)
     760:	ea 81       	ldd	r30, Y+2	; 0x02
     762:	fb 81       	ldd	r31, Y+3	; 0x03
     764:	15 8a       	std	Z+21, r1	; 0x15
        cs->scan_state = 5;
     766:	ea 81       	ldd	r30, Y+2	; 0x02
     768:	fb 81       	ldd	r31, Y+3	; 0x03
     76a:	85 e0       	ldi	r24, 0x05	; 5
     76c:	86 8b       	std	Z+22, r24	; 0x16
     76e:	ed c1       	rjmp	.+986    	; 0xb4a <__stack+0x64b>
      }
      break;

    case 5:
      // beyond first byte of payload, previous byte was not DLE
      if (rx_byte == COMMS_DLE_BYTE)
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	8d 3b       	cpi	r24, 0xBD	; 189
     774:	29 f4       	brne	.+10     	; 0x780 <__stack+0x281>
        cs->scan_state = 6; // "destuff" DLE byte
     776:	ea 81       	ldd	r30, Y+2	; 0x02
     778:	fb 81       	ldd	r31, Y+3	; 0x03
     77a:	86 e0       	ldi	r24, 0x06	; 6
     77c:	86 8b       	std	Z+22, r24	; 0x16
     77e:	e5 c1       	rjmp	.+970    	; 0xb4a <__stack+0x64b>
      else if (cs->command_bytes_available >= cs->command_bytes_max_length)
     780:	ea 81       	ldd	r30, Y+2	; 0x02
     782:	fb 81       	ldd	r31, Y+3	; 0x03
     784:	94 89       	ldd	r25, Z+20	; 0x14
     786:	ea 81       	ldd	r30, Y+2	; 0x02
     788:	fb 81       	ldd	r31, Y+3	; 0x03
     78a:	83 89       	ldd	r24, Z+19	; 0x13
     78c:	98 17       	cp	r25, r24
     78e:	98 f0       	brcs	.+38     	; 0x7b6 <__stack+0x2b7>
      {
        // payload has overflowed payload buffer, abort packet
        cs->rx_packet_errors++;
     790:	ea 81       	ldd	r30, Y+2	; 0x02
     792:	fb 81       	ldd	r31, Y+3	; 0x03
     794:	82 85       	ldd	r24, Z+10	; 0x0a
     796:	93 85       	ldd	r25, Z+11	; 0x0b
     798:	a4 85       	ldd	r26, Z+12	; 0x0c
     79a:	b5 85       	ldd	r27, Z+13	; 0x0d
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	a1 1d       	adc	r26, r1
     7a0:	b1 1d       	adc	r27, r1
     7a2:	ea 81       	ldd	r30, Y+2	; 0x02
     7a4:	fb 81       	ldd	r31, Y+3	; 0x03
     7a6:	82 87       	std	Z+10, r24	; 0x0a
     7a8:	93 87       	std	Z+11, r25	; 0x0b
     7aa:	a4 87       	std	Z+12, r26	; 0x0c
     7ac:	b5 87       	std	Z+13, r27	; 0x0d
        cs->scan_state = 0;
     7ae:	ea 81       	ldd	r30, Y+2	; 0x02
     7b0:	fb 81       	ldd	r31, Y+3	; 0x03
     7b2:	16 8a       	std	Z+22, r1	; 0x16
     7b4:	ca c1       	rjmp	.+916    	; 0xb4a <__stack+0x64b>
      }
      else
      {
        // add byte to payload buffer
        cs->command_bytes[cs->command_bytes_available++] = rx_byte;
     7b6:	ea 81       	ldd	r30, Y+2	; 0x02
     7b8:	fb 81       	ldd	r31, Y+3	; 0x03
     7ba:	20 89       	ldd	r18, Z+16	; 0x10
     7bc:	31 89       	ldd	r19, Z+17	; 0x11
     7be:	ea 81       	ldd	r30, Y+2	; 0x02
     7c0:	fb 81       	ldd	r31, Y+3	; 0x03
     7c2:	44 89       	ldd	r20, Z+20	; 0x14
     7c4:	84 2f       	mov	r24, r20
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	f9 01       	movw	r30, r18
     7ca:	e8 0f       	add	r30, r24
     7cc:	f9 1f       	adc	r31, r25
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	80 83       	st	Z, r24
     7d2:	84 2f       	mov	r24, r20
     7d4:	8f 5f       	subi	r24, 0xFF	; 255
     7d6:	ea 81       	ldd	r30, Y+2	; 0x02
     7d8:	fb 81       	ldd	r31, Y+3	; 0x03
     7da:	84 8b       	std	Z+20, r24	; 0x14
        cs->last_pre_dle = rx_byte; // set to detect START DLE sequence in scan_state 5
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	ea 81       	ldd	r30, Y+2	; 0x02
     7e0:	fb 81       	ldd	r31, Y+3	; 0x03
     7e2:	85 8b       	std	Z+21, r24	; 0x15

        if (cs->scan_bytecheck >= 127)
     7e4:	ea 81       	ldd	r30, Y+2	; 0x02
     7e6:	fb 81       	ldd	r31, Y+3	; 0x03
     7e8:	87 89       	ldd	r24, Z+23	; 0x17
     7ea:	8f 37       	cpi	r24, 0x7F	; 127
     7ec:	20 f0       	brcs	.+8      	; 0x7f6 <__stack+0x2f7>
          cs->scan_bytecheck = 0; // bytecheck cannot be > 127, reset counter
     7ee:	ea 81       	ldd	r30, Y+2	; 0x02
     7f0:	fb 81       	ldd	r31, Y+3	; 0x03
     7f2:	17 8a       	std	Z+23, r1	; 0x17
     7f4:	aa c1       	rjmp	.+852    	; 0xb4a <__stack+0x64b>
        else
          cs->scan_bytecheck++;
     7f6:	ea 81       	ldd	r30, Y+2	; 0x02
     7f8:	fb 81       	ldd	r31, Y+3	; 0x03
     7fa:	87 89       	ldd	r24, Z+23	; 0x17
     7fc:	8f 5f       	subi	r24, 0xFF	; 255
     7fe:	ea 81       	ldd	r30, Y+2	; 0x02
     800:	fb 81       	ldd	r31, Y+3	; 0x03
     802:	87 8b       	std	Z+23, r24	; 0x17
     804:	a2 c1       	rjmp	.+836    	; 0xb4a <__stack+0x64b>
      }
      break;

    case 6:
      // beyond first byte of payload, previous byte was DLE
      if (rx_byte == COMMS_DLE_BYTE)
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	8d 3b       	cpi	r24, 0xBD	; 189
     80a:	09 f0       	breq	.+2      	; 0x80e <__stack+0x30f>
     80c:	46 c0       	rjmp	.+140    	; 0x89a <__stack+0x39b>
      {
        if (cs->command_bytes_available >= cs->command_bytes_max_length)
     80e:	ea 81       	ldd	r30, Y+2	; 0x02
     810:	fb 81       	ldd	r31, Y+3	; 0x03
     812:	94 89       	ldd	r25, Z+20	; 0x14
     814:	ea 81       	ldd	r30, Y+2	; 0x02
     816:	fb 81       	ldd	r31, Y+3	; 0x03
     818:	83 89       	ldd	r24, Z+19	; 0x13
     81a:	98 17       	cp	r25, r24
     81c:	98 f0       	brcs	.+38     	; 0x844 <__stack+0x345>
        {
          // payload has overflowed payload buffer, abort packet
          cs->rx_packet_errors++;
     81e:	ea 81       	ldd	r30, Y+2	; 0x02
     820:	fb 81       	ldd	r31, Y+3	; 0x03
     822:	82 85       	ldd	r24, Z+10	; 0x0a
     824:	93 85       	ldd	r25, Z+11	; 0x0b
     826:	a4 85       	ldd	r26, Z+12	; 0x0c
     828:	b5 85       	ldd	r27, Z+13	; 0x0d
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	a1 1d       	adc	r26, r1
     82e:	b1 1d       	adc	r27, r1
     830:	ea 81       	ldd	r30, Y+2	; 0x02
     832:	fb 81       	ldd	r31, Y+3	; 0x03
     834:	82 87       	std	Z+10, r24	; 0x0a
     836:	93 87       	std	Z+11, r25	; 0x0b
     838:	a4 87       	std	Z+12, r26	; 0x0c
     83a:	b5 87       	std	Z+13, r27	; 0x0d
          cs->scan_state = 0;
     83c:	ea 81       	ldd	r30, Y+2	; 0x02
     83e:	fb 81       	ldd	r31, Y+3	; 0x03
     840:	16 8a       	std	Z+22, r1	; 0x16
     842:	83 c1       	rjmp	.+774    	; 0xb4a <__stack+0x64b>
        }
        else
        {
          // add byte to payload buffer
          cs->command_bytes[cs->command_bytes_available++] = rx_byte;
     844:	ea 81       	ldd	r30, Y+2	; 0x02
     846:	fb 81       	ldd	r31, Y+3	; 0x03
     848:	20 89       	ldd	r18, Z+16	; 0x10
     84a:	31 89       	ldd	r19, Z+17	; 0x11
     84c:	ea 81       	ldd	r30, Y+2	; 0x02
     84e:	fb 81       	ldd	r31, Y+3	; 0x03
     850:	44 89       	ldd	r20, Z+20	; 0x14
     852:	84 2f       	mov	r24, r20
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	f9 01       	movw	r30, r18
     858:	e8 0f       	add	r30, r24
     85a:	f9 1f       	adc	r31, r25
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	80 83       	st	Z, r24
     860:	84 2f       	mov	r24, r20
     862:	8f 5f       	subi	r24, 0xFF	; 255
     864:	ea 81       	ldd	r30, Y+2	; 0x02
     866:	fb 81       	ldd	r31, Y+3	; 0x03
     868:	84 8b       	std	Z+20, r24	; 0x14
            cs->last_pre_dle = 0; // no START byte was received prior to this DLE
     86a:	ea 81       	ldd	r30, Y+2	; 0x02
     86c:	fb 81       	ldd	r31, Y+3	; 0x03
     86e:	15 8a       	std	Z+21, r1	; 0x15

          if (cs->scan_bytecheck >= 127)
     870:	ea 81       	ldd	r30, Y+2	; 0x02
     872:	fb 81       	ldd	r31, Y+3	; 0x03
     874:	87 89       	ldd	r24, Z+23	; 0x17
     876:	8f 37       	cpi	r24, 0x7F	; 127
     878:	20 f0       	brcs	.+8      	; 0x882 <__stack+0x383>
            cs->scan_bytecheck = 0; // bytecheck cannot be > 127, reset counter
     87a:	ea 81       	ldd	r30, Y+2	; 0x02
     87c:	fb 81       	ldd	r31, Y+3	; 0x03
     87e:	17 8a       	std	Z+23, r1	; 0x17
     880:	07 c0       	rjmp	.+14     	; 0x890 <__stack+0x391>
          else
            cs->scan_bytecheck++;
     882:	ea 81       	ldd	r30, Y+2	; 0x02
     884:	fb 81       	ldd	r31, Y+3	; 0x03
     886:	87 89       	ldd	r24, Z+23	; 0x17
     888:	8f 5f       	subi	r24, 0xFF	; 255
     88a:	ea 81       	ldd	r30, Y+2	; 0x02
     88c:	fb 81       	ldd	r31, Y+3	; 0x03
     88e:	87 8b       	std	Z+23, r24	; 0x17

          cs->scan_state = 5;
     890:	ea 81       	ldd	r30, Y+2	; 0x02
     892:	fb 81       	ldd	r31, Y+3	; 0x03
     894:	85 e0       	ldi	r24, 0x05	; 5
     896:	86 8b       	std	Z+22, r24	; 0x16
     898:	58 c1       	rjmp	.+688    	; 0xb4a <__stack+0x64b>
        }
      }
      else if (rx_byte == COMMS_ETX_BYTE)
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	8e 3b       	cpi	r24, 0xBE	; 190
     89e:	29 f4       	brne	.+10     	; 0x8aa <__stack+0x3ab>
        cs->scan_state = 8;
     8a0:	ea 81       	ldd	r30, Y+2	; 0x02
     8a2:	fb 81       	ldd	r31, Y+3	; 0x03
     8a4:	88 e0       	ldi	r24, 0x08	; 8
     8a6:	86 8b       	std	Z+22, r24	; 0x16
     8a8:	50 c1       	rjmp	.+672    	; 0xb4a <__stack+0x64b>
      else
      {
        cs->rx_packet_errors++; // assume last packet was incomplete and increment error count
     8aa:	ea 81       	ldd	r30, Y+2	; 0x02
     8ac:	fb 81       	ldd	r31, Y+3	; 0x03
     8ae:	82 85       	ldd	r24, Z+10	; 0x0a
     8b0:	93 85       	ldd	r25, Z+11	; 0x0b
     8b2:	a4 85       	ldd	r26, Z+12	; 0x0c
     8b4:	b5 85       	ldd	r27, Z+13	; 0x0d
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	a1 1d       	adc	r26, r1
     8ba:	b1 1d       	adc	r27, r1
     8bc:	ea 81       	ldd	r30, Y+2	; 0x02
     8be:	fb 81       	ldd	r31, Y+3	; 0x03
     8c0:	82 87       	std	Z+10, r24	; 0x0a
     8c2:	93 87       	std	Z+11, r25	; 0x0b
     8c4:	a4 87       	std	Z+12, r26	; 0x0c
     8c6:	b5 87       	std	Z+13, r27	; 0x0d
        if (rx_byte >= COMMS_START_BYTE_BASE)
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	80 3c       	cpi	r24, 0xC0	; 192
     8cc:	48 f0       	brcs	.+18     	; 0x8e0 <__stack+0x3e1>
        {
          cs->start_byte = rx_byte;
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	ea 81       	ldd	r30, Y+2	; 0x02
     8d2:	fb 81       	ldd	r31, Y+3	; 0x03
     8d4:	82 8b       	std	Z+18, r24	; 0x12
          cs->scan_state = 1;
     8d6:	ea 81       	ldd	r30, Y+2	; 0x02
     8d8:	fb 81       	ldd	r31, Y+3	; 0x03
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	86 8b       	std	Z+22, r24	; 0x16
     8de:	35 c1       	rjmp	.+618    	; 0xb4a <__stack+0x64b>
        }
        else if (cs->last_pre_dle >= COMMS_START_BYTE_BASE)
     8e0:	ea 81       	ldd	r30, Y+2	; 0x02
     8e2:	fb 81       	ldd	r31, Y+3	; 0x03
     8e4:	85 89       	ldd	r24, Z+21	; 0x15
     8e6:	80 3c       	cpi	r24, 0xC0	; 192
     8e8:	08 f4       	brcc	.+2      	; 0x8ec <__stack+0x3ed>
     8ea:	bd c0       	rjmp	.+378    	; 0xa66 <__stack+0x567>
        {
          // assume have actually found the START DLE of a new packet, and rx_byte is the next byte
          cs->start_byte = cs->last_pre_dle;
     8ec:	ea 81       	ldd	r30, Y+2	; 0x02
     8ee:	fb 81       	ldd	r31, Y+3	; 0x03
     8f0:	85 89       	ldd	r24, Z+21	; 0x15
     8f2:	ea 81       	ldd	r30, Y+2	; 0x02
     8f4:	fb 81       	ldd	r31, Y+3	; 0x03
     8f6:	82 8b       	std	Z+18, r24	; 0x12
          cs->is_single_class = (cs->start_byte & COMMS_START_SINGLE_CLASS) ? TRUE : FALSE;
     8f8:	ea 81       	ldd	r30, Y+2	; 0x02
     8fa:	fb 81       	ldd	r31, Y+3	; 0x03
     8fc:	82 89       	ldd	r24, Z+18	; 0x12
     8fe:	88 2f       	mov	r24, r24
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	81 70       	andi	r24, 0x01	; 1
     904:	90 70       	andi	r25, 0x00	; 0
     906:	88 23       	and	r24, r24
     908:	19 f0       	breq	.+6      	; 0x910 <__stack+0x411>
     90a:	31 e0       	ldi	r19, 0x01	; 1
     90c:	3d 83       	std	Y+5, r19	; 0x05
     90e:	01 c0       	rjmp	.+2      	; 0x912 <__stack+0x413>
     910:	1d 82       	std	Y+5, r1	; 0x05
     912:	ea 81       	ldd	r30, Y+2	; 0x02
     914:	fb 81       	ldd	r31, Y+3	; 0x03
     916:	8d 81       	ldd	r24, Y+5	; 0x05
     918:	87 87       	std	Z+15, r24	; 0x0f
          if (cs->start_byte & COMMS_START_HAS_ADDRESS)
     91a:	ea 81       	ldd	r30, Y+2	; 0x02
     91c:	fb 81       	ldd	r31, Y+3	; 0x03
     91e:	82 89       	ldd	r24, Z+18	; 0x12
     920:	88 2f       	mov	r24, r24
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	8c 70       	andi	r24, 0x0C	; 12
     926:	90 70       	andi	r25, 0x00	; 0
     928:	00 97       	sbiw	r24, 0x00	; 0
     92a:	09 f4       	brne	.+2      	; 0x92e <__stack+0x42f>
     92c:	41 c0       	rjmp	.+130    	; 0x9b0 <__stack+0x4b1>
          {
            // do scan_state 2 work

            // expect source or destination address
            if (rx_byte & 0x80)
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	88 23       	and	r24, r24
     932:	fc f4       	brge	.+62     	; 0x972 <__stack+0x473>
            {
              // invalid address
              cs->rx_packet_errors++;
     934:	ea 81       	ldd	r30, Y+2	; 0x02
     936:	fb 81       	ldd	r31, Y+3	; 0x03
     938:	82 85       	ldd	r24, Z+10	; 0x0a
     93a:	93 85       	ldd	r25, Z+11	; 0x0b
     93c:	a4 85       	ldd	r26, Z+12	; 0x0c
     93e:	b5 85       	ldd	r27, Z+13	; 0x0d
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	a1 1d       	adc	r26, r1
     944:	b1 1d       	adc	r27, r1
     946:	ea 81       	ldd	r30, Y+2	; 0x02
     948:	fb 81       	ldd	r31, Y+3	; 0x03
     94a:	82 87       	std	Z+10, r24	; 0x0a
     94c:	93 87       	std	Z+11, r25	; 0x0b
     94e:	a4 87       	std	Z+12, r26	; 0x0c
     950:	b5 87       	std	Z+13, r27	; 0x0d
              if (rx_byte >= COMMS_START_BYTE_BASE)
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	80 3c       	cpi	r24, 0xC0	; 192
     956:	48 f0       	brcs	.+18     	; 0x96a <__stack+0x46b>
              {
                cs->start_byte = rx_byte;
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	ea 81       	ldd	r30, Y+2	; 0x02
     95c:	fb 81       	ldd	r31, Y+3	; 0x03
     95e:	82 8b       	std	Z+18, r24	; 0x12
                cs->scan_state = 1;
     960:	ea 81       	ldd	r30, Y+2	; 0x02
     962:	fb 81       	ldd	r31, Y+3	; 0x03
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	86 8b       	std	Z+22, r24	; 0x16
     968:	f0 c0       	rjmp	.+480    	; 0xb4a <__stack+0x64b>
              }
              else
                cs->scan_state = 0;
     96a:	ea 81       	ldd	r30, Y+2	; 0x02
     96c:	fb 81       	ldd	r31, Y+3	; 0x03
     96e:	16 8a       	std	Z+22, r1	; 0x16
     970:	ec c0       	rjmp	.+472    	; 0xb4a <__stack+0x64b>
            }
            else if (cs->start_byte & COMMS_START_HAS_SOURCE_ADDRESS)
     972:	ea 81       	ldd	r30, Y+2	; 0x02
     974:	fb 81       	ldd	r31, Y+3	; 0x03
     976:	82 89       	ldd	r24, Z+18	; 0x12
     978:	88 2f       	mov	r24, r24
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	88 70       	andi	r24, 0x08	; 8
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	49 f0       	breq	.+18     	; 0x996 <__stack+0x497>
            {
              cs->source_address = rx_byte;
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	ea 81       	ldd	r30, Y+2	; 0x02
     988:	fb 81       	ldd	r31, Y+3	; 0x03
     98a:	80 8f       	std	Z+24, r24	; 0x18
              cs->scan_state = 3;
     98c:	ea 81       	ldd	r30, Y+2	; 0x02
     98e:	fb 81       	ldd	r31, Y+3	; 0x03
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	86 8b       	std	Z+22, r24	; 0x16
     994:	da c0       	rjmp	.+436    	; 0xb4a <__stack+0x64b>
            }
            else
            {
              cs->source_address = 255;
     996:	ea 81       	ldd	r30, Y+2	; 0x02
     998:	fb 81       	ldd	r31, Y+3	; 0x03
     99a:	8f ef       	ldi	r24, 0xFF	; 255
     99c:	80 8f       	std	Z+24, r24	; 0x18
              cs->destination_address = rx_byte;
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	ea 81       	ldd	r30, Y+2	; 0x02
     9a2:	fb 81       	ldd	r31, Y+3	; 0x03
     9a4:	81 8f       	std	Z+25, r24	; 0x19
              cs->scan_state = 4;
     9a6:	ea 81       	ldd	r30, Y+2	; 0x02
     9a8:	fb 81       	ldd	r31, Y+3	; 0x03
     9aa:	84 e0       	ldi	r24, 0x04	; 4
     9ac:	86 8b       	std	Z+22, r24	; 0x16
     9ae:	cd c0       	rjmp	.+410    	; 0xb4a <__stack+0x64b>
            }
          }
          else
          {
            cs->source_address = 255;
     9b0:	ea 81       	ldd	r30, Y+2	; 0x02
     9b2:	fb 81       	ldd	r31, Y+3	; 0x03
     9b4:	8f ef       	ldi	r24, 0xFF	; 255
     9b6:	80 8f       	std	Z+24, r24	; 0x18
            cs->destination_address = 255;
     9b8:	ea 81       	ldd	r30, Y+2	; 0x02
     9ba:	fb 81       	ldd	r31, Y+3	; 0x03
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	81 8f       	std	Z+25, r24	; 0x19
            // do scan_state 4 work

            // expect first byte of payload, or DLE for zero-length payload
            if (rx_byte & 0x80)
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	88 23       	and	r24, r24
     9c4:	3c f5       	brge	.+78     	; 0xa14 <__stack+0x515>
            {
              if (rx_byte == COMMS_DLE_BYTE)
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	8d 3b       	cpi	r24, 0xBD	; 189
     9ca:	29 f4       	brne	.+10     	; 0x9d6 <__stack+0x4d7>
                cs->scan_state = 7;
     9cc:	ea 81       	ldd	r30, Y+2	; 0x02
     9ce:	fb 81       	ldd	r31, Y+3	; 0x03
     9d0:	87 e0       	ldi	r24, 0x07	; 7
     9d2:	86 8b       	std	Z+22, r24	; 0x16
     9d4:	ba c0       	rjmp	.+372    	; 0xb4a <__stack+0x64b>
              else
              {
                cs->rx_packet_errors++;
     9d6:	ea 81       	ldd	r30, Y+2	; 0x02
     9d8:	fb 81       	ldd	r31, Y+3	; 0x03
     9da:	82 85       	ldd	r24, Z+10	; 0x0a
     9dc:	93 85       	ldd	r25, Z+11	; 0x0b
     9de:	a4 85       	ldd	r26, Z+12	; 0x0c
     9e0:	b5 85       	ldd	r27, Z+13	; 0x0d
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	a1 1d       	adc	r26, r1
     9e6:	b1 1d       	adc	r27, r1
     9e8:	ea 81       	ldd	r30, Y+2	; 0x02
     9ea:	fb 81       	ldd	r31, Y+3	; 0x03
     9ec:	82 87       	std	Z+10, r24	; 0x0a
     9ee:	93 87       	std	Z+11, r25	; 0x0b
     9f0:	a4 87       	std	Z+12, r26	; 0x0c
     9f2:	b5 87       	std	Z+13, r27	; 0x0d
                if (rx_byte >= COMMS_START_BYTE_BASE)
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	80 3c       	cpi	r24, 0xC0	; 192
     9f8:	48 f0       	brcs	.+18     	; 0xa0c <__stack+0x50d>
                {
                  cs->start_byte = rx_byte;
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	ea 81       	ldd	r30, Y+2	; 0x02
     9fe:	fb 81       	ldd	r31, Y+3	; 0x03
     a00:	82 8b       	std	Z+18, r24	; 0x12
                  cs->scan_state = 1;
     a02:	ea 81       	ldd	r30, Y+2	; 0x02
     a04:	fb 81       	ldd	r31, Y+3	; 0x03
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	86 8b       	std	Z+22, r24	; 0x16
     a0a:	9f c0       	rjmp	.+318    	; 0xb4a <__stack+0x64b>
                }
                else
                  cs->scan_state = 0;
     a0c:	ea 81       	ldd	r30, Y+2	; 0x02
     a0e:	fb 81       	ldd	r31, Y+3	; 0x03
     a10:	16 8a       	std	Z+22, r1	; 0x16
     a12:	9b c0       	rjmp	.+310    	; 0xb4a <__stack+0x64b>
              }
            }
            else
            {
              if (cs->start_byte & COMMS_START_PAYLOAD_FIRST_BYTE_MSB_HIGH)
     a14:	ea 81       	ldd	r30, Y+2	; 0x02
     a16:	fb 81       	ldd	r31, Y+3	; 0x03
     a18:	82 89       	ldd	r24, Z+18	; 0x12
     a1a:	88 2f       	mov	r24, r24
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	82 70       	andi	r24, 0x02	; 2
     a20:	90 70       	andi	r25, 0x00	; 0
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	49 f0       	breq	.+18     	; 0xa38 <__stack+0x539>
                cs->command_bytes[0] = rx_byte | 0x80;
     a26:	ea 81       	ldd	r30, Y+2	; 0x02
     a28:	fb 81       	ldd	r31, Y+3	; 0x03
     a2a:	00 88       	ldd	r0, Z+16	; 0x10
     a2c:	f1 89       	ldd	r31, Z+17	; 0x11
     a2e:	e0 2d       	mov	r30, r0
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	80 68       	ori	r24, 0x80	; 128
     a34:	80 83       	st	Z, r24
     a36:	07 c0       	rjmp	.+14     	; 0xa46 <__stack+0x547>
              else
                cs->command_bytes[0] = rx_byte;
     a38:	ea 81       	ldd	r30, Y+2	; 0x02
     a3a:	fb 81       	ldd	r31, Y+3	; 0x03
     a3c:	00 88       	ldd	r0, Z+16	; 0x10
     a3e:	f1 89       	ldd	r31, Z+17	; 0x11
     a40:	e0 2d       	mov	r30, r0
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	80 83       	st	Z, r24
      
              cs->command_bytes_available = 1;
     a46:	ea 81       	ldd	r30, Y+2	; 0x02
     a48:	fb 81       	ldd	r31, Y+3	; 0x03
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	84 8b       	std	Z+20, r24	; 0x14
              cs->scan_bytecheck = 1;
     a4e:	ea 81       	ldd	r30, Y+2	; 0x02
     a50:	fb 81       	ldd	r31, Y+3	; 0x03
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	87 8b       	std	Z+23, r24	; 0x17
              cs->last_pre_dle = 0; // flag for whether a START byte was received prior to a DLE in the payload (it is assumed no START byte is 0)
     a56:	ea 81       	ldd	r30, Y+2	; 0x02
     a58:	fb 81       	ldd	r31, Y+3	; 0x03
     a5a:	15 8a       	std	Z+21, r1	; 0x15
              cs->scan_state = 5;
     a5c:	ea 81       	ldd	r30, Y+2	; 0x02
     a5e:	fb 81       	ldd	r31, Y+3	; 0x03
     a60:	85 e0       	ldi	r24, 0x05	; 5
     a62:	86 8b       	std	Z+22, r24	; 0x16
     a64:	72 c0       	rjmp	.+228    	; 0xb4a <__stack+0x64b>
            }
          }
        }
        else
          cs->scan_state = 0;
     a66:	ea 81       	ldd	r30, Y+2	; 0x02
     a68:	fb 81       	ldd	r31, Y+3	; 0x03
     a6a:	16 8a       	std	Z+22, r1	; 0x16
     a6c:	6e c0       	rjmp	.+220    	; 0xb4a <__stack+0x64b>
      }
      break;

    case 7:
      // first byte of payload was DLE
      if (rx_byte == COMMS_ETX_BYTE)
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	8e 3b       	cpi	r24, 0xBE	; 190
     a72:	59 f4       	brne	.+22     	; 0xa8a <__stack+0x58b>
      {
        cs->command_bytes_available = 0;
     a74:	ea 81       	ldd	r30, Y+2	; 0x02
     a76:	fb 81       	ldd	r31, Y+3	; 0x03
     a78:	14 8a       	std	Z+20, r1	; 0x14
        cs->scan_bytecheck = 0;
     a7a:	ea 81       	ldd	r30, Y+2	; 0x02
     a7c:	fb 81       	ldd	r31, Y+3	; 0x03
     a7e:	17 8a       	std	Z+23, r1	; 0x17
        cs->scan_state = 8;
     a80:	ea 81       	ldd	r30, Y+2	; 0x02
     a82:	fb 81       	ldd	r31, Y+3	; 0x03
     a84:	88 e0       	ldi	r24, 0x08	; 8
     a86:	86 8b       	std	Z+22, r24	; 0x16
     a88:	60 c0       	rjmp	.+192    	; 0xb4a <__stack+0x64b>
      }
      else
      {
        cs->rx_packet_errors++;
     a8a:	ea 81       	ldd	r30, Y+2	; 0x02
     a8c:	fb 81       	ldd	r31, Y+3	; 0x03
     a8e:	82 85       	ldd	r24, Z+10	; 0x0a
     a90:	93 85       	ldd	r25, Z+11	; 0x0b
     a92:	a4 85       	ldd	r26, Z+12	; 0x0c
     a94:	b5 85       	ldd	r27, Z+13	; 0x0d
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	a1 1d       	adc	r26, r1
     a9a:	b1 1d       	adc	r27, r1
     a9c:	ea 81       	ldd	r30, Y+2	; 0x02
     a9e:	fb 81       	ldd	r31, Y+3	; 0x03
     aa0:	82 87       	std	Z+10, r24	; 0x0a
     aa2:	93 87       	std	Z+11, r25	; 0x0b
     aa4:	a4 87       	std	Z+12, r26	; 0x0c
     aa6:	b5 87       	std	Z+13, r27	; 0x0d
        if (rx_byte >= COMMS_START_BYTE_BASE)
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	80 3c       	cpi	r24, 0xC0	; 192
     aac:	48 f0       	brcs	.+18     	; 0xac0 <__stack+0x5c1>
        {
          cs->start_byte = rx_byte;
     aae:	89 81       	ldd	r24, Y+1	; 0x01
     ab0:	ea 81       	ldd	r30, Y+2	; 0x02
     ab2:	fb 81       	ldd	r31, Y+3	; 0x03
     ab4:	82 8b       	std	Z+18, r24	; 0x12
          cs->scan_state = 1;
     ab6:	ea 81       	ldd	r30, Y+2	; 0x02
     ab8:	fb 81       	ldd	r31, Y+3	; 0x03
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	86 8b       	std	Z+22, r24	; 0x16
     abe:	45 c0       	rjmp	.+138    	; 0xb4a <__stack+0x64b>
        }
        else
          cs->scan_state = 0;
     ac0:	ea 81       	ldd	r30, Y+2	; 0x02
     ac2:	fb 81       	ldd	r31, Y+3	; 0x03
     ac4:	16 8a       	std	Z+22, r1	; 0x16
     ac6:	41 c0       	rjmp	.+130    	; 0xb4a <__stack+0x64b>
      }
      break;

    case 8:
      // expect bytecheck byte
      if (rx_byte > 127)
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	88 23       	and	r24, r24
     acc:	fc f4       	brge	.+62     	; 0xb0c <__stack+0x60d>
      {
        cs->rx_packet_errors++;
     ace:	ea 81       	ldd	r30, Y+2	; 0x02
     ad0:	fb 81       	ldd	r31, Y+3	; 0x03
     ad2:	82 85       	ldd	r24, Z+10	; 0x0a
     ad4:	93 85       	ldd	r25, Z+11	; 0x0b
     ad6:	a4 85       	ldd	r26, Z+12	; 0x0c
     ad8:	b5 85       	ldd	r27, Z+13	; 0x0d
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	a1 1d       	adc	r26, r1
     ade:	b1 1d       	adc	r27, r1
     ae0:	ea 81       	ldd	r30, Y+2	; 0x02
     ae2:	fb 81       	ldd	r31, Y+3	; 0x03
     ae4:	82 87       	std	Z+10, r24	; 0x0a
     ae6:	93 87       	std	Z+11, r25	; 0x0b
     ae8:	a4 87       	std	Z+12, r26	; 0x0c
     aea:	b5 87       	std	Z+13, r27	; 0x0d
        if (rx_byte >= COMMS_START_BYTE_BASE)
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	80 3c       	cpi	r24, 0xC0	; 192
     af0:	48 f0       	brcs	.+18     	; 0xb04 <__stack+0x605>
        {
          cs->start_byte = rx_byte;
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	ea 81       	ldd	r30, Y+2	; 0x02
     af6:	fb 81       	ldd	r31, Y+3	; 0x03
     af8:	82 8b       	std	Z+18, r24	; 0x12
          cs->scan_state = 1;
     afa:	ea 81       	ldd	r30, Y+2	; 0x02
     afc:	fb 81       	ldd	r31, Y+3	; 0x03
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	86 8b       	std	Z+22, r24	; 0x16
     b02:	23 c0       	rjmp	.+70     	; 0xb4a <__stack+0x64b>
        }
        else
          cs->scan_state = 0;
     b04:	ea 81       	ldd	r30, Y+2	; 0x02
     b06:	fb 81       	ldd	r31, Y+3	; 0x03
     b08:	16 8a       	std	Z+22, r1	; 0x16
     b0a:	1f c0       	rjmp	.+62     	; 0xb4a <__stack+0x64b>
      }
      else if (rx_byte != cs->scan_bytecheck)
     b0c:	ea 81       	ldd	r30, Y+2	; 0x02
     b0e:	fb 81       	ldd	r31, Y+3	; 0x03
     b10:	97 89       	ldd	r25, Z+23	; 0x17
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	98 17       	cp	r25, r24
     b16:	99 f0       	breq	.+38     	; 0xb3e <__stack+0x63f>
      {
        // bytecheck mismatch; some payload bytes have been missed
        cs->rx_packet_errors++;
     b18:	ea 81       	ldd	r30, Y+2	; 0x02
     b1a:	fb 81       	ldd	r31, Y+3	; 0x03
     b1c:	82 85       	ldd	r24, Z+10	; 0x0a
     b1e:	93 85       	ldd	r25, Z+11	; 0x0b
     b20:	a4 85       	ldd	r26, Z+12	; 0x0c
     b22:	b5 85       	ldd	r27, Z+13	; 0x0d
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	a1 1d       	adc	r26, r1
     b28:	b1 1d       	adc	r27, r1
     b2a:	ea 81       	ldd	r30, Y+2	; 0x02
     b2c:	fb 81       	ldd	r31, Y+3	; 0x03
     b2e:	82 87       	std	Z+10, r24	; 0x0a
     b30:	93 87       	std	Z+11, r25	; 0x0b
     b32:	a4 87       	std	Z+12, r26	; 0x0c
     b34:	b5 87       	std	Z+13, r27	; 0x0d
        cs->scan_state = 0;
     b36:	ea 81       	ldd	r30, Y+2	; 0x02
     b38:	fb 81       	ldd	r31, Y+3	; 0x03
     b3a:	16 8a       	std	Z+22, r1	; 0x16
     b3c:	06 c0       	rjmp	.+12     	; 0xb4a <__stack+0x64b>
      }
      else
      {
        cs->scan_state = 0; // reset scan_state
     b3e:	ea 81       	ldd	r30, Y+2	; 0x02
     b40:	fb 81       	ldd	r31, Y+3	; 0x03
     b42:	16 8a       	std	Z+22, r1	; 0x16
        return (TRUE); // flag complete and verified packet has been received
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	9c 83       	std	Y+4, r25	; 0x04
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <__stack+0x64d>
      }
      break;

  } // end of scan_state switch

  return (FALSE); // flag no complete packet has been found yet
     b4a:	1c 82       	std	Y+4, r1	; 0x04
     b4c:	8c 81       	ldd	r24, Y+4	; 0x04
}
     b4e:	28 96       	adiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <comms_update>:

void comms_update()
{
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
  // check PAYLOAD RX FIFO buffer
  if (payload_stream.rx_fifo.tail != payload_stream.rx_fifo.head)
     b68:	90 91 bc 02 	lds	r25, 0x02BC
     b6c:	80 91 bb 02 	lds	r24, 0x02BB
     b70:	98 17       	cp	r25, r24
     b72:	79 f0       	breq	.+30     	; 0xb92 <comms_update+0x32>
  {
    if (comms_packet_scan(&payload_stream))
     b74:	8b eb       	ldi	r24, 0xBB	; 187
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	0e 94 2b 02 	call	0x456	; 0x456 <comms_packet_scan>
     b7c:	88 23       	and	r24, r24
     b7e:	49 f0       	breq	.+18     	; 0xb92 <comms_update+0x32>
      module_packet_scan(payload_stream.command_bytes, payload_stream.command_bytes_available);
     b80:	20 91 cf 02 	lds	r18, 0x02CF
     b84:	80 91 cb 02 	lds	r24, 0x02CB
     b88:	90 91 cc 02 	lds	r25, 0x02CC
     b8c:	62 2f       	mov	r22, r18
     b8e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <module_packet_scan>
  }

  // no need to check PAYLOAD TX FIFO buffer - it will be done automatically when a TX token is received
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <send_set_class_item>:

void send_set_class_item(uint8_t class_id, uint8_t item_id, void *set_data, uint8_t set_data_length)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <send_set_class_item+0x6>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <send_set_class_item+0x8>
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <send_set_class_item+0xa>
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	6a 83       	std	Y+2, r22	; 0x02
     baa:	5c 83       	std	Y+4, r21	; 0x04
     bac:	4b 83       	std	Y+3, r20	; 0x03
     bae:	2d 83       	std	Y+5, r18	; 0x05
  temp_payload_buffer[0] = class_id | CLASS_FLAG_IS_SET; // add SET flag
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	80 64       	ori	r24, 0x40	; 64
     bb4:	80 93 d6 02 	sts	0x02D6, r24
  temp_payload_buffer[1] = item_id;
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	80 93 d7 02 	sts	0x02D7, r24
  temp_payload_buffer_count = 2;
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	80 93 d5 02 	sts	0x02D5, r24
  temp_payload_void_bytes = set_data;
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	90 93 88 01 	sts	0x0188, r25
     bcc:	80 93 87 01 	sts	0x0187, r24
     bd0:	19 c0       	rjmp	.+50     	; 0xc04 <send_set_class_item+0x6c>
  while (set_data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
     bd2:	30 91 d5 02 	lds	r19, 0x02D5
     bd6:	83 2f       	mov	r24, r19
     bd8:	99 27       	eor	r25, r25
     bda:	87 fd       	sbrc	r24, 7
     bdc:	90 95       	com	r25
     bde:	a0 91 87 01 	lds	r26, 0x0187
     be2:	b0 91 88 01 	lds	r27, 0x0188
     be6:	2c 91       	ld	r18, X
     be8:	fc 01       	movw	r30, r24
     bea:	ea 52       	subi	r30, 0x2A	; 42
     bec:	fd 4f       	sbci	r31, 0xFD	; 253
     bee:	20 83       	st	Z, r18
     bf0:	83 2f       	mov	r24, r19
     bf2:	8f 5f       	subi	r24, 0xFF	; 255
     bf4:	80 93 d5 02 	sts	0x02D5, r24
     bf8:	cd 01       	movw	r24, r26
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	90 93 88 01 	sts	0x0188, r25
     c00:	80 93 87 01 	sts	0x0187, r24
{
  temp_payload_buffer[0] = class_id | CLASS_FLAG_IS_SET; // add SET flag
  temp_payload_buffer[1] = item_id;
  temp_payload_buffer_count = 2;
  temp_payload_void_bytes = set_data;
  while (set_data_length-- > 0)
     c04:	8d 81       	ldd	r24, Y+5	; 0x05
     c06:	8e 83       	std	Y+6, r24	; 0x06
     c08:	8e 81       	ldd	r24, Y+6	; 0x06
     c0a:	88 23       	and	r24, r24
     c0c:	11 f0       	breq	.+4      	; 0xc12 <send_set_class_item+0x7a>
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	8e 83       	std	Y+6, r24	; 0x06
     c12:	8e 81       	ldd	r24, Y+6	; 0x06
     c14:	9d 81       	ldd	r25, Y+5	; 0x05
     c16:	91 50       	subi	r25, 0x01	; 1
     c18:	9d 83       	std	Y+5, r25	; 0x05
     c1a:	88 23       	and	r24, r24
     c1c:	d1 f6       	brne	.-76     	; 0xbd2 <send_set_class_item+0x3a>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
  send_packet(COMMS_START_BYTE_BASE | COMMS_START_SINGLE_CLASS, temp_payload_buffer, temp_payload_buffer_count);
     c1e:	80 91 d5 02 	lds	r24, 0x02D5
     c22:	28 2f       	mov	r18, r24
     c24:	86 ed       	ldi	r24, 0xD6	; 214
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	42 2f       	mov	r20, r18
     c2a:	bc 01       	movw	r22, r24
     c2c:	81 ec       	ldi	r24, 0xC1	; 193
     c2e:	0e 94 b5 08 	call	0x116a	; 0x116a <send_packet>
}
     c32:	26 96       	adiw	r28, 0x06	; 6
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <send_set_class_indexed_item>:

void send_set_class_indexed_item(uint8_t class_id, uint8_t class_index, uint8_t item_id, void *set_data, uint8_t set_data_length)
{
     c44:	0f 93       	push	r16
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	27 97       	sbiw	r28, 0x07	; 7
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	6a 83       	std	Y+2, r22	; 0x02
     c5e:	4b 83       	std	Y+3, r20	; 0x03
     c60:	3d 83       	std	Y+5, r19	; 0x05
     c62:	2c 83       	std	Y+4, r18	; 0x04
     c64:	0e 83       	std	Y+6, r16	; 0x06
  temp_payload_buffer[0] = class_id | CLASS_FLAG_HAS_INDEX | CLASS_FLAG_IS_SET; // add indexed and SET flag
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	80 6c       	ori	r24, 0xC0	; 192
     c6a:	80 93 d6 02 	sts	0x02D6, r24
  temp_payload_buffer[1] = class_index;
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	80 93 d7 02 	sts	0x02D7, r24
  temp_payload_buffer[2] = item_id;
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	80 93 d8 02 	sts	0x02D8, r24
  temp_payload_buffer_count = 3;
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	80 93 d5 02 	sts	0x02D5, r24
  temp_payload_void_bytes = set_data;
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	90 93 88 01 	sts	0x0188, r25
     c88:	80 93 87 01 	sts	0x0187, r24
     c8c:	19 c0       	rjmp	.+50     	; 0xcc0 <send_set_class_indexed_item+0x7c>
  while (set_data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
     c8e:	30 91 d5 02 	lds	r19, 0x02D5
     c92:	83 2f       	mov	r24, r19
     c94:	99 27       	eor	r25, r25
     c96:	87 fd       	sbrc	r24, 7
     c98:	90 95       	com	r25
     c9a:	a0 91 87 01 	lds	r26, 0x0187
     c9e:	b0 91 88 01 	lds	r27, 0x0188
     ca2:	2c 91       	ld	r18, X
     ca4:	fc 01       	movw	r30, r24
     ca6:	ea 52       	subi	r30, 0x2A	; 42
     ca8:	fd 4f       	sbci	r31, 0xFD	; 253
     caa:	20 83       	st	Z, r18
     cac:	83 2f       	mov	r24, r19
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	80 93 d5 02 	sts	0x02D5, r24
     cb4:	cd 01       	movw	r24, r26
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	90 93 88 01 	sts	0x0188, r25
     cbc:	80 93 87 01 	sts	0x0187, r24
  temp_payload_buffer[0] = class_id | CLASS_FLAG_HAS_INDEX | CLASS_FLAG_IS_SET; // add indexed and SET flag
  temp_payload_buffer[1] = class_index;
  temp_payload_buffer[2] = item_id;
  temp_payload_buffer_count = 3;
  temp_payload_void_bytes = set_data;
  while (set_data_length-- > 0)
     cc0:	8e 81       	ldd	r24, Y+6	; 0x06
     cc2:	8f 83       	std	Y+7, r24	; 0x07
     cc4:	8f 81       	ldd	r24, Y+7	; 0x07
     cc6:	88 23       	and	r24, r24
     cc8:	11 f0       	breq	.+4      	; 0xcce <send_set_class_indexed_item+0x8a>
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	8f 83       	std	Y+7, r24	; 0x07
     cce:	8f 81       	ldd	r24, Y+7	; 0x07
     cd0:	9e 81       	ldd	r25, Y+6	; 0x06
     cd2:	91 50       	subi	r25, 0x01	; 1
     cd4:	9e 83       	std	Y+6, r25	; 0x06
     cd6:	88 23       	and	r24, r24
     cd8:	d1 f6       	brne	.-76     	; 0xc8e <send_set_class_indexed_item+0x4a>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
  send_packet(COMMS_START_BYTE_BASE | COMMS_START_SINGLE_CLASS, temp_payload_buffer, temp_payload_buffer_count);
     cda:	80 91 d5 02 	lds	r24, 0x02D5
     cde:	28 2f       	mov	r18, r24
     ce0:	86 ed       	ldi	r24, 0xD6	; 214
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	42 2f       	mov	r20, r18
     ce6:	bc 01       	movw	r22, r24
     ce8:	81 ec       	ldi	r24, 0xC1	; 193
     cea:	0e 94 b5 08 	call	0x116a	; 0x116a <send_packet>
}
     cee:	27 96       	adiw	r28, 0x07	; 7
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	0f 91       	pop	r16
     d00:	08 95       	ret

00000d02 <send_set_class_indexed_item_indexed>:

void send_set_class_indexed_item_indexed(uint8_t class_id, uint8_t class_index, uint8_t item_id, uint8_t item_index, void *set_data, uint8_t set_data_length)
{
     d02:	ef 92       	push	r14
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	28 97       	sbiw	r28, 0x08	; 8
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
     d20:	4b 83       	std	Y+3, r20	; 0x03
     d22:	2c 83       	std	Y+4, r18	; 0x04
     d24:	1e 83       	std	Y+6, r17	; 0x06
     d26:	0d 83       	std	Y+5, r16	; 0x05
     d28:	ef 82       	std	Y+7, r14	; 0x07
  temp_payload_buffer[0] = class_id | CLASS_FLAG_HAS_INDEX | CLASS_FLAG_IS_SET; // add indexed and SET flag
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	80 6c       	ori	r24, 0xC0	; 192
     d2e:	80 93 d6 02 	sts	0x02D6, r24
  temp_payload_buffer[1] = class_index;
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	80 93 d7 02 	sts	0x02D7, r24
  temp_payload_buffer[2] = item_id | CLASS_ITEM_FLAG_HAS_INDEX; // add indexed flag
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	80 68       	ori	r24, 0x80	; 128
     d3c:	80 93 d8 02 	sts	0x02D8, r24
	temp_payload_buffer[3] = item_index;
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	80 93 d9 02 	sts	0x02D9, r24
  temp_payload_buffer_count = 4;
     d46:	84 e0       	ldi	r24, 0x04	; 4
     d48:	80 93 d5 02 	sts	0x02D5, r24
  temp_payload_void_bytes = set_data;
     d4c:	8d 81       	ldd	r24, Y+5	; 0x05
     d4e:	9e 81       	ldd	r25, Y+6	; 0x06
     d50:	90 93 88 01 	sts	0x0188, r25
     d54:	80 93 87 01 	sts	0x0187, r24
     d58:	19 c0       	rjmp	.+50     	; 0xd8c <send_set_class_indexed_item_indexed+0x8a>
  while (set_data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
     d5a:	30 91 d5 02 	lds	r19, 0x02D5
     d5e:	83 2f       	mov	r24, r19
     d60:	99 27       	eor	r25, r25
     d62:	87 fd       	sbrc	r24, 7
     d64:	90 95       	com	r25
     d66:	a0 91 87 01 	lds	r26, 0x0187
     d6a:	b0 91 88 01 	lds	r27, 0x0188
     d6e:	2c 91       	ld	r18, X
     d70:	fc 01       	movw	r30, r24
     d72:	ea 52       	subi	r30, 0x2A	; 42
     d74:	fd 4f       	sbci	r31, 0xFD	; 253
     d76:	20 83       	st	Z, r18
     d78:	83 2f       	mov	r24, r19
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	80 93 d5 02 	sts	0x02D5, r24
     d80:	cd 01       	movw	r24, r26
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	90 93 88 01 	sts	0x0188, r25
     d88:	80 93 87 01 	sts	0x0187, r24
  temp_payload_buffer[1] = class_index;
  temp_payload_buffer[2] = item_id | CLASS_ITEM_FLAG_HAS_INDEX; // add indexed flag
	temp_payload_buffer[3] = item_index;
  temp_payload_buffer_count = 4;
  temp_payload_void_bytes = set_data;
  while (set_data_length-- > 0)
     d8c:	8f 81       	ldd	r24, Y+7	; 0x07
     d8e:	88 87       	std	Y+8, r24	; 0x08
     d90:	88 85       	ldd	r24, Y+8	; 0x08
     d92:	88 23       	and	r24, r24
     d94:	11 f0       	breq	.+4      	; 0xd9a <send_set_class_indexed_item_indexed+0x98>
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	88 87       	std	Y+8, r24	; 0x08
     d9a:	88 85       	ldd	r24, Y+8	; 0x08
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	91 50       	subi	r25, 0x01	; 1
     da0:	9f 83       	std	Y+7, r25	; 0x07
     da2:	88 23       	and	r24, r24
     da4:	d1 f6       	brne	.-76     	; 0xd5a <send_set_class_indexed_item_indexed+0x58>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
  send_packet(COMMS_START_BYTE_BASE | COMMS_START_SINGLE_CLASS, temp_payload_buffer, temp_payload_buffer_count);
     da6:	80 91 d5 02 	lds	r24, 0x02D5
     daa:	28 2f       	mov	r18, r24
     dac:	86 ed       	ldi	r24, 0xD6	; 214
     dae:	92 e0       	ldi	r25, 0x02	; 2
     db0:	42 2f       	mov	r20, r18
     db2:	bc 01       	movw	r22, r24
     db4:	81 ec       	ldi	r24, 0xC1	; 193
     db6:	0e 94 b5 08 	call	0x116a	; 0x116a <send_packet>
}
     dba:	28 96       	adiw	r28, 0x08	; 8
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	ef 90       	pop	r14
     dd0:	08 95       	ret

00000dd2 <SSC_start>:

void SSC_start(uint8_t class_id)
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	0f 92       	push	r0
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	89 83       	std	Y+1, r24	; 0x01
  temp_payload_buffer[0] = class_id | CLASS_FLAG_IS_SET; // add SET flag
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	80 64       	ori	r24, 0x40	; 64
     de2:	80 93 d6 02 	sts	0x02D6, r24
  temp_payload_buffer_count = 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 d5 02 	sts	0x02D5, r24
}
     dec:	0f 90       	pop	r0
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <SSC_add_class_item>:

void SSC_add_class_item(uint8_t item_id, void *set_data, uint8_t set_data_length)
{
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	00 d0       	rcall	.+0      	; 0xdfa <SSC_add_class_item+0x6>
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <SSC_add_class_item+0x8>
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01
     e04:	7b 83       	std	Y+3, r23	; 0x03
     e06:	6a 83       	std	Y+2, r22	; 0x02
     e08:	4c 83       	std	Y+4, r20	; 0x04
  temp_payload_void_bytes = set_data;
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	9b 81       	ldd	r25, Y+3	; 0x03
     e0e:	90 93 88 01 	sts	0x0188, r25
     e12:	80 93 87 01 	sts	0x0187, r24
  temp_payload_buffer[temp_payload_buffer_count++] = item_id;
     e16:	20 91 d5 02 	lds	r18, 0x02D5
     e1a:	82 2f       	mov	r24, r18
     e1c:	99 27       	eor	r25, r25
     e1e:	87 fd       	sbrc	r24, 7
     e20:	90 95       	com	r25
     e22:	fc 01       	movw	r30, r24
     e24:	ea 52       	subi	r30, 0x2A	; 42
     e26:	fd 4f       	sbci	r31, 0xFD	; 253
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	80 83       	st	Z, r24
     e2c:	82 2f       	mov	r24, r18
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	80 93 d5 02 	sts	0x02D5, r24
     e34:	19 c0       	rjmp	.+50     	; 0xe68 <SSC_add_class_item+0x74>
  while (set_data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
     e36:	30 91 d5 02 	lds	r19, 0x02D5
     e3a:	83 2f       	mov	r24, r19
     e3c:	99 27       	eor	r25, r25
     e3e:	87 fd       	sbrc	r24, 7
     e40:	90 95       	com	r25
     e42:	a0 91 87 01 	lds	r26, 0x0187
     e46:	b0 91 88 01 	lds	r27, 0x0188
     e4a:	2c 91       	ld	r18, X
     e4c:	fc 01       	movw	r30, r24
     e4e:	ea 52       	subi	r30, 0x2A	; 42
     e50:	fd 4f       	sbci	r31, 0xFD	; 253
     e52:	20 83       	st	Z, r18
     e54:	83 2f       	mov	r24, r19
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	80 93 d5 02 	sts	0x02D5, r24
     e5c:	cd 01       	movw	r24, r26
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	90 93 88 01 	sts	0x0188, r25
     e64:	80 93 87 01 	sts	0x0187, r24

void SSC_add_class_item(uint8_t item_id, void *set_data, uint8_t set_data_length)
{
  temp_payload_void_bytes = set_data;
  temp_payload_buffer[temp_payload_buffer_count++] = item_id;
  while (set_data_length-- > 0)
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	8d 83       	std	Y+5, r24	; 0x05
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	88 23       	and	r24, r24
     e70:	11 f0       	breq	.+4      	; 0xe76 <SSC_add_class_item+0x82>
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	8d 83       	std	Y+5, r24	; 0x05
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	91 50       	subi	r25, 0x01	; 1
     e7c:	9c 83       	std	Y+4, r25	; 0x04
     e7e:	88 23       	and	r24, r24
     e80:	d1 f6       	brne	.-76     	; 0xe36 <SSC_add_class_item+0x42>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <SSC_add_data>:

void SSC_add_data(void *data, uint8_t data_length)
{
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	00 d0       	rcall	.+0      	; 0xe98 <SSC_add_data+0x6>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <SSC_add_data+0x8>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	6b 83       	std	Y+3, r22	; 0x03
  temp_payload_void_bytes = data;
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	9a 81       	ldd	r25, Y+2	; 0x02
     ea8:	90 93 88 01 	sts	0x0188, r25
     eac:	80 93 87 01 	sts	0x0187, r24
     eb0:	19 c0       	rjmp	.+50     	; 0xee4 <SSC_add_data+0x52>
  while (data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
     eb2:	30 91 d5 02 	lds	r19, 0x02D5
     eb6:	83 2f       	mov	r24, r19
     eb8:	99 27       	eor	r25, r25
     eba:	87 fd       	sbrc	r24, 7
     ebc:	90 95       	com	r25
     ebe:	a0 91 87 01 	lds	r26, 0x0187
     ec2:	b0 91 88 01 	lds	r27, 0x0188
     ec6:	2c 91       	ld	r18, X
     ec8:	fc 01       	movw	r30, r24
     eca:	ea 52       	subi	r30, 0x2A	; 42
     ecc:	fd 4f       	sbci	r31, 0xFD	; 253
     ece:	20 83       	st	Z, r18
     ed0:	83 2f       	mov	r24, r19
     ed2:	8f 5f       	subi	r24, 0xFF	; 255
     ed4:	80 93 d5 02 	sts	0x02D5, r24
     ed8:	cd 01       	movw	r24, r26
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	90 93 88 01 	sts	0x0188, r25
     ee0:	80 93 87 01 	sts	0x0187, r24
}

void SSC_add_data(void *data, uint8_t data_length)
{
  temp_payload_void_bytes = data;
  while (data_length-- > 0)
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	8c 83       	std	Y+4, r24	; 0x04
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	88 23       	and	r24, r24
     eec:	11 f0       	breq	.+4      	; 0xef2 <SSC_add_data+0x60>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	8c 83       	std	Y+4, r24	; 0x04
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	9b 81       	ldd	r25, Y+3	; 0x03
     ef6:	91 50       	subi	r25, 0x01	; 1
     ef8:	9b 83       	std	Y+3, r25	; 0x03
     efa:	88 23       	and	r24, r24
     efc:	d1 f6       	brne	.-76     	; 0xeb2 <SSC_add_data+0x20>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
}
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <SSC_send>:

void SSC_send()
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
  send_packet(COMMS_START_BYTE_BASE | COMMS_START_SINGLE_CLASS, temp_payload_buffer, temp_payload_buffer_count);
     f14:	80 91 d5 02 	lds	r24, 0x02D5
     f18:	28 2f       	mov	r18, r24
     f1a:	86 ed       	ldi	r24, 0xD6	; 214
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	42 2f       	mov	r20, r18
     f20:	bc 01       	movw	r22, r24
     f22:	81 ec       	ldi	r24, 0xC1	; 193
     f24:	0e 94 b5 08 	call	0x116a	; 0x116a <send_packet>
}
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <SMC_start>:

void SMC_start()
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
  temp_payload_buffer_count = 0;
     f36:	10 92 d5 02 	sts	0x02D5, r1
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <SMC_add_class_item>:

void SMC_add_class_item(uint8_t class_id, uint8_t item_id, void *set_data, uint8_t set_data_length)
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <SMC_add_class_item+0x6>
     f46:	00 d0       	rcall	.+0      	; 0xf48 <SMC_add_class_item+0x8>
     f48:	00 d0       	rcall	.+0      	; 0xf4a <SMC_add_class_item+0xa>
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	6a 83       	std	Y+2, r22	; 0x02
     f52:	5c 83       	std	Y+4, r21	; 0x04
     f54:	4b 83       	std	Y+3, r20	; 0x03
     f56:	2d 83       	std	Y+5, r18	; 0x05
  temp_payload_void_bytes = set_data;
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	9c 81       	ldd	r25, Y+4	; 0x04
     f5c:	90 93 88 01 	sts	0x0188, r25
     f60:	80 93 87 01 	sts	0x0187, r24
  temp_payload_buffer[temp_payload_buffer_count++] = class_id | CLASS_FLAG_IS_SET; // add SET flag
     f64:	90 91 d5 02 	lds	r25, 0x02D5
     f68:	29 2f       	mov	r18, r25
     f6a:	33 27       	eor	r19, r19
     f6c:	27 fd       	sbrc	r18, 7
     f6e:	30 95       	com	r19
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	80 64       	ori	r24, 0x40	; 64
     f74:	f9 01       	movw	r30, r18
     f76:	ea 52       	subi	r30, 0x2A	; 42
     f78:	fd 4f       	sbci	r31, 0xFD	; 253
     f7a:	80 83       	st	Z, r24
     f7c:	89 2f       	mov	r24, r25
     f7e:	8f 5f       	subi	r24, 0xFF	; 255
     f80:	80 93 d5 02 	sts	0x02D5, r24
  temp_payload_buffer[temp_payload_buffer_count++] = item_id;
     f84:	20 91 d5 02 	lds	r18, 0x02D5
     f88:	82 2f       	mov	r24, r18
     f8a:	99 27       	eor	r25, r25
     f8c:	87 fd       	sbrc	r24, 7
     f8e:	90 95       	com	r25
     f90:	fc 01       	movw	r30, r24
     f92:	ea 52       	subi	r30, 0x2A	; 42
     f94:	fd 4f       	sbci	r31, 0xFD	; 253
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	80 83       	st	Z, r24
     f9a:	82 2f       	mov	r24, r18
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	80 93 d5 02 	sts	0x02D5, r24
     fa2:	19 c0       	rjmp	.+50     	; 0xfd6 <SMC_add_class_item+0x96>
  while (set_data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
     fa4:	30 91 d5 02 	lds	r19, 0x02D5
     fa8:	83 2f       	mov	r24, r19
     faa:	99 27       	eor	r25, r25
     fac:	87 fd       	sbrc	r24, 7
     fae:	90 95       	com	r25
     fb0:	a0 91 87 01 	lds	r26, 0x0187
     fb4:	b0 91 88 01 	lds	r27, 0x0188
     fb8:	2c 91       	ld	r18, X
     fba:	fc 01       	movw	r30, r24
     fbc:	ea 52       	subi	r30, 0x2A	; 42
     fbe:	fd 4f       	sbci	r31, 0xFD	; 253
     fc0:	20 83       	st	Z, r18
     fc2:	83 2f       	mov	r24, r19
     fc4:	8f 5f       	subi	r24, 0xFF	; 255
     fc6:	80 93 d5 02 	sts	0x02D5, r24
     fca:	cd 01       	movw	r24, r26
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	90 93 88 01 	sts	0x0188, r25
     fd2:	80 93 87 01 	sts	0x0187, r24
void SMC_add_class_item(uint8_t class_id, uint8_t item_id, void *set_data, uint8_t set_data_length)
{
  temp_payload_void_bytes = set_data;
  temp_payload_buffer[temp_payload_buffer_count++] = class_id | CLASS_FLAG_IS_SET; // add SET flag
  temp_payload_buffer[temp_payload_buffer_count++] = item_id;
  while (set_data_length-- > 0)
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	8e 83       	std	Y+6, r24	; 0x06
     fda:	8e 81       	ldd	r24, Y+6	; 0x06
     fdc:	88 23       	and	r24, r24
     fde:	11 f0       	breq	.+4      	; 0xfe4 <SMC_add_class_item+0xa4>
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	8e 83       	std	Y+6, r24	; 0x06
     fe4:	8e 81       	ldd	r24, Y+6	; 0x06
     fe6:	9d 81       	ldd	r25, Y+5	; 0x05
     fe8:	91 50       	subi	r25, 0x01	; 1
     fea:	9d 83       	std	Y+5, r25	; 0x05
     fec:	88 23       	and	r24, r24
     fee:	d1 f6       	brne	.-76     	; 0xfa4 <SMC_add_class_item+0x64>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
}
     ff0:	26 96       	adiw	r28, 0x06	; 6
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <SMC_add_class_indexed_item>:

void SMC_add_class_indexed_item(uint8_t class_id, uint8_t class_index, uint8_t item_id, void *set_data, uint8_t set_data_length)
{
    1002:	0f 93       	push	r16
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	27 97       	sbiw	r28, 0x07	; 7
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	6a 83       	std	Y+2, r22	; 0x02
    101c:	4b 83       	std	Y+3, r20	; 0x03
    101e:	3d 83       	std	Y+5, r19	; 0x05
    1020:	2c 83       	std	Y+4, r18	; 0x04
    1022:	0e 83       	std	Y+6, r16	; 0x06
  temp_payload_void_bytes = set_data;
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	9d 81       	ldd	r25, Y+5	; 0x05
    1028:	90 93 88 01 	sts	0x0188, r25
    102c:	80 93 87 01 	sts	0x0187, r24
  temp_payload_buffer[temp_payload_buffer_count++] = class_id | CLASS_FLAG_HAS_INDEX | CLASS_FLAG_IS_SET; // add indexed and SET flag
    1030:	90 91 d5 02 	lds	r25, 0x02D5
    1034:	29 2f       	mov	r18, r25
    1036:	33 27       	eor	r19, r19
    1038:	27 fd       	sbrc	r18, 7
    103a:	30 95       	com	r19
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	80 6c       	ori	r24, 0xC0	; 192
    1040:	f9 01       	movw	r30, r18
    1042:	ea 52       	subi	r30, 0x2A	; 42
    1044:	fd 4f       	sbci	r31, 0xFD	; 253
    1046:	80 83       	st	Z, r24
    1048:	89 2f       	mov	r24, r25
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	80 93 d5 02 	sts	0x02D5, r24
  temp_payload_buffer[temp_payload_buffer_count++] = class_index;
    1050:	20 91 d5 02 	lds	r18, 0x02D5
    1054:	82 2f       	mov	r24, r18
    1056:	99 27       	eor	r25, r25
    1058:	87 fd       	sbrc	r24, 7
    105a:	90 95       	com	r25
    105c:	fc 01       	movw	r30, r24
    105e:	ea 52       	subi	r30, 0x2A	; 42
    1060:	fd 4f       	sbci	r31, 0xFD	; 253
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	80 83       	st	Z, r24
    1066:	82 2f       	mov	r24, r18
    1068:	8f 5f       	subi	r24, 0xFF	; 255
    106a:	80 93 d5 02 	sts	0x02D5, r24
  temp_payload_buffer[temp_payload_buffer_count++] = item_id;
    106e:	20 91 d5 02 	lds	r18, 0x02D5
    1072:	82 2f       	mov	r24, r18
    1074:	99 27       	eor	r25, r25
    1076:	87 fd       	sbrc	r24, 7
    1078:	90 95       	com	r25
    107a:	fc 01       	movw	r30, r24
    107c:	ea 52       	subi	r30, 0x2A	; 42
    107e:	fd 4f       	sbci	r31, 0xFD	; 253
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	80 83       	st	Z, r24
    1084:	82 2f       	mov	r24, r18
    1086:	8f 5f       	subi	r24, 0xFF	; 255
    1088:	80 93 d5 02 	sts	0x02D5, r24
    108c:	19 c0       	rjmp	.+50     	; 0x10c0 <SMC_add_class_indexed_item+0xbe>
  while (set_data_length-- > 0)
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
    108e:	30 91 d5 02 	lds	r19, 0x02D5
    1092:	83 2f       	mov	r24, r19
    1094:	99 27       	eor	r25, r25
    1096:	87 fd       	sbrc	r24, 7
    1098:	90 95       	com	r25
    109a:	a0 91 87 01 	lds	r26, 0x0187
    109e:	b0 91 88 01 	lds	r27, 0x0188
    10a2:	2c 91       	ld	r18, X
    10a4:	fc 01       	movw	r30, r24
    10a6:	ea 52       	subi	r30, 0x2A	; 42
    10a8:	fd 4f       	sbci	r31, 0xFD	; 253
    10aa:	20 83       	st	Z, r18
    10ac:	83 2f       	mov	r24, r19
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	80 93 d5 02 	sts	0x02D5, r24
    10b4:	cd 01       	movw	r24, r26
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	90 93 88 01 	sts	0x0188, r25
    10bc:	80 93 87 01 	sts	0x0187, r24
{
  temp_payload_void_bytes = set_data;
  temp_payload_buffer[temp_payload_buffer_count++] = class_id | CLASS_FLAG_HAS_INDEX | CLASS_FLAG_IS_SET; // add indexed and SET flag
  temp_payload_buffer[temp_payload_buffer_count++] = class_index;
  temp_payload_buffer[temp_payload_buffer_count++] = item_id;
  while (set_data_length-- > 0)
    10c0:	8e 81       	ldd	r24, Y+6	; 0x06
    10c2:	8f 83       	std	Y+7, r24	; 0x07
    10c4:	8f 81       	ldd	r24, Y+7	; 0x07
    10c6:	88 23       	and	r24, r24
    10c8:	11 f0       	breq	.+4      	; 0x10ce <SMC_add_class_indexed_item+0xcc>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	8f 83       	std	Y+7, r24	; 0x07
    10ce:	8f 81       	ldd	r24, Y+7	; 0x07
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	91 50       	subi	r25, 0x01	; 1
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	88 23       	and	r24, r24
    10d8:	d1 f6       	brne	.-76     	; 0x108e <SMC_add_class_indexed_item+0x8c>
    temp_payload_buffer[temp_payload_buffer_count++] = *temp_payload_void_bytes++;
}
    10da:	27 96       	adiw	r28, 0x07	; 7
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret

000010ee <SMC_send>:

void SMC_send()
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
  send_packet(COMMS_START_BYTE_BASE, temp_payload_buffer, temp_payload_buffer_count);
    10f6:	80 91 d5 02 	lds	r24, 0x02D5
    10fa:	28 2f       	mov	r18, r24
    10fc:	86 ed       	ldi	r24, 0xD6	; 214
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	42 2f       	mov	r20, r18
    1102:	bc 01       	movw	r22, r24
    1104:	80 ec       	ldi	r24, 0xC0	; 192
    1106:	0e 94 b5 08 	call	0x116a	; 0x116a <send_packet>
}
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <send_text>:

void send_text(const char *text, ...)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <send_text+0x6>
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
	// send as CLASS_SYSTEM_TEXT
  va_list args;

  temp_text_buffer[0] = CLASS_SYSTEM | CLASS_FLAG_IS_SET; // add SET flag
    111a:	83 e4       	ldi	r24, 0x43	; 67
    111c:	80 93 89 01 	sts	0x0189, r24
  temp_text_buffer[1] = CLASS_SYSTEM_TEXT;
    1120:	10 92 8a 01 	sts	0x018A, r1

  temp_text_buffer_count = 3;
    1124:	83 e0       	ldi	r24, 0x03	; 3
    1126:	80 93 c9 01 	sts	0x01C9, r24

  va_start(args, text);
    112a:	ce 01       	movw	r24, r28
    112c:	09 96       	adiw	r24, 0x09	; 9
    112e:	9a 83       	std	Y+2, r25	; 0x02
    1130:	89 83       	std	Y+1, r24	; 0x01
  vprintf(text, args);
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	9a 81       	ldd	r25, Y+2	; 0x02
    1136:	2f 81       	ldd	r18, Y+7	; 0x07
    1138:	38 85       	ldd	r19, Y+8	; 0x08
    113a:	bc 01       	movw	r22, r24
    113c:	c9 01       	movw	r24, r18
    113e:	0e 94 8f 0c 	call	0x191e	; 0x191e <vprintf>
  va_end(args);

  temp_text_buffer[2] = temp_text_buffer_count - 3;
    1142:	80 91 c9 01 	lds	r24, 0x01C9
    1146:	83 50       	subi	r24, 0x03	; 3
    1148:	80 93 8b 01 	sts	0x018B, r24

  send_packet(COMMS_START_BYTE_BASE | COMMS_START_SINGLE_CLASS, temp_text_buffer, temp_text_buffer_count);
    114c:	80 91 c9 01 	lds	r24, 0x01C9
    1150:	28 2f       	mov	r18, r24
    1152:	89 e8       	ldi	r24, 0x89	; 137
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	42 2f       	mov	r20, r18
    1158:	bc 01       	movw	r22, r24
    115a:	81 ec       	ldi	r24, 0xC1	; 193
    115c:	0e 94 b5 08 	call	0x116a	; 0x116a <send_packet>
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <send_packet>:

// low-level send packet function, used by all intermediate packet-forming functions
void send_packet(uint8_t start_byte, uint8_t *payload, uint8_t payload_length)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <send_packet+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <send_packet+0x8>
    1172:	00 d0       	rcall	.+0      	; 0x1174 <send_packet+0xa>
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	8b 83       	std	Y+3, r24	; 0x03
    117a:	7d 83       	std	Y+5, r23	; 0x05
    117c:	6c 83       	std	Y+4, r22	; 0x04
    117e:	4e 83       	std	Y+6, r20	; 0x06
  uint8_t bytecheck = 0;
    1180:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t count;
	
	if ((payload_length > 0)&&(payload[0] & 0x80))
    1182:	8e 81       	ldd	r24, Y+6	; 0x06
    1184:	88 23       	and	r24, r24
    1186:	79 f0       	breq	.+30     	; 0x11a6 <send_packet+0x3c>
    1188:	ec 81       	ldd	r30, Y+4	; 0x04
    118a:	fd 81       	ldd	r31, Y+5	; 0x05
    118c:	80 81       	ld	r24, Z
    118e:	88 23       	and	r24, r24
    1190:	54 f4       	brge	.+20     	; 0x11a6 <send_packet+0x3c>
  {
    start_byte |= COMMS_START_PAYLOAD_FIRST_BYTE_MSB_HIGH;
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	82 60       	ori	r24, 0x02	; 2
    1196:	8b 83       	std	Y+3, r24	; 0x03
    payload[0] &= 0x7F;
    1198:	ec 81       	ldd	r30, Y+4	; 0x04
    119a:	fd 81       	ldd	r31, Y+5	; 0x05
    119c:	80 81       	ld	r24, Z
    119e:	8f 77       	andi	r24, 0x7F	; 127
    11a0:	ec 81       	ldd	r30, Y+4	; 0x04
    11a2:	fd 81       	ldd	r31, Y+5	; 0x05
    11a4:	80 83       	st	Z, r24
  }

  fifo_add_byte(&(payload_stream.tx_fifo), start_byte);
    11a6:	80 ec       	ldi	r24, 0xC0	; 192
    11a8:	92 e0       	ldi	r25, 0x02	; 2
    11aa:	6b 81       	ldd	r22, Y+3	; 0x03
    11ac:	0e 94 48 09 	call	0x1290	; 0x1290 <fifo_add_byte>
  fifo_add_byte(&(payload_stream.tx_fifo), COMMS_DLE_BYTE);
    11b0:	80 ec       	ldi	r24, 0xC0	; 192
    11b2:	92 e0       	ldi	r25, 0x02	; 2
    11b4:	6d eb       	ldi	r22, 0xBD	; 189
    11b6:	0e 94 48 09 	call	0x1290	; 0x1290 <fifo_add_byte>

  for (count = 0; count < payload_length; count++)
    11ba:	19 82       	std	Y+1, r1	; 0x01
    11bc:	29 c0       	rjmp	.+82     	; 0x1210 <send_packet+0xa6>
  {
    fifo_add_byte(&(payload_stream.tx_fifo), payload[count]);
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	8c 81       	ldd	r24, Y+4	; 0x04
    11c6:	9d 81       	ldd	r25, Y+5	; 0x05
    11c8:	fc 01       	movw	r30, r24
    11ca:	e2 0f       	add	r30, r18
    11cc:	f3 1f       	adc	r31, r19
    11ce:	20 81       	ld	r18, Z
    11d0:	80 ec       	ldi	r24, 0xC0	; 192
    11d2:	92 e0       	ldi	r25, 0x02	; 2
    11d4:	62 2f       	mov	r22, r18
    11d6:	0e 94 48 09 	call	0x1290	; 0x1290 <fifo_add_byte>
    if (payload[count] == COMMS_DLE_BYTE)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	fc 01       	movw	r30, r24
    11e6:	e2 0f       	add	r30, r18
    11e8:	f3 1f       	adc	r31, r19
    11ea:	80 81       	ld	r24, Z
    11ec:	8d 3b       	cpi	r24, 0xBD	; 189
    11ee:	29 f4       	brne	.+10     	; 0x11fa <send_packet+0x90>
      fifo_add_byte(&(payload_stream.tx_fifo), COMMS_DLE_BYTE); // "stuff" DLE byte
    11f0:	80 ec       	ldi	r24, 0xC0	; 192
    11f2:	92 e0       	ldi	r25, 0x02	; 2
    11f4:	6d eb       	ldi	r22, 0xBD	; 189
    11f6:	0e 94 48 09 	call	0x1290	; 0x1290 <fifo_add_byte>
    
    if (bytecheck >= 127)
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	8f 37       	cpi	r24, 0x7F	; 127
    11fe:	10 f0       	brcs	.+4      	; 0x1204 <send_packet+0x9a>
      bytecheck = 0; // bytecheck cannot be > 127, reset counter
    1200:	1a 82       	std	Y+2, r1	; 0x02
    1202:	03 c0       	rjmp	.+6      	; 0x120a <send_packet+0xa0>
    else
      bytecheck++;
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	8f 5f       	subi	r24, 0xFF	; 255
    1208:	8a 83       	std	Y+2, r24	; 0x02
  }

  fifo_add_byte(&(payload_stream.tx_fifo), start_byte);
  fifo_add_byte(&(payload_stream.tx_fifo), COMMS_DLE_BYTE);

  for (count = 0; count < payload_length; count++)
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	99 81       	ldd	r25, Y+1	; 0x01
    1212:	8e 81       	ldd	r24, Y+6	; 0x06
    1214:	98 17       	cp	r25, r24
    1216:	98 f2       	brcs	.-90     	; 0x11be <send_packet+0x54>
      bytecheck = 0; // bytecheck cannot be > 127, reset counter
    else
      bytecheck++;
  }

  fifo_add_byte(&(payload_stream.tx_fifo), COMMS_DLE_BYTE);
    1218:	80 ec       	ldi	r24, 0xC0	; 192
    121a:	92 e0       	ldi	r25, 0x02	; 2
    121c:	6d eb       	ldi	r22, 0xBD	; 189
    121e:	0e 94 48 09 	call	0x1290	; 0x1290 <fifo_add_byte>
  fifo_add_byte(&(payload_stream.tx_fifo), COMMS_ETX_BYTE); // assume no originator byte to pass on for now..
    1222:	80 ec       	ldi	r24, 0xC0	; 192
    1224:	92 e0       	ldi	r25, 0x02	; 2
    1226:	6e eb       	ldi	r22, 0xBE	; 190
    1228:	0e 94 48 09 	call	0x1290	; 0x1290 <fifo_add_byte>
  fifo_add_byte(&(payload_stream.tx_fifo), bytecheck);
    122c:	80 ec       	ldi	r24, 0xC0	; 192
    122e:	92 e0       	ldi	r25, 0x02	; 2
    1230:	6a 81       	ldd	r22, Y+2	; 0x02
    1232:	0e 94 48 09 	call	0x1290	; 0x1290 <fifo_add_byte>
}
    1236:	26 96       	adiw	r28, 0x06	; 6
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <fifo_setup>:
#include "base.h"

#include "fifo.h"

void fifo_setup(fifo_struct *fifo, uint8_t *buffer, uint8_t buffer_length)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <fifo_setup+0x6>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <fifo_setup+0x8>
    1250:	0f 92       	push	r0
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	9a 83       	std	Y+2, r25	; 0x02
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	7c 83       	std	Y+4, r23	; 0x04
    125c:	6b 83       	std	Y+3, r22	; 0x03
    125e:	4d 83       	std	Y+5, r20	; 0x05
  fifo->head = 0;
    1260:	e9 81       	ldd	r30, Y+1	; 0x01
    1262:	fa 81       	ldd	r31, Y+2	; 0x02
    1264:	10 82       	st	Z, r1
  fifo->tail = 0;
    1266:	e9 81       	ldd	r30, Y+1	; 0x01
    1268:	fa 81       	ldd	r31, Y+2	; 0x02
    126a:	11 82       	std	Z+1, r1	; 0x01
  fifo->buffer = buffer;
    126c:	e9 81       	ldd	r30, Y+1	; 0x01
    126e:	fa 81       	ldd	r31, Y+2	; 0x02
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	94 83       	std	Z+4, r25	; 0x04
    1276:	83 83       	std	Z+3, r24	; 0x03
  fifo->buffer_length = buffer_length;
    1278:	e9 81       	ldd	r30, Y+1	; 0x01
    127a:	fa 81       	ldd	r31, Y+2	; 0x02
    127c:	8d 81       	ldd	r24, Y+5	; 0x05
    127e:	82 83       	std	Z+2, r24	; 0x02
}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <fifo_add_byte>:

inline void fifo_add_byte(fifo_struct *fifo, uint8_t byte_in)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	00 d0       	rcall	.+0      	; 0x1296 <fifo_add_byte+0x6>
    1296:	0f 92       	push	r0
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	6b 83       	std	Y+3, r22	; 0x03
  fifo->buffer[fifo->head++] = byte_in;
    12a2:	e9 81       	ldd	r30, Y+1	; 0x01
    12a4:	fa 81       	ldd	r31, Y+2	; 0x02
    12a6:	23 81       	ldd	r18, Z+3	; 0x03
    12a8:	34 81       	ldd	r19, Z+4	; 0x04
    12aa:	e9 81       	ldd	r30, Y+1	; 0x01
    12ac:	fa 81       	ldd	r31, Y+2	; 0x02
    12ae:	40 81       	ld	r20, Z
    12b0:	84 2f       	mov	r24, r20
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	f9 01       	movw	r30, r18
    12b6:	e8 0f       	add	r30, r24
    12b8:	f9 1f       	adc	r31, r25
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	80 83       	st	Z, r24
    12be:	84 2f       	mov	r24, r20
    12c0:	8f 5f       	subi	r24, 0xFF	; 255
    12c2:	e9 81       	ldd	r30, Y+1	; 0x01
    12c4:	fa 81       	ldd	r31, Y+2	; 0x02
    12c6:	80 83       	st	Z, r24
  if (fifo->head == fifo->buffer_length)
    12c8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ca:	fa 81       	ldd	r31, Y+2	; 0x02
    12cc:	90 81       	ld	r25, Z
    12ce:	e9 81       	ldd	r30, Y+1	; 0x01
    12d0:	fa 81       	ldd	r31, Y+2	; 0x02
    12d2:	82 81       	ldd	r24, Z+2	; 0x02
    12d4:	98 17       	cp	r25, r24
    12d6:	19 f4       	brne	.+6      	; 0x12de <fifo_add_byte+0x4e>
    fifo->head = 0;
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	10 82       	st	Z, r1
}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <fifo_get_byte>:

inline void fifo_get_byte(fifo_struct *fifo, uint8_t *byte_out)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <fifo_get_byte+0x6>
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <fifo_get_byte+0x8>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	7c 83       	std	Y+4, r23	; 0x04
    12fc:	6b 83       	std	Y+3, r22	; 0x03
  // this assumes tail != head (i.e. there is some data to get)
  *byte_out = fifo->buffer[fifo->tail++];
    12fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1300:	fa 81       	ldd	r31, Y+2	; 0x02
    1302:	23 81       	ldd	r18, Z+3	; 0x03
    1304:	34 81       	ldd	r19, Z+4	; 0x04
    1306:	e9 81       	ldd	r30, Y+1	; 0x01
    1308:	fa 81       	ldd	r31, Y+2	; 0x02
    130a:	41 81       	ldd	r20, Z+1	; 0x01
    130c:	84 2f       	mov	r24, r20
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	f9 01       	movw	r30, r18
    1312:	e8 0f       	add	r30, r24
    1314:	f9 1f       	adc	r31, r25
    1316:	80 81       	ld	r24, Z
    1318:	eb 81       	ldd	r30, Y+3	; 0x03
    131a:	fc 81       	ldd	r31, Y+4	; 0x04
    131c:	80 83       	st	Z, r24
    131e:	84 2f       	mov	r24, r20
    1320:	8f 5f       	subi	r24, 0xFF	; 255
    1322:	e9 81       	ldd	r30, Y+1	; 0x01
    1324:	fa 81       	ldd	r31, Y+2	; 0x02
    1326:	81 83       	std	Z+1, r24	; 0x01
  if (fifo->tail == fifo->buffer_length)
    1328:	e9 81       	ldd	r30, Y+1	; 0x01
    132a:	fa 81       	ldd	r31, Y+2	; 0x02
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	e9 81       	ldd	r30, Y+1	; 0x01
    1330:	fa 81       	ldd	r31, Y+2	; 0x02
    1332:	82 81       	ldd	r24, Z+2	; 0x02
    1334:	98 17       	cp	r25, r24
    1336:	19 f4       	brne	.+6      	; 0x133e <fifo_get_byte+0x54>
    fifo->tail = 0;
    1338:	e9 81       	ldd	r30, Y+1	; 0x01
    133a:	fa 81       	ldd	r31, Y+2	; 0x02
    133c:	11 82       	std	Z+1, r1	; 0x01
}
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <payload_tx_enable>:

#include "io_pins.h"

// defined by module.h but must be implemented locally, here
void payload_tx_enable(boolean_t want_enable)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	0f 92       	push	r0
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	89 83       	std	Y+1, r24	; 0x01
	if (want_enable)
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	88 23       	and	r24, r24
    135c:	41 f0       	breq	.+16     	; 0x136e <payload_tx_enable+0x22>
		PORTC |= PAYLOAD_TX_ENABLE;
    135e:	a8 e2       	ldi	r26, 0x28	; 40
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e8 e2       	ldi	r30, 0x28	; 40
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	81 60       	ori	r24, 0x01	; 1
    136a:	8c 93       	st	X, r24
    136c:	07 c0       	rjmp	.+14     	; 0x137c <payload_tx_enable+0x30>
	else
		PORTC &= ~PAYLOAD_TX_ENABLE;
    136e:	a8 e2       	ldi	r26, 0x28	; 40
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e8 e2       	ldi	r30, 0x28	; 40
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8e 7f       	andi	r24, 0xFE	; 254
    137a:	8c 93       	st	X, r24
}
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <io_pins_setup>:

void io_pins_setup()
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	// 1 = output, 0 = input
	
	DDRB = 0b00101100; // only PB2 (SPI_SS), PB3 (SPI_MOSI) and PB5 (SPI_CLK) are outputs
    138c:	e4 e2       	ldi	r30, 0x24	; 36
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8c e2       	ldi	r24, 0x2C	; 44
    1392:	80 83       	st	Z, r24
	DDRC = 0b00000111; // only PC0 (PAYLOAD_TX_ENABLE), PC1 (STATUS_LED) and PC2 (nSPI_CS_ADC) are outputs
    1394:	e7 e2       	ldi	r30, 0x27	; 39
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	87 e0       	ldi	r24, 0x07	; 7
    139a:	80 83       	st	Z, r24
	DDRD = 0b00000010; // only PD1 (PAYLOAD_TX) is an output
    139c:	ea e2       	ldi	r30, 0x2A	; 42
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	80 83       	st	Z, r24
	
	PORTC = 0x04; // set PAYLOAD_TX_ENABLE low, STATUS_LED off and nSPI_CS_ADC high
    13a4:	e8 e2       	ldi	r30, 0x28	; 40
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	84 e0       	ldi	r24, 0x04	; 4
    13aa:	80 83       	st	Z, r24
}
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <toggle_status_led>:

void toggle_status_led()
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
	if (PORTC & STATUS_LED)
    13ba:	e8 e2       	ldi	r30, 0x28	; 40
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	82 70       	andi	r24, 0x02	; 2
    13c6:	90 70       	andi	r25, 0x00	; 0
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	41 f0       	breq	.+16     	; 0x13dc <toggle_status_led+0x2a>
		PORTC &= ~STATUS_LED;
    13cc:	a8 e2       	ldi	r26, 0x28	; 40
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e8 e2       	ldi	r30, 0x28	; 40
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	8d 7f       	andi	r24, 0xFD	; 253
    13d8:	8c 93       	st	X, r24
    13da:	07 c0       	rjmp	.+14     	; 0x13ea <toggle_status_led+0x38>
	else
		PORTC |= STATUS_LED;
    13dc:	a8 e2       	ldi	r26, 0x28	; 40
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e8 e2       	ldi	r30, 0x28	; 40
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	82 60       	ori	r24, 0x02	; 2
    13e8:	8c 93       	st	X, r24
}
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <status_led_on>:

void status_led_on()
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
	PORTC |= STATUS_LED;
    13f8:	a8 e2       	ldi	r26, 0x28	; 40
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e8 e2       	ldi	r30, 0x28	; 40
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	82 60       	ori	r24, 0x02	; 2
    1404:	8c 93       	st	X, r24
}
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <status_led_off>:

void status_led_off()
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
	PORTC &= ~STATUS_LED;
    1414:	a8 e2       	ldi	r26, 0x28	; 40
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e8 e2       	ldi	r30, 0x28	; 40
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	8d 7f       	andi	r24, 0xFD	; 253
    1420:	8c 93       	st	X, r24
}
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <main>:
#include "io_pins.h"
#include "adc.h"
#include "timer.h"

int main()
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
	io_pins_setup();
    1430:	0e 94 c2 09 	call	0x1384	; 0x1384 <io_pins_setup>
	module_setup();
    1434:	0e 94 2a 0a 	call	0x1454	; 0x1454 <module_setup>
	adc_setup();
    1438:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <adc_setup>
	timer1_setup();
    143c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <timer1_setup>
	
	// enable global interrupts
	sei();
    1440:	78 94       	sei
	
	while (1)
	{
		comms_update();
    1442:	0e 94 b0 05 	call	0xb60	; 0xb60 <comms_update>
		
		if (adc_z_want_update)
    1446:	80 91 b9 02 	lds	r24, 0x02B9
    144a:	88 23       	and	r24, r24
    144c:	d1 f3       	breq	.-12     	; 0x1442 <main+0x1a>
			adc_buffer_update();
    144e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <adc_buffer_update>
    1452:	f7 cf       	rjmp	.-18     	; 0x1442 <main+0x1a>

00001454 <module_setup>:
#include "uart.h"

#include "module.h"

void module_setup()
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
	payload_tx_enable(FALSE); // disable payload TX (if not already done by local io_pins_setup())
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	0e 94 a6 09 	call	0x134c	; 0x134c <payload_tx_enable>

  module_id = eeprom_read_byte(MODULE_EEPROM_ADDR_MODULE_ID);
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 45 0a 	call	0x148a	; 0x148a <eeprom_read_byte>
    146a:	80 93 ba 02 	sts	0x02BA, r24
	if (module_id > 127)
    146e:	80 91 ba 02 	lds	r24, 0x02BA
    1472:	88 23       	and	r24, r24
    1474:	1c f4       	brge	.+6      	; 0x147c <module_setup+0x28>
		module_id = MODULE_INITIAL_ID;
    1476:	8f e7       	ldi	r24, 0x7F	; 127
    1478:	80 93 ba 02 	sts	0x02BA, r24

	comms_setup();
    147c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <comms_setup>
	uart0_setup();
    1480:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <uart0_setup>
}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <eeprom_read_byte+0x6>
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	9a 83       	std	Y+2, r25	; 0x02
    1496:	89 83       	std	Y+1, r24	; 0x01
    do {} while (!eeprom_is_ready ());
    1498:	ef e3       	ldi	r30, 0x3F	; 63
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	82 70       	andi	r24, 0x02	; 2
    14a4:	90 70       	andi	r25, 0x00	; 0
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	b9 f7       	brne	.-18     	; 0x1498 <eeprom_read_byte+0xe>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    14aa:	e1 e4       	ldi	r30, 0x41	; 65
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	9a 81       	ldd	r25, Y+2	; 0x02
    14b2:	91 83       	std	Z+1, r25	; 0x01
    14b4:	80 83       	st	Z, r24
#endif
    EECR |= (1 << EERE);
    14b6:	af e3       	ldi	r26, 0x3F	; 63
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ef e3       	ldi	r30, 0x3F	; 63
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	81 60       	ori	r24, 0x01	; 1
    14c2:	8c 93       	st	X, r24
    return EEDR;
    14c4:	e0 e4       	ldi	r30, 0x40	; 64
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
}
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <module_packet_scan>:

void module_packet_scan(uint8_t *data, uint8_t length)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <module_packet_scan+0x6>
    14da:	0f 92       	push	r0
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	9a 83       	std	Y+2, r25	; 0x02
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	6b 83       	std	Y+3, r22	; 0x03
	// perform initial packet scan and handle standard module packet classes
	
	if (length > 0)
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	88 23       	and	r24, r24
    14ea:	09 f4       	brne	.+2      	; 0x14ee <module_packet_scan+0x1a>
    14ec:	41 c0       	rjmp	.+130    	; 0x1570 <module_packet_scan+0x9c>
	{
		switch (data[0])
    14ee:	e9 81       	ldd	r30, Y+1	; 0x01
    14f0:	fa 81       	ldd	r31, Y+2	; 0x02
    14f2:	80 81       	ld	r24, Z
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	8f 3f       	cpi	r24, 0xFF	; 255
    14fa:	91 05       	cpc	r25, r1
    14fc:	c9 f5       	brne	.+114    	; 0x1570 <module_packet_scan+0x9c>
		{
			case MODULE_PACKET_CLASS_CHANGE_MODULE_ID:
				if ((length > 1)&&(data[1] < 128))
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	d8 f1       	brcs	.+118    	; 0x157a <module_packet_scan+0xa6>
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	9a 81       	ldd	r25, Y+2	; 0x02
    1508:	fc 01       	movw	r30, r24
    150a:	31 96       	adiw	r30, 0x01	; 1
    150c:	80 81       	ld	r24, Z
    150e:	88 23       	and	r24, r24
    1510:	a4 f1       	brlt	.+104    	; 0x157a <module_packet_scan+0xa6>
				{
					eeprom_write_byte(MODULE_EEPROM_ADDR_MODULE_ID, data[1]);
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	fc 01       	movw	r30, r24
    1518:	31 96       	adiw	r30, 0x01	; 1
    151a:	80 81       	ld	r24, Z
    151c:	68 2f       	mov	r22, r24
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 c3 0a 	call	0x1586	; 0x1586 <eeprom_write_byte>
					send_text("Module ID changed %d -> %d", module_id, data[1]);
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	9a 81       	ldd	r25, Y+2	; 0x02
    152a:	fc 01       	movw	r30, r24
    152c:	31 96       	adiw	r30, 0x01	; 1
    152e:	80 81       	ld	r24, Z
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	80 91 ba 02 	lds	r24, 0x02BA
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	3f 93       	push	r19
    153e:	2f 93       	push	r18
    1540:	9f 93       	push	r25
    1542:	8f 93       	push	r24
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	91 e0       	ldi	r25, 0x01	; 1
    1548:	9f 93       	push	r25
    154a:	8f 93       	push	r24
    154c:	0e 94 88 08 	call	0x1110	; 0x1110 <send_text>
    1550:	8d b7       	in	r24, 0x3d	; 61
    1552:	9e b7       	in	r25, 0x3e	; 62
    1554:	06 96       	adiw	r24, 0x06	; 6
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	9e bf       	out	0x3e, r25	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	8d bf       	out	0x3d, r24	; 61
					module_id = data[1];
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	9a 81       	ldd	r25, Y+2	; 0x02
    1564:	fc 01       	movw	r30, r24
    1566:	31 96       	adiw	r30, 0x01	; 1
    1568:	80 81       	ld	r24, Z
    156a:	80 93 ba 02 	sts	0x02BA, r24
    156e:	05 c0       	rjmp	.+10     	; 0x157a <module_packet_scan+0xa6>
				return;
		}
	}
	
	// call external packet_scan() for module-specific packet handling
	packet_scan(data, length);
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	6b 81       	ldd	r22, Y+3	; 0x03
    1576:	0e 94 ed 0a 	call	0x15da	; 0x15da <packet_scan>
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <eeprom_write_byte+0x6>
    158c:	0f 92       	push	r0
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	9a 83       	std	Y+2, r25	; 0x02
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	6b 83       	std	Y+3, r22	; 0x03
    do {} while (!eeprom_is_ready ());
    1598:	ef e3       	ldi	r30, 0x3F	; 63
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	82 70       	andi	r24, 0x02	; 2
    15a4:	90 70       	andi	r25, 0x00	; 0
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	b9 f7       	brne	.-18     	; 0x1598 <eeprom_write_byte+0x12>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    15aa:	ef e3       	ldi	r30, 0x3F	; 63
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	10 82       	st	Z, r1
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    15b0:	e1 e4       	ldi	r30, 0x41	; 65
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	9a 81       	ldd	r25, Y+2	; 0x02
    15b8:	91 83       	std	Z+1, r25	; 0x01
    15ba:	80 83       	st	Z, r24
#endif
    EEDR = __value;
    15bc:	e0 e4       	ldi	r30, 0x40	; 64
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	80 83       	st	Z, r24

    __asm__ __volatile__ (
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	fa 9a       	sbi	0x1f, 2	; 31
    15ca:	f9 9a       	sbi	0x1f, 1	; 31
    15cc:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <packet_scan>:
#include "adc.h"

#include "packet_scan.h"

void packet_scan(uint8_t *data, uint8_t length)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <packet_scan+0x6>
    15e0:	0f 92       	push	r0
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	9a 83       	std	Y+2, r25	; 0x02
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	6b 83       	std	Y+3, r22	; 0x03
	if (length > 0)
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	88 23       	and	r24, r24
    15f0:	b9 f0       	breq	.+46     	; 0x1620 <packet_scan+0x46>
	{
		switch (data[0])
    15f2:	e9 81       	ldd	r30, Y+1	; 0x01
    15f4:	fa 81       	ldd	r31, Y+2	; 0x02
    15f6:	80 81       	ld	r24, Z
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	81 f4       	brne	.+32     	; 0x1620 <packet_scan+0x46>
		{
			case 0:
				send_text("%d", adc_z_new);
    1600:	80 91 b7 02 	lds	r24, 0x02B7
    1604:	90 91 b8 02 	lds	r25, 0x02B8
    1608:	9f 93       	push	r25
    160a:	8f 93       	push	r24
    160c:	8b e1       	ldi	r24, 0x1B	; 27
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	9f 93       	push	r25
    1612:	8f 93       	push	r24
    1614:	0e 94 88 08 	call	0x1110	; 0x1110 <send_text>
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
				break;
		}
	}
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <packet_tx_request>:

void packet_tx_request()
{
    162c:	ef 92       	push	r14
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
	PORTC ^= STATUS_LED;
    163a:	a8 e2       	ldi	r26, 0x28	; 40
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e8 e2       	ldi	r30, 0x28	; 40
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	90 81       	ld	r25, Z
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	89 27       	eor	r24, r25
    1648:	8c 93       	st	X, r24
	adc_pack_buffer();
    164a:	0e 94 69 00 	call	0xd2	; 0xd2 <adc_pack_buffer>
	
	// send output packet
	send_set_class_indexed_item_indexed(CLASS_PAYLOAD, module_id, CLASS_PAYLOAD_MEM_BYTES, 0, adc_z_buffer_packed, 31);
    164e:	30 91 ba 02 	lds	r19, 0x02BA
    1652:	88 e9       	ldi	r24, 0x98	; 152
    1654:	92 e0       	ldi	r25, 0x02	; 2
    1656:	0f 2e       	mov	r0, r31
    1658:	ff e1       	ldi	r31, 0x1F	; 31
    165a:	ef 2e       	mov	r14, r31
    165c:	f0 2d       	mov	r31, r0
    165e:	8c 01       	movw	r16, r24
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	4a e0       	ldi	r20, 0x0A	; 10
    1664:	63 2f       	mov	r22, r19
    1666:	87 e0       	ldi	r24, 0x07	; 7
    1668:	0e 94 81 06 	call	0xd02	; 0xd02 <send_set_class_indexed_item_indexed>
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	1f 91       	pop	r17
    1672:	0f 91       	pop	r16
    1674:	ef 90       	pop	r14
    1676:	08 95       	ret

00001678 <__vector_11>:
#include "adc.h"

#include "timer.h"

ISR(TIMER1_COMPA_vect)
{
    1678:	1f 92       	push	r1
    167a:	0f 92       	push	r0
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	0f 92       	push	r0
    1680:	11 24       	eor	r1, r1
    1682:	2f 93       	push	r18
    1684:	3f 93       	push	r19
    1686:	4f 93       	push	r20
    1688:	5f 93       	push	r21
    168a:	6f 93       	push	r22
    168c:	7f 93       	push	r23
    168e:	8f 93       	push	r24
    1690:	9f 93       	push	r25
    1692:	af 93       	push	r26
    1694:	bf 93       	push	r27
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
	adc_update();
    16a2:	0e 94 20 01 	call	0x240	; 0x240 <adc_update>
}
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	ff 91       	pop	r31
    16ac:	ef 91       	pop	r30
    16ae:	bf 91       	pop	r27
    16b0:	af 91       	pop	r26
    16b2:	9f 91       	pop	r25
    16b4:	8f 91       	pop	r24
    16b6:	7f 91       	pop	r23
    16b8:	6f 91       	pop	r22
    16ba:	5f 91       	pop	r21
    16bc:	4f 91       	pop	r20
    16be:	3f 91       	pop	r19
    16c0:	2f 91       	pop	r18
    16c2:	0f 90       	pop	r0
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	0f 90       	pop	r0
    16c8:	1f 90       	pop	r1
    16ca:	18 95       	reti

000016cc <timer1_setup>:

void timer1_setup()
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = (0 << WGM11) | (0 << WGM10); // set WGM1 to 4, this clears timer counter on OCR1A
    16d4:	e0 e8       	ldi	r30, 0x80	; 128
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	10 82       	st	Z, r1
	TCCR1B = (0 << WGM13) | (1 << WGM12) | (0 << CS12) | (1 << CS11) | (1 << CS10); // set rest of WGM1 and set CS1 to 3 (64 prescaler)
    16da:	e1 e8       	ldi	r30, 0x81	; 129
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	8b e0       	ldi	r24, 0x0B	; 11
    16e0:	80 83       	st	Z, r24
	OCR1A = (uint16_t) 249; // want 1 ms timer, which is 1000 Hz. Must half this, since f_oc1a period is TWICE timer length, to that's 500 Hz. Therefore: i.e. (f_clk / (2 * prescaler * f_oc1a)) - 1 = (16000000 / (2 * 64 * 500)) - 1 = 249
    16e2:	e8 e8       	ldi	r30, 0x88	; 136
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	89 ef       	ldi	r24, 0xF9	; 249
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
	TIMSK1 = (1 << OCIE1A); // enabled interrupt on OCR1A match (TIMER1_COMPA_vect)
    16ee:	ef e6       	ldi	r30, 0x6F	; 111
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	80 83       	st	Z, r24
}
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <__vector_19>:
  uart0_tx_idle = FALSE;
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02) | (1 << UDRIE0); // enable TX register empty interrupt
}

ISR(USART_UDRE_vect)
{
    16fc:	1f 92       	push	r1
    16fe:	0f 92       	push	r0
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	0f 92       	push	r0
    1704:	11 24       	eor	r1, r1
    1706:	2f 93       	push	r18
    1708:	3f 93       	push	r19
    170a:	4f 93       	push	r20
    170c:	5f 93       	push	r21
    170e:	6f 93       	push	r22
    1710:	7f 93       	push	r23
    1712:	8f 93       	push	r24
    1714:	9f 93       	push	r25
    1716:	af 93       	push	r26
    1718:	bf 93       	push	r27
    171a:	ef 93       	push	r30
    171c:	ff 93       	push	r31
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
	if (payload_stream.tx_fifo.head != payload_stream.tx_fifo.tail)
    1726:	90 91 c0 02 	lds	r25, 0x02C0
    172a:	80 91 c1 02 	lds	r24, 0x02C1
    172e:	98 17       	cp	r25, r24
    1730:	e1 f0       	breq	.+56     	; 0x176a <__vector_19+0x6e>
	{
		// get byte to be transmitted from payload_stream.tx_fifo (more efficient to duplicate fifo_get_byte() code here)
		UDR0 = payload_stream.tx_fifo.buffer[payload_stream.tx_fifo.tail++];
    1732:	a6 ec       	ldi	r26, 0xC6	; 198
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	20 91 c3 02 	lds	r18, 0x02C3
    173a:	30 91 c4 02 	lds	r19, 0x02C4
    173e:	40 91 c1 02 	lds	r20, 0x02C1
    1742:	84 2f       	mov	r24, r20
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	f9 01       	movw	r30, r18
    1748:	e8 0f       	add	r30, r24
    174a:	f9 1f       	adc	r31, r25
    174c:	80 81       	ld	r24, Z
    174e:	8c 93       	st	X, r24
    1750:	84 2f       	mov	r24, r20
    1752:	8f 5f       	subi	r24, 0xFF	; 255
    1754:	80 93 c1 02 	sts	0x02C1, r24
		if (payload_stream.tx_fifo.tail == payload_stream.tx_fifo.buffer_length)
    1758:	90 91 c1 02 	lds	r25, 0x02C1
    175c:	80 91 c2 02 	lds	r24, 0x02C2
    1760:	98 17       	cp	r25, r24
    1762:	01 f5       	brne	.+64     	; 0x17a4 <__vector_19+0xa8>
			payload_stream.tx_fifo.tail = 0;
    1764:	10 92 c1 02 	sts	0x02C1, r1
    1768:	1d c0       	rjmp	.+58     	; 0x17a4 <__vector_19+0xa8>
	}
	else if (sent_etx_token == FALSE)
    176a:	80 91 16 03 	lds	r24, 0x0316
    176e:	88 23       	and	r24, r24
    1770:	69 f4       	brne	.+26     	; 0x178c <__vector_19+0x90>
	{
		// send end of TX token byte - 9th bit must be high to flag this
		sent_etx_token = TRUE;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	80 93 16 03 	sts	0x0316, r24
		UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02) | (1 << UDRIE0) | (1 << TXB80); // set TXB80 high
    1778:	e1 ec       	ldi	r30, 0xC1	; 193
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8d eb       	ldi	r24, 0xBD	; 189
    177e:	80 83       	st	Z, r24
		UDR0 = module_id;
    1780:	e6 ec       	ldi	r30, 0xC6	; 198
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 91 ba 02 	lds	r24, 0x02BA
    1788:	80 83       	st	Z, r24
    178a:	0c c0       	rjmp	.+24     	; 0x17a4 <__vector_19+0xa8>
	}
	else
	{
		UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02); // disable TX register empty interrupt
    178c:	e1 ec       	ldi	r30, 0xC1	; 193
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	8c e9       	ldi	r24, 0x9C	; 156
    1792:	80 83       	st	Z, r24
		sent_etx_token = FALSE; // reset flag
    1794:	10 92 16 03 	sts	0x0316, r1
		payload_tx_enable(FALSE); // disable payload TX
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	0e 94 a6 09 	call	0x134c	; 0x134c <payload_tx_enable>
		uart0_tx_idle = TRUE;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	80 93 17 03 	sts	0x0317, r24
	}
}
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	ff 91       	pop	r31
    17aa:	ef 91       	pop	r30
    17ac:	bf 91       	pop	r27
    17ae:	af 91       	pop	r26
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	7f 91       	pop	r23
    17b6:	6f 91       	pop	r22
    17b8:	5f 91       	pop	r21
    17ba:	4f 91       	pop	r20
    17bc:	3f 91       	pop	r19
    17be:	2f 91       	pop	r18
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	0f 90       	pop	r0
    17c6:	1f 90       	pop	r1
    17c8:	18 95       	reti

000017ca <__vector_18>:

ISR(USART_RX_vect)
{
    17ca:	1f 92       	push	r1
    17cc:	0f 92       	push	r0
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	0f 92       	push	r0
    17d2:	11 24       	eor	r1, r1
    17d4:	2f 93       	push	r18
    17d6:	3f 93       	push	r19
    17d8:	4f 93       	push	r20
    17da:	5f 93       	push	r21
    17dc:	6f 93       	push	r22
    17de:	7f 93       	push	r23
    17e0:	8f 93       	push	r24
    17e2:	9f 93       	push	r25
    17e4:	af 93       	push	r26
    17e6:	bf 93       	push	r27
    17e8:	ef 93       	push	r30
    17ea:	ff 93       	push	r31
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	0f 92       	push	r0
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t rx_byte;
	
	if (UCSR0B & 0x02)
    17f6:	e1 ec       	ldi	r30, 0xC1	; 193
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	82 70       	andi	r24, 0x02	; 2
    1802:	90 70       	andi	r25, 0x00	; 0
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	69 f1       	breq	.+90     	; 0x1862 <__vector_18+0x98>
	{
		rx_byte = UDR0;
    1808:	e6 ec       	ldi	r30, 0xC6	; 198
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	89 83       	std	Y+1, r24	; 0x01
		
		if (((rx_byte & 0x7F) == module_id) || ((rx_byte & 0x7F) == MODULE_BROADCAST_ID))
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9c 01       	movw	r18, r24
    1818:	2f 77       	andi	r18, 0x7F	; 127
    181a:	30 70       	andi	r19, 0x00	; 0
    181c:	80 91 ba 02 	lds	r24, 0x02BA
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	28 17       	cp	r18, r24
    1826:	39 07       	cpc	r19, r25
    1828:	41 f0       	breq	.+16     	; 0x183a <__vector_18+0x70>
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	8f 77       	andi	r24, 0x7F	; 127
    1832:	90 70       	andi	r25, 0x00	; 0
    1834:	8f 37       	cpi	r24, 0x7F	; 127
    1836:	91 05       	cpc	r25, r1
    1838:	79 f4       	brne	.+30     	; 0x1858 <__vector_18+0x8e>
		{
			// address is intended for this module
			UCSR0A = 0; // disable multi-processor comms mode, i.e. continue to receive next set of non-address RX data
    183a:	e0 ec       	ldi	r30, 0xC0	; 192
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	10 82       	st	Z, r1
		
			if (rx_byte & 0x80)
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	88 23       	and	r24, r24
    1844:	4c f5       	brge	.+82     	; 0x1898 <__vector_18+0xce>
			{
				// received a TX token
				
				packet_tx_request();
    1846:	0e 94 16 0b 	call	0x162c	; 0x162c <packet_tx_request>
			
				if (uart0_tx_idle)
    184a:	80 91 17 03 	lds	r24, 0x0317
    184e:	88 23       	and	r24, r24
    1850:	19 f1       	breq	.+70     	; 0x1898 <__vector_18+0xce>
					uart0_start_tx(); // start TX immediately (even if it's just a "nothing to TX" byte)
    1852:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <uart0_start_tx>
    1856:	20 c0       	rjmp	.+64     	; 0x1898 <__vector_18+0xce>
			}
		}
		else
			UCSR0A = (1 << MPCM0); // enable multi-processor comms mode, i.e. ignore subsequent RX data until next address byte (9th bit is high)
    1858:	e0 ec       	ldi	r30, 0xC0	; 192
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	80 83       	st	Z, r24
    1860:	1b c0       	rjmp	.+54     	; 0x1898 <__vector_18+0xce>
	}
	else
	{
		// add received byte to payload_stream.rx_fifo (more efficient to duplicate fifo_add_byte() code here)
		// since multi-processor comms mode used, assume this data is intended for this module
		payload_stream.rx_fifo.buffer[payload_stream.rx_fifo.head++] = UDR0;
    1862:	20 91 be 02 	lds	r18, 0x02BE
    1866:	30 91 bf 02 	lds	r19, 0x02BF
    186a:	40 91 bb 02 	lds	r20, 0x02BB
    186e:	84 2f       	mov	r24, r20
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	d9 01       	movw	r26, r18
    1874:	a8 0f       	add	r26, r24
    1876:	b9 1f       	adc	r27, r25
    1878:	e6 ec       	ldi	r30, 0xC6	; 198
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	8c 93       	st	X, r24
    1880:	84 2f       	mov	r24, r20
    1882:	8f 5f       	subi	r24, 0xFF	; 255
    1884:	80 93 bb 02 	sts	0x02BB, r24
		if (payload_stream.rx_fifo.head == payload_stream.rx_fifo.buffer_length)
    1888:	90 91 bb 02 	lds	r25, 0x02BB
    188c:	80 91 bd 02 	lds	r24, 0x02BD
    1890:	98 17       	cp	r25, r24
    1892:	11 f4       	brne	.+4      	; 0x1898 <__vector_18+0xce>
			payload_stream.rx_fifo.head = 0;
    1894:	10 92 bb 02 	sts	0x02BB, r1
	}
}
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	ff 91       	pop	r31
    18a0:	ef 91       	pop	r30
    18a2:	bf 91       	pop	r27
    18a4:	af 91       	pop	r26
    18a6:	9f 91       	pop	r25
    18a8:	8f 91       	pop	r24
    18aa:	7f 91       	pop	r23
    18ac:	6f 91       	pop	r22
    18ae:	5f 91       	pop	r21
    18b0:	4f 91       	pop	r20
    18b2:	3f 91       	pop	r19
    18b4:	2f 91       	pop	r18
    18b6:	0f 90       	pop	r0
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	0f 90       	pop	r0
    18bc:	1f 90       	pop	r1
    18be:	18 95       	reti

000018c0 <uart0_start_tx>:
volatile boolean_t uart0_tx_idle;
volatile boolean_t sent_etx_token;

// only to be called if ((payload_stream.tx_fifo.head != payload_stream.tx_fifo.tail)&&(uart0_tx_idle))
static inline void uart0_start_tx()
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	payload_tx_enable(TRUE); // enable payload TX
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	0e 94 a6 09 	call	0x134c	; 0x134c <payload_tx_enable>
  uart0_tx_idle = FALSE;
    18ce:	10 92 17 03 	sts	0x0317, r1
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02) | (1 << UDRIE0); // enable TX register empty interrupt
    18d2:	e1 ec       	ldi	r30, 0xC1	; 193
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	8c eb       	ldi	r24, 0xBC	; 188
    18d8:	80 83       	st	Z, r24
}
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <uart0_setup>:
			payload_stream.rx_fifo.head = 0;
	}
}

void uart0_setup()
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
	// set for 38400 baud assuming 16 MHz clock
	UBRR0H = 0x00;
    18e8:	e5 ec       	ldi	r30, 0xC5	; 197
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	10 82       	st	Z, r1
	UBRR0L = 0x19;
    18ee:	e4 ec       	ldi	r30, 0xC4	; 196
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	89 e1       	ldi	r24, 0x19	; 25
    18f4:	80 83       	st	Z, r24
	
	UCSR0A = (1 << MPCM0); // disable double TX speed and enable multi-processor comms mode (i.e. ignore all RX data until address bit received (9th bit is high))
    18f6:	e0 ec       	ldi	r30, 0xC0	; 192
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	80 83       	st	Z, r24
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02); // enable RX and TX and the RX interrupt (do not enable TX interrupt until data ready to send), set UCSZ02 high (for 9 bit character size)
    18fe:	e1 ec       	ldi	r30, 0xC1	; 193
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	8c e9       	ldi	r24, 0x9C	; 156
    1904:	80 83       	st	Z, r24
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // set as asynchronous, format as 9N1 (9, not 8, given UCSZ02 in UCSR0B)
    1906:	e2 ec       	ldi	r30, 0xC2	; 194
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	86 e0       	ldi	r24, 0x06	; 6
    190c:	80 83       	st	Z, r24

  uart0_tx_idle = TRUE;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	80 93 17 03 	sts	0x0317, r24
	sent_etx_token = FALSE;
    1914:	10 92 16 03 	sts	0x0316, r1
}
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <vprintf>:
    191e:	ab 01       	movw	r20, r22
    1920:	bc 01       	movw	r22, r24
    1922:	80 91 1a 03 	lds	r24, 0x031A
    1926:	90 91 1b 03 	lds	r25, 0x031B
    192a:	0e 94 98 0c 	call	0x1930	; 0x1930 <vfprintf>
    192e:	08 95       	ret

00001930 <vfprintf>:
    1930:	ab e0       	ldi	r26, 0x0B	; 11
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ee e9       	ldi	r30, 0x9E	; 158
    1936:	fc e0       	ldi	r31, 0x0C	; 12
    1938:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__prologue_saves__>
    193c:	3c 01       	movw	r6, r24
    193e:	2b 01       	movw	r4, r22
    1940:	5a 01       	movw	r10, r20
    1942:	fc 01       	movw	r30, r24
    1944:	17 82       	std	Z+7, r1	; 0x07
    1946:	16 82       	std	Z+6, r1	; 0x06
    1948:	83 81       	ldd	r24, Z+3	; 0x03
    194a:	81 fd       	sbrc	r24, 1
    194c:	03 c0       	rjmp	.+6      	; 0x1954 <vfprintf+0x24>
    194e:	6f ef       	ldi	r22, 0xFF	; 255
    1950:	7f ef       	ldi	r23, 0xFF	; 255
    1952:	c8 c1       	rjmp	.+912    	; 0x1ce4 <vfprintf+0x3b4>
    1954:	9a e0       	ldi	r25, 0x0A	; 10
    1956:	89 2e       	mov	r8, r25
    1958:	1e 01       	movw	r2, r28
    195a:	08 94       	sec
    195c:	21 1c       	adc	r2, r1
    195e:	31 1c       	adc	r3, r1
    1960:	f3 01       	movw	r30, r6
    1962:	23 81       	ldd	r18, Z+3	; 0x03
    1964:	f2 01       	movw	r30, r4
    1966:	23 fd       	sbrc	r18, 3
    1968:	85 91       	lpm	r24, Z+
    196a:	23 ff       	sbrs	r18, 3
    196c:	81 91       	ld	r24, Z+
    196e:	2f 01       	movw	r4, r30
    1970:	88 23       	and	r24, r24
    1972:	09 f4       	brne	.+2      	; 0x1976 <vfprintf+0x46>
    1974:	b4 c1       	rjmp	.+872    	; 0x1cde <vfprintf+0x3ae>
    1976:	85 32       	cpi	r24, 0x25	; 37
    1978:	39 f4       	brne	.+14     	; 0x1988 <vfprintf+0x58>
    197a:	23 fd       	sbrc	r18, 3
    197c:	85 91       	lpm	r24, Z+
    197e:	23 ff       	sbrs	r18, 3
    1980:	81 91       	ld	r24, Z+
    1982:	2f 01       	movw	r4, r30
    1984:	85 32       	cpi	r24, 0x25	; 37
    1986:	29 f4       	brne	.+10     	; 0x1992 <vfprintf+0x62>
    1988:	b3 01       	movw	r22, r6
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <fputc>
    1990:	e7 cf       	rjmp	.-50     	; 0x1960 <vfprintf+0x30>
    1992:	98 2f       	mov	r25, r24
    1994:	dd 24       	eor	r13, r13
    1996:	cc 24       	eor	r12, r12
    1998:	99 24       	eor	r9, r9
    199a:	ff e1       	ldi	r31, 0x1F	; 31
    199c:	fd 15       	cp	r31, r13
    199e:	d0 f0       	brcs	.+52     	; 0x19d4 <vfprintf+0xa4>
    19a0:	9b 32       	cpi	r25, 0x2B	; 43
    19a2:	69 f0       	breq	.+26     	; 0x19be <vfprintf+0x8e>
    19a4:	9c 32       	cpi	r25, 0x2C	; 44
    19a6:	28 f4       	brcc	.+10     	; 0x19b2 <vfprintf+0x82>
    19a8:	90 32       	cpi	r25, 0x20	; 32
    19aa:	59 f0       	breq	.+22     	; 0x19c2 <vfprintf+0x92>
    19ac:	93 32       	cpi	r25, 0x23	; 35
    19ae:	91 f4       	brne	.+36     	; 0x19d4 <vfprintf+0xa4>
    19b0:	0e c0       	rjmp	.+28     	; 0x19ce <vfprintf+0x9e>
    19b2:	9d 32       	cpi	r25, 0x2D	; 45
    19b4:	49 f0       	breq	.+18     	; 0x19c8 <vfprintf+0x98>
    19b6:	90 33       	cpi	r25, 0x30	; 48
    19b8:	69 f4       	brne	.+26     	; 0x19d4 <vfprintf+0xa4>
    19ba:	41 e0       	ldi	r20, 0x01	; 1
    19bc:	24 c0       	rjmp	.+72     	; 0x1a06 <vfprintf+0xd6>
    19be:	52 e0       	ldi	r21, 0x02	; 2
    19c0:	d5 2a       	or	r13, r21
    19c2:	84 e0       	ldi	r24, 0x04	; 4
    19c4:	d8 2a       	or	r13, r24
    19c6:	28 c0       	rjmp	.+80     	; 0x1a18 <vfprintf+0xe8>
    19c8:	98 e0       	ldi	r25, 0x08	; 8
    19ca:	d9 2a       	or	r13, r25
    19cc:	25 c0       	rjmp	.+74     	; 0x1a18 <vfprintf+0xe8>
    19ce:	e0 e1       	ldi	r30, 0x10	; 16
    19d0:	de 2a       	or	r13, r30
    19d2:	22 c0       	rjmp	.+68     	; 0x1a18 <vfprintf+0xe8>
    19d4:	d7 fc       	sbrc	r13, 7
    19d6:	29 c0       	rjmp	.+82     	; 0x1a2a <vfprintf+0xfa>
    19d8:	89 2f       	mov	r24, r25
    19da:	80 53       	subi	r24, 0x30	; 48
    19dc:	8a 30       	cpi	r24, 0x0A	; 10
    19de:	70 f4       	brcc	.+28     	; 0x19fc <vfprintf+0xcc>
    19e0:	d6 fe       	sbrs	r13, 6
    19e2:	05 c0       	rjmp	.+10     	; 0x19ee <vfprintf+0xbe>
    19e4:	98 9c       	mul	r9, r8
    19e6:	90 2c       	mov	r9, r0
    19e8:	11 24       	eor	r1, r1
    19ea:	98 0e       	add	r9, r24
    19ec:	15 c0       	rjmp	.+42     	; 0x1a18 <vfprintf+0xe8>
    19ee:	c8 9c       	mul	r12, r8
    19f0:	c0 2c       	mov	r12, r0
    19f2:	11 24       	eor	r1, r1
    19f4:	c8 0e       	add	r12, r24
    19f6:	f0 e2       	ldi	r31, 0x20	; 32
    19f8:	df 2a       	or	r13, r31
    19fa:	0e c0       	rjmp	.+28     	; 0x1a18 <vfprintf+0xe8>
    19fc:	9e 32       	cpi	r25, 0x2E	; 46
    19fe:	29 f4       	brne	.+10     	; 0x1a0a <vfprintf+0xda>
    1a00:	d6 fc       	sbrc	r13, 6
    1a02:	6d c1       	rjmp	.+730    	; 0x1cde <vfprintf+0x3ae>
    1a04:	40 e4       	ldi	r20, 0x40	; 64
    1a06:	d4 2a       	or	r13, r20
    1a08:	07 c0       	rjmp	.+14     	; 0x1a18 <vfprintf+0xe8>
    1a0a:	9c 36       	cpi	r25, 0x6C	; 108
    1a0c:	19 f4       	brne	.+6      	; 0x1a14 <vfprintf+0xe4>
    1a0e:	50 e8       	ldi	r21, 0x80	; 128
    1a10:	d5 2a       	or	r13, r21
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <vfprintf+0xe8>
    1a14:	98 36       	cpi	r25, 0x68	; 104
    1a16:	49 f4       	brne	.+18     	; 0x1a2a <vfprintf+0xfa>
    1a18:	f2 01       	movw	r30, r4
    1a1a:	23 fd       	sbrc	r18, 3
    1a1c:	95 91       	lpm	r25, Z+
    1a1e:	23 ff       	sbrs	r18, 3
    1a20:	91 91       	ld	r25, Z+
    1a22:	2f 01       	movw	r4, r30
    1a24:	99 23       	and	r25, r25
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <vfprintf+0xfa>
    1a28:	b8 cf       	rjmp	.-144    	; 0x199a <vfprintf+0x6a>
    1a2a:	89 2f       	mov	r24, r25
    1a2c:	85 54       	subi	r24, 0x45	; 69
    1a2e:	83 30       	cpi	r24, 0x03	; 3
    1a30:	18 f0       	brcs	.+6      	; 0x1a38 <vfprintf+0x108>
    1a32:	80 52       	subi	r24, 0x20	; 32
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	38 f4       	brcc	.+14     	; 0x1a46 <vfprintf+0x116>
    1a38:	44 e0       	ldi	r20, 0x04	; 4
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	a4 0e       	add	r10, r20
    1a3e:	b5 1e       	adc	r11, r21
    1a40:	5f e3       	ldi	r21, 0x3F	; 63
    1a42:	59 83       	std	Y+1, r21	; 0x01
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <vfprintf+0x134>
    1a46:	93 36       	cpi	r25, 0x63	; 99
    1a48:	31 f0       	breq	.+12     	; 0x1a56 <vfprintf+0x126>
    1a4a:	93 37       	cpi	r25, 0x73	; 115
    1a4c:	79 f0       	breq	.+30     	; 0x1a6c <vfprintf+0x13c>
    1a4e:	93 35       	cpi	r25, 0x53	; 83
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <vfprintf+0x124>
    1a52:	56 c0       	rjmp	.+172    	; 0x1b00 <vfprintf+0x1d0>
    1a54:	20 c0       	rjmp	.+64     	; 0x1a96 <vfprintf+0x166>
    1a56:	f5 01       	movw	r30, r10
    1a58:	80 81       	ld	r24, Z
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	42 e0       	ldi	r20, 0x02	; 2
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	a4 0e       	add	r10, r20
    1a62:	b5 1e       	adc	r11, r21
    1a64:	71 01       	movw	r14, r2
    1a66:	01 e0       	ldi	r16, 0x01	; 1
    1a68:	10 e0       	ldi	r17, 0x00	; 0
    1a6a:	12 c0       	rjmp	.+36     	; 0x1a90 <vfprintf+0x160>
    1a6c:	f5 01       	movw	r30, r10
    1a6e:	e0 80       	ld	r14, Z
    1a70:	f1 80       	ldd	r15, Z+1	; 0x01
    1a72:	d6 fc       	sbrc	r13, 6
    1a74:	03 c0       	rjmp	.+6      	; 0x1a7c <vfprintf+0x14c>
    1a76:	6f ef       	ldi	r22, 0xFF	; 255
    1a78:	7f ef       	ldi	r23, 0xFF	; 255
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <vfprintf+0x150>
    1a7c:	69 2d       	mov	r22, r9
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	42 e0       	ldi	r20, 0x02	; 2
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	a4 0e       	add	r10, r20
    1a86:	b5 1e       	adc	r11, r21
    1a88:	c7 01       	movw	r24, r14
    1a8a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <strnlen>
    1a8e:	8c 01       	movw	r16, r24
    1a90:	5f e7       	ldi	r21, 0x7F	; 127
    1a92:	d5 22       	and	r13, r21
    1a94:	14 c0       	rjmp	.+40     	; 0x1abe <vfprintf+0x18e>
    1a96:	f5 01       	movw	r30, r10
    1a98:	e0 80       	ld	r14, Z
    1a9a:	f1 80       	ldd	r15, Z+1	; 0x01
    1a9c:	d6 fc       	sbrc	r13, 6
    1a9e:	03 c0       	rjmp	.+6      	; 0x1aa6 <vfprintf+0x176>
    1aa0:	6f ef       	ldi	r22, 0xFF	; 255
    1aa2:	7f ef       	ldi	r23, 0xFF	; 255
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <vfprintf+0x17a>
    1aa6:	69 2d       	mov	r22, r9
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	42 e0       	ldi	r20, 0x02	; 2
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	a4 0e       	add	r10, r20
    1ab0:	b5 1e       	adc	r11, r21
    1ab2:	c7 01       	movw	r24, r14
    1ab4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <strnlen_P>
    1ab8:	8c 01       	movw	r16, r24
    1aba:	50 e8       	ldi	r21, 0x80	; 128
    1abc:	d5 2a       	or	r13, r21
    1abe:	d3 fe       	sbrs	r13, 3
    1ac0:	07 c0       	rjmp	.+14     	; 0x1ad0 <vfprintf+0x1a0>
    1ac2:	1a c0       	rjmp	.+52     	; 0x1af8 <vfprintf+0x1c8>
    1ac4:	b3 01       	movw	r22, r6
    1ac6:	80 e2       	ldi	r24, 0x20	; 32
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <fputc>
    1ace:	ca 94       	dec	r12
    1ad0:	8c 2d       	mov	r24, r12
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	08 17       	cp	r16, r24
    1ad6:	19 07       	cpc	r17, r25
    1ad8:	a8 f3       	brcs	.-22     	; 0x1ac4 <vfprintf+0x194>
    1ada:	0e c0       	rjmp	.+28     	; 0x1af8 <vfprintf+0x1c8>
    1adc:	f7 01       	movw	r30, r14
    1ade:	d7 fc       	sbrc	r13, 7
    1ae0:	85 91       	lpm	r24, Z+
    1ae2:	d7 fe       	sbrs	r13, 7
    1ae4:	81 91       	ld	r24, Z+
    1ae6:	7f 01       	movw	r14, r30
    1ae8:	b3 01       	movw	r22, r6
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <fputc>
    1af0:	c1 10       	cpse	r12, r1
    1af2:	ca 94       	dec	r12
    1af4:	01 50       	subi	r16, 0x01	; 1
    1af6:	10 40       	sbci	r17, 0x00	; 0
    1af8:	01 15       	cp	r16, r1
    1afa:	11 05       	cpc	r17, r1
    1afc:	79 f7       	brne	.-34     	; 0x1adc <vfprintf+0x1ac>
    1afe:	ec c0       	rjmp	.+472    	; 0x1cd8 <vfprintf+0x3a8>
    1b00:	94 36       	cpi	r25, 0x64	; 100
    1b02:	11 f0       	breq	.+4      	; 0x1b08 <vfprintf+0x1d8>
    1b04:	99 36       	cpi	r25, 0x69	; 105
    1b06:	71 f5       	brne	.+92     	; 0x1b64 <vfprintf+0x234>
    1b08:	d7 fe       	sbrs	r13, 7
    1b0a:	08 c0       	rjmp	.+16     	; 0x1b1c <vfprintf+0x1ec>
    1b0c:	f5 01       	movw	r30, r10
    1b0e:	e0 80       	ld	r14, Z
    1b10:	f1 80       	ldd	r15, Z+1	; 0x01
    1b12:	02 81       	ldd	r16, Z+2	; 0x02
    1b14:	13 81       	ldd	r17, Z+3	; 0x03
    1b16:	44 e0       	ldi	r20, 0x04	; 4
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	0a c0       	rjmp	.+20     	; 0x1b30 <vfprintf+0x200>
    1b1c:	f5 01       	movw	r30, r10
    1b1e:	80 81       	ld	r24, Z
    1b20:	91 81       	ldd	r25, Z+1	; 0x01
    1b22:	7c 01       	movw	r14, r24
    1b24:	00 27       	eor	r16, r16
    1b26:	f7 fc       	sbrc	r15, 7
    1b28:	00 95       	com	r16
    1b2a:	10 2f       	mov	r17, r16
    1b2c:	42 e0       	ldi	r20, 0x02	; 2
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	a4 0e       	add	r10, r20
    1b32:	b5 1e       	adc	r11, r21
    1b34:	5f e6       	ldi	r21, 0x6F	; 111
    1b36:	d5 22       	and	r13, r21
    1b38:	17 ff       	sbrs	r17, 7
    1b3a:	0a c0       	rjmp	.+20     	; 0x1b50 <vfprintf+0x220>
    1b3c:	10 95       	com	r17
    1b3e:	00 95       	com	r16
    1b40:	f0 94       	com	r15
    1b42:	e0 94       	com	r14
    1b44:	e1 1c       	adc	r14, r1
    1b46:	f1 1c       	adc	r15, r1
    1b48:	01 1d       	adc	r16, r1
    1b4a:	11 1d       	adc	r17, r1
    1b4c:	80 e8       	ldi	r24, 0x80	; 128
    1b4e:	d8 2a       	or	r13, r24
    1b50:	2a e0       	ldi	r18, 0x0A	; 10
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	a1 01       	movw	r20, r2
    1b56:	c8 01       	movw	r24, r16
    1b58:	b7 01       	movw	r22, r14
    1b5a:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__ultoa_invert>
    1b5e:	f8 2e       	mov	r15, r24
    1b60:	f2 18       	sub	r15, r2
    1b62:	40 c0       	rjmp	.+128    	; 0x1be4 <vfprintf+0x2b4>
    1b64:	95 37       	cpi	r25, 0x75	; 117
    1b66:	29 f4       	brne	.+10     	; 0x1b72 <vfprintf+0x242>
    1b68:	1d 2d       	mov	r17, r13
    1b6a:	1f 7e       	andi	r17, 0xEF	; 239
    1b6c:	2a e0       	ldi	r18, 0x0A	; 10
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	1d c0       	rjmp	.+58     	; 0x1bac <vfprintf+0x27c>
    1b72:	1d 2d       	mov	r17, r13
    1b74:	19 7f       	andi	r17, 0xF9	; 249
    1b76:	9f 36       	cpi	r25, 0x6F	; 111
    1b78:	61 f0       	breq	.+24     	; 0x1b92 <vfprintf+0x262>
    1b7a:	90 37       	cpi	r25, 0x70	; 112
    1b7c:	20 f4       	brcc	.+8      	; 0x1b86 <vfprintf+0x256>
    1b7e:	98 35       	cpi	r25, 0x58	; 88
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <vfprintf+0x254>
    1b82:	ad c0       	rjmp	.+346    	; 0x1cde <vfprintf+0x3ae>
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <vfprintf+0x274>
    1b86:	90 37       	cpi	r25, 0x70	; 112
    1b88:	39 f0       	breq	.+14     	; 0x1b98 <vfprintf+0x268>
    1b8a:	98 37       	cpi	r25, 0x78	; 120
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <vfprintf+0x260>
    1b8e:	a7 c0       	rjmp	.+334    	; 0x1cde <vfprintf+0x3ae>
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <vfprintf+0x26a>
    1b92:	28 e0       	ldi	r18, 0x08	; 8
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	0a c0       	rjmp	.+20     	; 0x1bac <vfprintf+0x27c>
    1b98:	10 61       	ori	r17, 0x10	; 16
    1b9a:	14 fd       	sbrc	r17, 4
    1b9c:	14 60       	ori	r17, 0x04	; 4
    1b9e:	20 e1       	ldi	r18, 0x10	; 16
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	04 c0       	rjmp	.+8      	; 0x1bac <vfprintf+0x27c>
    1ba4:	14 fd       	sbrc	r17, 4
    1ba6:	16 60       	ori	r17, 0x06	; 6
    1ba8:	20 e1       	ldi	r18, 0x10	; 16
    1baa:	32 e0       	ldi	r19, 0x02	; 2
    1bac:	17 ff       	sbrs	r17, 7
    1bae:	08 c0       	rjmp	.+16     	; 0x1bc0 <vfprintf+0x290>
    1bb0:	f5 01       	movw	r30, r10
    1bb2:	60 81       	ld	r22, Z
    1bb4:	71 81       	ldd	r23, Z+1	; 0x01
    1bb6:	82 81       	ldd	r24, Z+2	; 0x02
    1bb8:	93 81       	ldd	r25, Z+3	; 0x03
    1bba:	44 e0       	ldi	r20, 0x04	; 4
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	08 c0       	rjmp	.+16     	; 0x1bd0 <vfprintf+0x2a0>
    1bc0:	f5 01       	movw	r30, r10
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	42 e0       	ldi	r20, 0x02	; 2
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	a4 0e       	add	r10, r20
    1bd2:	b5 1e       	adc	r11, r21
    1bd4:	a1 01       	movw	r20, r2
    1bd6:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__ultoa_invert>
    1bda:	f8 2e       	mov	r15, r24
    1bdc:	f2 18       	sub	r15, r2
    1bde:	8f e7       	ldi	r24, 0x7F	; 127
    1be0:	d8 2e       	mov	r13, r24
    1be2:	d1 22       	and	r13, r17
    1be4:	d6 fe       	sbrs	r13, 6
    1be6:	0b c0       	rjmp	.+22     	; 0x1bfe <vfprintf+0x2ce>
    1be8:	5e ef       	ldi	r21, 0xFE	; 254
    1bea:	d5 22       	and	r13, r21
    1bec:	f9 14       	cp	r15, r9
    1bee:	38 f4       	brcc	.+14     	; 0x1bfe <vfprintf+0x2ce>
    1bf0:	d4 fe       	sbrs	r13, 4
    1bf2:	07 c0       	rjmp	.+14     	; 0x1c02 <vfprintf+0x2d2>
    1bf4:	d2 fc       	sbrc	r13, 2
    1bf6:	05 c0       	rjmp	.+10     	; 0x1c02 <vfprintf+0x2d2>
    1bf8:	8f ee       	ldi	r24, 0xEF	; 239
    1bfa:	d8 22       	and	r13, r24
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <vfprintf+0x2d2>
    1bfe:	1f 2d       	mov	r17, r15
    1c00:	01 c0       	rjmp	.+2      	; 0x1c04 <vfprintf+0x2d4>
    1c02:	19 2d       	mov	r17, r9
    1c04:	d4 fe       	sbrs	r13, 4
    1c06:	0d c0       	rjmp	.+26     	; 0x1c22 <vfprintf+0x2f2>
    1c08:	fe 01       	movw	r30, r28
    1c0a:	ef 0d       	add	r30, r15
    1c0c:	f1 1d       	adc	r31, r1
    1c0e:	80 81       	ld	r24, Z
    1c10:	80 33       	cpi	r24, 0x30	; 48
    1c12:	19 f4       	brne	.+6      	; 0x1c1a <vfprintf+0x2ea>
    1c14:	99 ee       	ldi	r25, 0xE9	; 233
    1c16:	d9 22       	and	r13, r25
    1c18:	08 c0       	rjmp	.+16     	; 0x1c2a <vfprintf+0x2fa>
    1c1a:	1f 5f       	subi	r17, 0xFF	; 255
    1c1c:	d2 fe       	sbrs	r13, 2
    1c1e:	05 c0       	rjmp	.+10     	; 0x1c2a <vfprintf+0x2fa>
    1c20:	03 c0       	rjmp	.+6      	; 0x1c28 <vfprintf+0x2f8>
    1c22:	8d 2d       	mov	r24, r13
    1c24:	86 78       	andi	r24, 0x86	; 134
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <vfprintf+0x2fa>
    1c28:	1f 5f       	subi	r17, 0xFF	; 255
    1c2a:	0d 2d       	mov	r16, r13
    1c2c:	d3 fc       	sbrc	r13, 3
    1c2e:	14 c0       	rjmp	.+40     	; 0x1c58 <vfprintf+0x328>
    1c30:	d0 fe       	sbrs	r13, 0
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <vfprintf+0x322>
    1c34:	1c 15       	cp	r17, r12
    1c36:	10 f0       	brcs	.+4      	; 0x1c3c <vfprintf+0x30c>
    1c38:	9f 2c       	mov	r9, r15
    1c3a:	0b c0       	rjmp	.+22     	; 0x1c52 <vfprintf+0x322>
    1c3c:	9f 2c       	mov	r9, r15
    1c3e:	9c 0c       	add	r9, r12
    1c40:	91 1a       	sub	r9, r17
    1c42:	1c 2d       	mov	r17, r12
    1c44:	06 c0       	rjmp	.+12     	; 0x1c52 <vfprintf+0x322>
    1c46:	b3 01       	movw	r22, r6
    1c48:	80 e2       	ldi	r24, 0x20	; 32
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <fputc>
    1c50:	1f 5f       	subi	r17, 0xFF	; 255
    1c52:	1c 15       	cp	r17, r12
    1c54:	c0 f3       	brcs	.-16     	; 0x1c46 <vfprintf+0x316>
    1c56:	04 c0       	rjmp	.+8      	; 0x1c60 <vfprintf+0x330>
    1c58:	1c 15       	cp	r17, r12
    1c5a:	10 f4       	brcc	.+4      	; 0x1c60 <vfprintf+0x330>
    1c5c:	c1 1a       	sub	r12, r17
    1c5e:	01 c0       	rjmp	.+2      	; 0x1c62 <vfprintf+0x332>
    1c60:	cc 24       	eor	r12, r12
    1c62:	04 ff       	sbrs	r16, 4
    1c64:	10 c0       	rjmp	.+32     	; 0x1c86 <vfprintf+0x356>
    1c66:	b3 01       	movw	r22, r6
    1c68:	80 e3       	ldi	r24, 0x30	; 48
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <fputc>
    1c70:	02 ff       	sbrs	r16, 2
    1c72:	1e c0       	rjmp	.+60     	; 0x1cb0 <vfprintf+0x380>
    1c74:	01 fd       	sbrc	r16, 1
    1c76:	03 c0       	rjmp	.+6      	; 0x1c7e <vfprintf+0x34e>
    1c78:	88 e7       	ldi	r24, 0x78	; 120
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <vfprintf+0x352>
    1c7e:	88 e5       	ldi	r24, 0x58	; 88
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	b3 01       	movw	r22, r6
    1c84:	0c c0       	rjmp	.+24     	; 0x1c9e <vfprintf+0x36e>
    1c86:	80 2f       	mov	r24, r16
    1c88:	86 78       	andi	r24, 0x86	; 134
    1c8a:	91 f0       	breq	.+36     	; 0x1cb0 <vfprintf+0x380>
    1c8c:	01 ff       	sbrs	r16, 1
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <vfprintf+0x364>
    1c90:	8b e2       	ldi	r24, 0x2B	; 43
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <vfprintf+0x366>
    1c94:	80 e2       	ldi	r24, 0x20	; 32
    1c96:	d7 fc       	sbrc	r13, 7
    1c98:	8d e2       	ldi	r24, 0x2D	; 45
    1c9a:	b3 01       	movw	r22, r6
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <fputc>
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <vfprintf+0x380>
    1ca4:	b3 01       	movw	r22, r6
    1ca6:	80 e3       	ldi	r24, 0x30	; 48
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <fputc>
    1cae:	9a 94       	dec	r9
    1cb0:	f9 14       	cp	r15, r9
    1cb2:	c0 f3       	brcs	.-16     	; 0x1ca4 <vfprintf+0x374>
    1cb4:	fa 94       	dec	r15
    1cb6:	f1 01       	movw	r30, r2
    1cb8:	ef 0d       	add	r30, r15
    1cba:	f1 1d       	adc	r31, r1
    1cbc:	b3 01       	movw	r22, r6
    1cbe:	80 81       	ld	r24, Z
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <fputc>
    1cc6:	ff 20       	and	r15, r15
    1cc8:	a9 f7       	brne	.-22     	; 0x1cb4 <vfprintf+0x384>
    1cca:	06 c0       	rjmp	.+12     	; 0x1cd8 <vfprintf+0x3a8>
    1ccc:	b3 01       	movw	r22, r6
    1cce:	80 e2       	ldi	r24, 0x20	; 32
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <fputc>
    1cd6:	ca 94       	dec	r12
    1cd8:	cc 20       	and	r12, r12
    1cda:	c1 f7       	brne	.-16     	; 0x1ccc <vfprintf+0x39c>
    1cdc:	41 ce       	rjmp	.-894    	; 0x1960 <vfprintf+0x30>
    1cde:	f3 01       	movw	r30, r6
    1ce0:	66 81       	ldd	r22, Z+6	; 0x06
    1ce2:	77 81       	ldd	r23, Z+7	; 0x07
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	2b 96       	adiw	r28, 0x0b	; 11
    1ce8:	e2 e1       	ldi	r30, 0x12	; 18
    1cea:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__epilogue_restores__>

00001cee <strnlen_P>:
    1cee:	fc 01       	movw	r30, r24
    1cf0:	05 90       	lpm	r0, Z+
    1cf2:	61 50       	subi	r22, 0x01	; 1
    1cf4:	70 40       	sbci	r23, 0x00	; 0
    1cf6:	01 10       	cpse	r0, r1
    1cf8:	d8 f7       	brcc	.-10     	; 0x1cf0 <strnlen_P+0x2>
    1cfa:	80 95       	com	r24
    1cfc:	90 95       	com	r25
    1cfe:	8e 0f       	add	r24, r30
    1d00:	9f 1f       	adc	r25, r31
    1d02:	08 95       	ret

00001d04 <strnlen>:
    1d04:	fc 01       	movw	r30, r24
    1d06:	61 50       	subi	r22, 0x01	; 1
    1d08:	70 40       	sbci	r23, 0x00	; 0
    1d0a:	01 90       	ld	r0, Z+
    1d0c:	01 10       	cpse	r0, r1
    1d0e:	d8 f7       	brcc	.-10     	; 0x1d06 <strnlen+0x2>
    1d10:	80 95       	com	r24
    1d12:	90 95       	com	r25
    1d14:	8e 0f       	add	r24, r30
    1d16:	9f 1f       	adc	r25, r31
    1d18:	08 95       	ret

00001d1a <fputc>:
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	8c 01       	movw	r16, r24
    1d24:	eb 01       	movw	r28, r22
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	81 ff       	sbrs	r24, 1
    1d2a:	1b c0       	rjmp	.+54     	; 0x1d62 <fputc+0x48>
    1d2c:	82 ff       	sbrs	r24, 2
    1d2e:	0d c0       	rjmp	.+26     	; 0x1d4a <fputc+0x30>
    1d30:	2e 81       	ldd	r18, Y+6	; 0x06
    1d32:	3f 81       	ldd	r19, Y+7	; 0x07
    1d34:	8c 81       	ldd	r24, Y+4	; 0x04
    1d36:	9d 81       	ldd	r25, Y+5	; 0x05
    1d38:	28 17       	cp	r18, r24
    1d3a:	39 07       	cpc	r19, r25
    1d3c:	64 f4       	brge	.+24     	; 0x1d56 <fputc+0x3c>
    1d3e:	e8 81       	ld	r30, Y
    1d40:	f9 81       	ldd	r31, Y+1	; 0x01
    1d42:	01 93       	st	Z+, r16
    1d44:	f9 83       	std	Y+1, r31	; 0x01
    1d46:	e8 83       	st	Y, r30
    1d48:	06 c0       	rjmp	.+12     	; 0x1d56 <fputc+0x3c>
    1d4a:	e8 85       	ldd	r30, Y+8	; 0x08
    1d4c:	f9 85       	ldd	r31, Y+9	; 0x09
    1d4e:	80 2f       	mov	r24, r16
    1d50:	09 95       	icall
    1d52:	89 2b       	or	r24, r25
    1d54:	31 f4       	brne	.+12     	; 0x1d62 <fputc+0x48>
    1d56:	8e 81       	ldd	r24, Y+6	; 0x06
    1d58:	9f 81       	ldd	r25, Y+7	; 0x07
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	9f 83       	std	Y+7, r25	; 0x07
    1d5e:	8e 83       	std	Y+6, r24	; 0x06
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <fputc+0x4c>
    1d62:	0f ef       	ldi	r16, 0xFF	; 255
    1d64:	1f ef       	ldi	r17, 0xFF	; 255
    1d66:	c8 01       	movw	r24, r16
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	08 95       	ret

00001d72 <__ultoa_invert>:
    1d72:	fa 01       	movw	r30, r20
    1d74:	aa 27       	eor	r26, r26
    1d76:	28 30       	cpi	r18, 0x08	; 8
    1d78:	51 f1       	breq	.+84     	; 0x1dce <__ultoa_invert+0x5c>
    1d7a:	20 31       	cpi	r18, 0x10	; 16
    1d7c:	81 f1       	breq	.+96     	; 0x1dde <__ultoa_invert+0x6c>
    1d7e:	e8 94       	clt
    1d80:	6f 93       	push	r22
    1d82:	6e 7f       	andi	r22, 0xFE	; 254
    1d84:	6e 5f       	subi	r22, 0xFE	; 254
    1d86:	7f 4f       	sbci	r23, 0xFF	; 255
    1d88:	8f 4f       	sbci	r24, 0xFF	; 255
    1d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8c:	af 4f       	sbci	r26, 0xFF	; 255
    1d8e:	b1 e0       	ldi	r27, 0x01	; 1
    1d90:	3e d0       	rcall	.+124    	; 0x1e0e <__ultoa_invert+0x9c>
    1d92:	b4 e0       	ldi	r27, 0x04	; 4
    1d94:	3c d0       	rcall	.+120    	; 0x1e0e <__ultoa_invert+0x9c>
    1d96:	67 0f       	add	r22, r23
    1d98:	78 1f       	adc	r23, r24
    1d9a:	89 1f       	adc	r24, r25
    1d9c:	9a 1f       	adc	r25, r26
    1d9e:	a1 1d       	adc	r26, r1
    1da0:	68 0f       	add	r22, r24
    1da2:	79 1f       	adc	r23, r25
    1da4:	8a 1f       	adc	r24, r26
    1da6:	91 1d       	adc	r25, r1
    1da8:	a1 1d       	adc	r26, r1
    1daa:	6a 0f       	add	r22, r26
    1dac:	71 1d       	adc	r23, r1
    1dae:	81 1d       	adc	r24, r1
    1db0:	91 1d       	adc	r25, r1
    1db2:	a1 1d       	adc	r26, r1
    1db4:	20 d0       	rcall	.+64     	; 0x1df6 <__ultoa_invert+0x84>
    1db6:	09 f4       	brne	.+2      	; 0x1dba <__ultoa_invert+0x48>
    1db8:	68 94       	set
    1dba:	3f 91       	pop	r19
    1dbc:	2a e0       	ldi	r18, 0x0A	; 10
    1dbe:	26 9f       	mul	r18, r22
    1dc0:	11 24       	eor	r1, r1
    1dc2:	30 19       	sub	r19, r0
    1dc4:	30 5d       	subi	r19, 0xD0	; 208
    1dc6:	31 93       	st	Z+, r19
    1dc8:	de f6       	brtc	.-74     	; 0x1d80 <__ultoa_invert+0xe>
    1dca:	cf 01       	movw	r24, r30
    1dcc:	08 95       	ret
    1dce:	46 2f       	mov	r20, r22
    1dd0:	47 70       	andi	r20, 0x07	; 7
    1dd2:	40 5d       	subi	r20, 0xD0	; 208
    1dd4:	41 93       	st	Z+, r20
    1dd6:	b3 e0       	ldi	r27, 0x03	; 3
    1dd8:	0f d0       	rcall	.+30     	; 0x1df8 <__ultoa_invert+0x86>
    1dda:	c9 f7       	brne	.-14     	; 0x1dce <__ultoa_invert+0x5c>
    1ddc:	f6 cf       	rjmp	.-20     	; 0x1dca <__ultoa_invert+0x58>
    1dde:	46 2f       	mov	r20, r22
    1de0:	4f 70       	andi	r20, 0x0F	; 15
    1de2:	40 5d       	subi	r20, 0xD0	; 208
    1de4:	4a 33       	cpi	r20, 0x3A	; 58
    1de6:	18 f0       	brcs	.+6      	; 0x1dee <__ultoa_invert+0x7c>
    1de8:	49 5d       	subi	r20, 0xD9	; 217
    1dea:	31 fd       	sbrc	r19, 1
    1dec:	40 52       	subi	r20, 0x20	; 32
    1dee:	41 93       	st	Z+, r20
    1df0:	02 d0       	rcall	.+4      	; 0x1df6 <__ultoa_invert+0x84>
    1df2:	a9 f7       	brne	.-22     	; 0x1dde <__ultoa_invert+0x6c>
    1df4:	ea cf       	rjmp	.-44     	; 0x1dca <__ultoa_invert+0x58>
    1df6:	b4 e0       	ldi	r27, 0x04	; 4
    1df8:	a6 95       	lsr	r26
    1dfa:	97 95       	ror	r25
    1dfc:	87 95       	ror	r24
    1dfe:	77 95       	ror	r23
    1e00:	67 95       	ror	r22
    1e02:	ba 95       	dec	r27
    1e04:	c9 f7       	brne	.-14     	; 0x1df8 <__ultoa_invert+0x86>
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	61 05       	cpc	r22, r1
    1e0a:	71 05       	cpc	r23, r1
    1e0c:	08 95       	ret
    1e0e:	9b 01       	movw	r18, r22
    1e10:	ac 01       	movw	r20, r24
    1e12:	0a 2e       	mov	r0, r26
    1e14:	06 94       	lsr	r0
    1e16:	57 95       	ror	r21
    1e18:	47 95       	ror	r20
    1e1a:	37 95       	ror	r19
    1e1c:	27 95       	ror	r18
    1e1e:	ba 95       	dec	r27
    1e20:	c9 f7       	brne	.-14     	; 0x1e14 <__ultoa_invert+0xa2>
    1e22:	62 0f       	add	r22, r18
    1e24:	73 1f       	adc	r23, r19
    1e26:	84 1f       	adc	r24, r20
    1e28:	95 1f       	adc	r25, r21
    1e2a:	a0 1d       	adc	r26, r0
    1e2c:	08 95       	ret

00001e2e <__prologue_saves__>:
    1e2e:	2f 92       	push	r2
    1e30:	3f 92       	push	r3
    1e32:	4f 92       	push	r4
    1e34:	5f 92       	push	r5
    1e36:	6f 92       	push	r6
    1e38:	7f 92       	push	r7
    1e3a:	8f 92       	push	r8
    1e3c:	9f 92       	push	r9
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	ca 1b       	sub	r28, r26
    1e58:	db 0b       	sbc	r29, r27
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	09 94       	ijmp

00001e66 <__epilogue_restores__>:
    1e66:	2a 88       	ldd	r2, Y+18	; 0x12
    1e68:	39 88       	ldd	r3, Y+17	; 0x11
    1e6a:	48 88       	ldd	r4, Y+16	; 0x10
    1e6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e70:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e72:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e74:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e76:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e78:	b9 84       	ldd	r11, Y+9	; 0x09
    1e7a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e7c:	df 80       	ldd	r13, Y+7	; 0x07
    1e7e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e80:	fd 80       	ldd	r15, Y+5	; 0x05
    1e82:	0c 81       	ldd	r16, Y+4	; 0x04
    1e84:	1b 81       	ldd	r17, Y+3	; 0x03
    1e86:	aa 81       	ldd	r26, Y+2	; 0x02
    1e88:	b9 81       	ldd	r27, Y+1	; 0x01
    1e8a:	ce 0f       	add	r28, r30
    1e8c:	d1 1d       	adc	r29, r1
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	ed 01       	movw	r28, r26
    1e9a:	08 95       	ret

00001e9c <_exit>:
    1e9c:	f8 94       	cli

00001e9e <__stop_program>:
    1e9e:	ff cf       	rjmp	.-2      	; 0x1e9e <__stop_program>
